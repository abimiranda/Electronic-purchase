

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Sep 16 12:51:43 2021

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    53                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    54  0000                     
    55                           ; Version 2.05
    56                           ; Generated 20/12/2018 GMT
    57                           ; 
    58                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution.
    72                           ; 
    73                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    74                           ;        software without specific prior written permission.
    75                           ; 
    76                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    77                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    78                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    79                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    80                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    81                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    82                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    83                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    84                           ; 
    85                           ; 
    86                           ; Code-generator required, PIC18F4550 Definitions
    87                           ; 
    88                           ; SFR Addresses
    89  0000                     
    90                           	psect	idataBANK0
    91  005714                     __pidataBANK0:
    92                           	opt callstack 0
    93                           
    94                           ;initializer for _tiempo_parpadeo_off
    95  005714  0001               	dw	1
    96  005716  0000               	dw	0
    97                           
    98                           ;initializer for _tiempo_parpadeo_on
    99  005718  0001               	dw	1
   100  00571A  0000               	dw	0
   101                           
   102                           ;initializer for _tiempo_ventana_peso
   103  00571C  0009               	dw	9
   104  00571E  0000               	dw	0
   105                           
   106                           ;initializer for _col
   107  005720  FF                 	db	255
   108                           
   109                           ;initializer for _fila
   110  005721  FF                 	db	255
   111                           
   112                           ;initializer for tic_encoder@estado
   113  005722  04                 	db	4
   114                           
   115                           ;initializer for tic_debounce@debounce_tic
   116  005723  0A                 	db	10
   117                           
   118                           ;initializer for _OffsetPeriodo
   119  005724  20                 	db	32
   120                           
   121                           ;initializer for _UpperByte
   122  005725  FF                 	db	255
   123                           
   124                           ;initializer for Send4Disp@Nro_Disp
   125  005726  01                 	db	1
   126                           
   127                           ;initializer for Leds13@i
   128  005727  01                 	db	1
   129                           
   130                           ;initializer for _frecuencia
   131  005728  03E8               	dw	1000
   132                           
   133                           	psect	idataBANK1
   134  0056EA                     __pidataBANK1:
   135                           	opt callstack 0
   136                           
   137                           ;initializer for _plomo
   138  0056EA  6666               	dw	26214
   139  0056EC  3FA6               	dw	16294
   140                           
   141                           ;initializer for _bronce
   142  0056EE  3333               	dw	13107
   143  0056F0  4103               	dw	16643
   144                           
   145                           ;initializer for _aluminio
   146  0056F2  CCCD               	dw	52429
   147  0056F4  40BC               	dw	16572
   148                           
   149                           ;initializer for _cobre
   150  0056F6  6666               	dw	26214
   151  0056F8  4126               	dw	16678
   152                           
   153                           ;initializer for _dolar_hoy
   154  0056FA  0062               	dw	98
   155  0056FC  0000               	dw	0
   156                           
   157                           	psect	smallconst
   158  002018                     __psmallconst:
   159                           	opt callstack 0
   160  002018  00                 	db	0
   161  002019                     _teclas:
   162                           	opt callstack 0
   163  002019  01                 	db	1
   164  00201A  02                 	db	2
   165  00201B  03                 	db	3
   166  00201C  04                 	db	4
   167  00201D  05                 	db	5
   168  00201E  06                 	db	6
   169  00201F  07                 	db	7
   170  002020  08                 	db	8
   171  002021  09                 	db	9
   172  002022  2A                 	db	42
   173  002023  00                 	db	0
   174  002024  2B                 	db	43
   175  002025                     __end_of_teclas:
   176                           	opt callstack 0
   177  002025  20                 	db	32
   178  002026  20                 	db	32
   179  002027  20                 	db	32
   180  002028  2A                 	db	42
   181  002029  2A                 	db	42
   182  00202A  46                 	db	70	;'F'
   183  00202B  72                 	db	114	;'r'
   184  00202C  61                 	db	97	;'a'
   185  00202D  73                 	db	115	;'s'
   186  00202E  65                 	db	101	;'e'
   187  00202F  20                 	db	32
   188  002030  65                 	db	101	;'e'
   189  002031  73                 	db	115	;'s'
   190  002032  63                 	db	99	;'c'
   191  002033  6F                 	db	111	;'o'
   192  002034  6E                 	db	110	;'n'
   193  002035  64                 	db	100	;'d'
   194  002036  69                 	db	105	;'i'
   195  002037  64                 	db	100	;'d'
   196  002038  61                 	db	97	;'a'
   197  002039  20                 	db	32
   198  00203A  3A                 	db	58	;':'
   199  00203B  2D                 	db	45
   200  00203C  29                 	db	41
   201  00203D  20                 	db	32
   202  00203E  2A                 	db	42
   203  00203F  2A                 	db	42
   204  002040  00                 	db	0
   205  002041  48                 	db	72	;'H'
   206  002042  6F                 	db	111	;'o'
   207  002043  6C                 	db	108	;'l'
   208  002044  61                 	db	97	;'a'
   209  002045  20                 	db	32
   210  002046  41                 	db	65	;'A'
   211  002047  6C                 	db	108	;'l'
   212  002048  75                 	db	117	;'u'
   213  002049  6D                 	db	109	;'m'
   214  00204A  6E                 	db	110	;'n'
   215  00204B  6F                 	db	111	;'o'
   216  00204C  73                 	db	115	;'s'
   217  00204D  00                 	db	0
   218  00204E  42                 	db	66	;'B'
   219  00204F  4F                 	db	79	;'O'
   220  002050  54                 	db	84	;'T'
   221  002051  31                 	db	49	;'1'
   222  002052  20                 	db	32
   223  002053  00                 	db	0
   224  002054  42                 	db	66	;'B'
   225  002055  4F                 	db	79	;'O'
   226  002056  54                 	db	84	;'T'
   227  002057  31                 	db	49	;'1'
   228  002058  00                 	db	0
   229  002059  42                 	db	66	;'B'
   230  00205A  4F                 	db	79	;'O'
   231  00205B  54                 	db	84	;'T'
   232  00205C  32                 	db	50	;'2'
   233  00205D  00                 	db	0
   234  00205E  42                 	db	66	;'B'
   235  00205F  4F                 	db	79	;'O'
   236  002060  54                 	db	84	;'T'
   237  002061  33                 	db	51	;'3'
   238  002062  00                 	db	0
   239  002063  42                 	db	66	;'B'
   240  002064  4F                 	db	79	;'O'
   241  002065  54                 	db	84	;'T'
   242  002066  34                 	db	52	;'4'
   243  002067  00                 	db	0
   244  002068                     STR_3:
   245  002068  41                 	db	65	;'A'
   246  002069  20                 	db	32
   247  00206A  24                 	db	36
   248  00206B  00                 	db	0
   249  00206C                     STR_8:
   250  00206C  42                 	db	66	;'B'
   251  00206D  20                 	db	32
   252  00206E  24                 	db	36
   253  00206F  00                 	db	0
   254  002070                     STR_1:
   255  002070  43                 	db	67	;'C'
   256  002071  20                 	db	32
   257  002072  24                 	db	36
   258  002073  00                 	db	0
   259  002074                     STR_10:
   260  002074  50                 	db	80	;'P'
   261  002075  20                 	db	32
   262  002076  24                 	db	36
   263  002077  00                 	db	0
   264  002078                     STR_12:
   265  002078  2E                 	db	46
   266  002079  2D                 	db	45
   267  00207A  00                 	db	0
   268  00207B                     STR_13:
   269  00207B  4B                 	db	75	;'K'
   270  00207C  67                 	db	103	;'g'
   271  00207D  00                 	db	0
   272  00207E                     STR_2:
   273  00207E  3C                 	db	60	;'<'
   274  00207F  00                 	db	0
   275  0000                     
   276                           ; #config settings
   277  002080  00                 	db	0	; dummy byte at the end
   278  0000                     
   279                           	psect	nvBANK1
   280  000138                     __pnvBANK1:
   281                           	opt callstack 0
   282  000138                     _LCD_tout:
   283                           	opt callstack 0
   284  000138                     	ds	2
   285  0000                     _PORTBbits	set	3969
   286  0000                     _INTCON3bits	set	4080
   287  0000                     _INTCON2bits	set	4081
   288  0000                     _TRISBbits	set	3987
   289  0000                     _EECON2	set	4007
   290  0000                     _EECON1bits	set	4006
   291  0000                     _EEDATA	set	4008
   292  0000                     _EEADR	set	4009
   293  0000                     _PORTB	set	3969
   294  0000                     _ADRESL	set	4035
   295  0000                     _ADRESH	set	4036
   296  0000                     _ADCON0bits	set	4034
   297  0000                     _ADCON2	set	4032
   298  0000                     _TRISAbits	set	3986
   299  0000                     _PORTA	set	3968
   300  0000                     _TXREG	set	4013
   301  0000                     _T2CONbits	set	4042
   302  0000                     _CCP1CONbits	set	4029
   303  0000                     _CCPR1L	set	4030
   304  0000                     _PR2	set	4043
   305  0000                     _RCREG	set	4014
   306  0000                     _RCSTAbits	set	4011
   307  0000                     _SPBRGH	set	4016
   308  0000                     _SPBRG	set	4015
   309  0000                     _BAUDCONbits	set	4024
   310  0000                     _TXSTAbits	set	4012
   311  0000                     _PIE1bits	set	3997
   312  0000                     _PIR1bits	set	3998
   313  0000                     _T1CONbits	set	4045
   314  0000                     _T0CONbits	set	4053
   315  0000                     _TRISC	set	3988
   316  0000                     _LATEbits	set	3981
   317  0000                     _LATAbits	set	3977
   318  0000                     _LATCbits	set	3979
   319  0000                     _TRISB	set	3987
   320  0000                     _TRISE	set	3990
   321  0000                     _TRISA	set	3986
   322  0000                     _ADCON1	set	4033
   323  0000                     _CMCON	set	4020
   324  0000                     _TRISCbits	set	3988
   325  0000                     _LATE	set	3981
   326  0000                     _LATC	set	3979
   327  0000                     _LATB	set	3978
   328  0000                     _LATA	set	3977
   329  0000                     _PORTDbits	set	3971
   330  0000                     _LATD	set	3980
   331  0000                     _PORTEbits	set	3972
   332  0000                     _TRISEbits	set	3990
   333  0000                     _TRISD	set	3989
   334  0000                     _LATDbits	set	3980
   335  0000                     _TMR1H	set	4047
   336  0000                     _TMR1L	set	4046
   337  0000                     _TMR0H	set	4055
   338  0000                     _TMR0L	set	4054
   339  0000                     _INTCONbits	set	4082
   340  0000                     _TRISDbits	set	3989
   341  0000                     _RBIE	set	32659
   342  0000                     _RBIP	set	32648
   343  0000                     _RBPU	set	32655
   344  0000                     _INT1IE	set	32643
   345  0000                     _INT1IF	set	32640
   346  0000                     _INT0IF	set	32657
   347  0000                     _INT0IE	set	32660
   348  0000                     _RBIF	set	32656
   349  0000                     _TMR1IF	set	31984
   350  0000                     _TMR0IF	set	32658
   351  0000                     _TMR1ON	set	32360
   352  0000                     _TMR0ON	set	32431
   353                           
   354                           	psect	cinit
   355  0059B0                     __pcinit:
   356                           	opt callstack 0
   357  0059B0                     start_initialization:
   358                           	opt callstack 0
   359  0059B0                     __initialization:
   360                           	opt callstack 0
   361                           
   362                           ; Initialize objects allocated to BANK1 (20 bytes)
   363                           ; load TBLPTR registers with __pidataBANK1
   364  0059B0  0EEA               	movlw	low __pidataBANK1
   365  0059B2  6EF6               	movwf	tblptrl,c
   366  0059B4  0E56               	movlw	high __pidataBANK1
   367  0059B6  6EF7               	movwf	tblptrh,c
   368  0059B8  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   369  0059BA  6EF8               	movwf	tblptru,c
   370  0059BC  EE01  F024         	lfsr	0,__pdataBANK1
   371  0059C0  EE10 F014          	lfsr	1,20
   372  0059C4                     copy_data0:
   373  0059C4  0009               	tblrd		*+
   374  0059C6  CFF5 FFEE          	movff	tablat,postinc0
   375  0059CA  50E5               	movf	postdec1,w,c
   376  0059CC  50E1               	movf	fsr1l,w,c
   377  0059CE  E1FA               	bnz	copy_data0
   378                           
   379                           ; Initialize objects allocated to BANK0 (22 bytes)
   380                           ; load TBLPTR registers with __pidataBANK0
   381  0059D0  0E14               	movlw	low __pidataBANK0
   382  0059D2  6EF6               	movwf	tblptrl,c
   383  0059D4  0E57               	movlw	high __pidataBANK0
   384  0059D6  6EF7               	movwf	tblptrh,c
   385  0059D8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   386  0059DA  6EF8               	movwf	tblptru,c
   387  0059DC  EE00  F0DE         	lfsr	0,__pdataBANK0
   388  0059E0  EE10 F016          	lfsr	1,22
   389  0059E4                     copy_data1:
   390  0059E4  0009               	tblrd		*+
   391  0059E6  CFF5 FFEE          	movff	tablat,postinc0
   392  0059EA  50E5               	movf	postdec1,w,c
   393  0059EC  50E1               	movf	fsr1l,w,c
   394  0059EE  E1FA               	bnz	copy_data1
   395                           
   396                           ; Clear objects allocated to BANK1 (36 bytes)
   397  0059F0  EE01  F000         	lfsr	0,__pbssBANK1
   398  0059F4  0E24               	movlw	36
   399  0059F6                     clear_0:
   400  0059F6  6AEE               	clrf	postinc0,c
   401  0059F8  06E8               	decf	wreg,f,c
   402  0059FA  E1FD               	bnz	clear_0
   403                           
   404                           ; Clear objects allocated to BANK0 (126 bytes)
   405  0059FC  EE00  F060         	lfsr	0,__pbssBANK0
   406  005A00  0E7E               	movlw	126
   407  005A02                     clear_1:
   408  005A02  6AEE               	clrf	postinc0,c
   409  005A04  06E8               	decf	wreg,f,c
   410  005A06  E1FD               	bnz	clear_1
   411  005A08                     end_of_initialization:
   412                           	opt callstack 0
   413  005A08                     __end_of__initialization:
   414                           	opt callstack 0
   415  005A08  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   416  005A0A  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   417  005A0C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   418  005A0E  6EF8               	movwf	tblptru,c
   419  005A10  0100               	movlb	0
   420  005A12  EF0A  F02C         	goto	_main	;jump to C main() function
   421                           
   422                           	psect	bssBANK0
   423  000060                     __pbssBANK0:
   424                           	opt callstack 0
   425  000060                     _activador_on:
   426                           	opt callstack 0
   427  000060                     	ds	4
   428  000064                     _activador_tiempo_ventana_peso:
   429                           	opt callstack 0
   430  000064                     	ds	4
   431  000068                     _casosMenu:
   432                           	opt callstack 0
   433  000068                     	ds	4
   434  00006C                     _plomo_hoy:
   435                           	opt callstack 0
   436  00006C                     	ds	4
   437  000070                     _bronce_hoy:
   438                           	opt callstack 0
   439  000070                     	ds	4
   440  000074                     _aluminio_hoy:
   441                           	opt callstack 0
   442  000074                     	ds	4
   443  000078                     _cobre_hoy:
   444                           	opt callstack 0
   445  000078                     	ds	4
   446  00007C                     _Puni:
   447                           	opt callstack 0
   448  00007C                     	ds	4
   449  000080                     _Pdec:
   450                           	opt callstack 0
   451  000080                     	ds	4
   452  000084                     _Pcen:
   453                           	opt callstack 0
   454  000084                     	ds	4
   455  000088                     _Pmil:
   456                           	opt callstack 0
   457  000088                     	ds	4
   458  00008C                     _Buni:
   459                           	opt callstack 0
   460  00008C                     	ds	4
   461  000090                     _Bdec:
   462                           	opt callstack 0
   463  000090                     	ds	4
   464  000094                     _Bcen:
   465                           	opt callstack 0
   466  000094                     	ds	4
   467  000098                     _Bmil:
   468                           	opt callstack 0
   469  000098                     	ds	4
   470  00009C                     _Auni:
   471                           	opt callstack 0
   472  00009C                     	ds	4
   473  0000A0                     _Adec:
   474                           	opt callstack 0
   475  0000A0                     	ds	4
   476  0000A4                     _Acen:
   477                           	opt callstack 0
   478  0000A4                     	ds	4
   479  0000A8                     _Amil:
   480                           	opt callstack 0
   481  0000A8                     	ds	4
   482  0000AC                     _Cuni:
   483                           	opt callstack 0
   484  0000AC                     	ds	4
   485  0000B0                     _Cdec:
   486                           	opt callstack 0
   487  0000B0                     	ds	4
   488  0000B4                     _Ccen:
   489                           	opt callstack 0
   490  0000B4                     	ds	4
   491  0000B8                     _Cmil:
   492                           	opt callstack 0
   493  0000B8                     	ds	4
   494  0000BC                     _desplazar_tout:
   495                           	opt callstack 0
   496  0000BC                     	ds	2
   497  0000BE                     _MedioPeriodoSet:
   498                           	opt callstack 0
   499  0000BE                     	ds	2
   500  0000C0                     _led_tout:
   501                           	opt callstack 0
   502  0000C0                     	ds	2
   503  0000C2                     tecla@status_KB:
   504                           	opt callstack 0
   505  0000C2                     	ds	1
   506  0000C3                     _delay_kb:
   507                           	opt callstack 0
   508  0000C3                     	ds	1
   509  0000C4                     _flag_kb:
   510                           	opt callstack 0
   511  0000C4                     	ds	1
   512  0000C5                     _flagCanal:
   513                           	opt callstack 0
   514  0000C5                     	ds	1
   515  0000C6                     _encoderTout:
   516                           	opt callstack 0
   517  0000C6                     	ds	1
   518  0000C7                     _posicionEncoder:
   519                           	opt callstack 0
   520  0000C7                     	ds	1
   521  0000C8                     _minimoEncoder:
   522                           	opt callstack 0
   523  0000C8                     	ds	1
   524  0000C9                     _maximoEncoder:
   525                           	opt callstack 0
   526  0000C9                     	ds	1
   527  0000CA                     demo_shield2_1@cont3:
   528                           	opt callstack 0
   529  0000CA                     	ds	1
   530  0000CB                     demo_shield2_1@cont2:
   531                           	opt callstack 0
   532  0000CB                     	ds	1
   533  0000CC                     demo_shield2_1@cont1:
   534                           	opt callstack 0
   535  0000CC                     	ds	1
   536  0000CD                     demo_shield2_1@cont:
   537                           	opt callstack 0
   538  0000CD                     	ds	1
   539  0000CE                     demo_shield2_1@Desplazar:
   540                           	opt callstack 0
   541  0000CE                     	ds	1
   542  0000CF                     demo_shield2_1@PrimeraVez:
   543                           	opt callstack 0
   544  0000CF                     	ds	1
   545  0000D0                     demo_shield2_1@flag3:
   546                           	opt callstack 0
   547  0000D0                     	ds	1
   548  0000D1                     demo_shield2_1@flag2:
   549                           	opt callstack 0
   550  0000D1                     	ds	1
   551  0000D2                     demo_shield2_1@flag1:
   552                           	opt callstack 0
   553  0000D2                     	ds	1
   554  0000D3                     demo_shield2_1@flag0:
   555                           	opt callstack 0
   556  0000D3                     	ds	1
   557  0000D4                     debounce@cnt1:
   558                           	opt callstack 0
   559  0000D4                     	ds	1
   560  0000D5                     debounce@cnt0:
   561                           	opt callstack 0
   562  0000D5                     	ds	1
   563  0000D6                     debounce@state:
   564                           	opt callstack 0
   565  0000D6                     	ds	1
   566  0000D7                     _MultiplicadorSet:
   567                           	opt callstack 0
   568  0000D7                     	ds	1
   569  0000D8                     _Multiplicador:
   570                           	opt callstack 0
   571  0000D8                     	ds	1
   572  0000D9                     _LowerByte:
   573                           	opt callstack 0
   574  0000D9                     	ds	1
   575  0000DA                     Botones13@Estado_BOT:
   576                           	opt callstack 0
   577  0000DA                     	ds	1
   578  0000DB                     _bot_tout:
   579                           	opt callstack 0
   580  0000DB                     	ds	1
   581  0000DC                     _mux_tout:
   582                           	opt callstack 0
   583  0000DC                     	ds	1
   584  0000DD                     _EstadoDeLosBotones:
   585                           	opt callstack 0
   586  0000DD                     	ds	1
   587                           
   588                           	psect	dataBANK0
   589  0000DE                     __pdataBANK0:
   590                           	opt callstack 0
   591  0000DE                     _tiempo_parpadeo_off:
   592                           	opt callstack 0
   593  0000DE                     	ds	4
   594  0000E2                     _tiempo_parpadeo_on:
   595                           	opt callstack 0
   596  0000E2                     	ds	4
   597  0000E6                     _tiempo_ventana_peso:
   598                           	opt callstack 0
   599  0000E6                     	ds	4
   600  0000EA                     _col:
   601                           	opt callstack 0
   602  0000EA                     	ds	1
   603  0000EB                     _fila:
   604                           	opt callstack 0
   605  0000EB                     	ds	1
   606  0000EC                     tic_encoder@estado:
   607                           	opt callstack 0
   608  0000EC                     	ds	1
   609  0000ED                     tic_debounce@debounce_tic:
   610                           	opt callstack 0
   611  0000ED                     	ds	1
   612  0000EE                     _OffsetPeriodo:
   613                           	opt callstack 0
   614  0000EE                     	ds	1
   615  0000EF                     _UpperByte:
   616                           	opt callstack 0
   617  0000EF                     	ds	1
   618  0000F0                     Send4Disp@Nro_Disp:
   619                           	opt callstack 0
   620  0000F0                     	ds	1
   621  0000F1                     Leds13@i:
   622                           	opt callstack 0
   623  0000F1                     	ds	1
   624  0000F2                     _frecuencia:
   625                           	opt callstack 0
   626  0000F2                     	ds	2
   627                           
   628                           	psect	bssBANK1
   629  000100                     __pbssBANK1:
   630                           	opt callstack 0
   631  000100                     _gramos:
   632                           	opt callstack 0
   633  000100                     	ds	4
   634  000104                     _uni_kg:
   635                           	opt callstack 0
   636  000104                     	ds	4
   637  000108                     _dec_kg:
   638                           	opt callstack 0
   639  000108                     	ds	4
   640  00010C                     _cen_kg:
   641                           	opt callstack 0
   642  00010C                     	ds	4
   643  000110                     _kgrs_pesado:
   644                           	opt callstack 0
   645  000110                     	ds	4
   646  000114                     _kilos:
   647                           	opt callstack 0
   648  000114                     	ds	4
   649  000118                     _guarda_ADC:
   650                           	opt callstack 0
   651  000118                     	ds	4
   652  00011C                     _casos_parpadeo:
   653                           	opt callstack 0
   654  00011C                     	ds	4
   655  000120                     _activador_off:
   656                           	opt callstack 0
   657  000120                     	ds	4
   658                           
   659                           	psect	dataBANK1
   660  000124                     __pdataBANK1:
   661                           	opt callstack 0
   662  000124                     _plomo:
   663                           	opt callstack 0
   664  000124                     	ds	4
   665  000128                     _bronce:
   666                           	opt callstack 0
   667  000128                     	ds	4
   668  00012C                     _aluminio:
   669                           	opt callstack 0
   670  00012C                     	ds	4
   671  000130                     _cobre:
   672                           	opt callstack 0
   673  000130                     	ds	4
   674  000134                     _dolar_hoy:
   675                           	opt callstack 0
   676  000134                     	ds	4
   677                           
   678                           	psect	cstackBANK0
   679  0000F4                     __pcstackBANK0:
   680                           	opt callstack 0
   681  0000F4                     ??_mefMenu:
   682                           
   683                           ; 1 bytes @ 0x0
   684  0000F4                     	ds	4
   685  0000F8                     _mefMenu$2615:
   686                           	opt callstack 0
   687                           
   688                           ; 4 bytes @ 0x4
   689  0000F8                     	ds	4
   690  0000FC                     _mefMenu$2614:
   691                           	opt callstack 0
   692                           
   693                           ; 4 bytes @ 0x8
   694  0000FC                     	ds	4
   695                           
   696                           	psect	cstackCOMRAM
   697  000001                     __pcstackCOMRAM:
   698                           	opt callstack 0
   699  000001                     ??_tecla:
   700  000001                     ?_obtener_ADC10:
   701                           	opt callstack 0
   702  000001                     ?_cobrePrecio:
   703                           	opt callstack 0
   704  000001                     ?_aluminioPrecio:
   705                           	opt callstack 0
   706  000001                     ?_broncePrecio:
   707                           	opt callstack 0
   708  000001                     ?_plomoPrecio:
   709                           	opt callstack 0
   710  000001                     ?___fladd:
   711                           	opt callstack 0
   712  000001                     ?___flmul:
   713                           	opt callstack 0
   714  000001                     write_LCD@dato:
   715                           	opt callstack 0
   716  000001                     ___fladd@b:
   717                           	opt callstack 0
   718  000001                     ___flmul@b:
   719                           	opt callstack 0
   720                           
   721                           ; 4 bytes @ 0x0
   722  000001                     	ds	1
   723  000002                     write_DATA@dato:
   724                           	opt callstack 0
   725  000002                     write_CMD@dato:
   726                           	opt callstack 0
   727                           
   728                           ; 1 bytes @ 0x1
   729  000002                     	ds	1
   730  000003                     char2LCD@dato:
   731                           	opt callstack 0
   732  000003                     set_CURSOR@posi:
   733                           	opt callstack 0
   734  000003                     obtener_ADC10@GuardoPorta:
   735                           	opt callstack 0
   736  000003                     tecla@tecla_KB:
   737                           	opt callstack 0
   738  000003                     msg2LCD@datos:
   739                           	opt callstack 0
   740  000003                     clear_LCD@i:
   741                           	opt callstack 0
   742  000003                     LCD_init@i:
   743                           	opt callstack 0
   744                           
   745                           ; 4 bytes @ 0x2
   746  000003                     	ds	1
   747  000004                     obtener_ADC10@GuardoTrisa:
   748                           	opt callstack 0
   749  000004                     char2LCD@i:
   750                           	opt callstack 0
   751  000004                     set_CURSOR@i:
   752                           	opt callstack 0
   753                           
   754                           ; 4 bytes @ 0x3
   755  000004                     	ds	1
   756  000005                     obtener_ADC10@ad_res:
   757                           	opt callstack 0
   758  000005                     msg2LCD@i:
   759                           	opt callstack 0
   760  000005                     ___fladd@a:
   761                           	opt callstack 0
   762  000005                     ___flmul@a:
   763                           	opt callstack 0
   764                           
   765                           ; 4 bytes @ 0x4
   766  000005                     	ds	2
   767  000007                     ?___xxtofl:
   768                           	opt callstack 0
   769  000007                     LCD_init@i_522:
   770                           	opt callstack 0
   771  000007                     ___xxtofl@val:
   772                           	opt callstack 0
   773                           
   774                           ; 4 bytes @ 0x6
   775  000007                     	ds	2
   776  000009                     ??___fladd:
   777  000009                     ??___flmul:
   778                           
   779                           ; 1 bytes @ 0x8
   780  000009                     	ds	2
   781  00000B                     ??___xxtofl:
   782  00000B                     LCD_init@i_523:
   783                           	opt callstack 0
   784                           
   785                           ; 4 bytes @ 0xA
   786  00000B                     	ds	2
   787  00000D                     ___fladd@signs:
   788                           	opt callstack 0
   789  00000D                     ___flmul@sign:
   790                           	opt callstack 0
   791                           
   792                           ; 1 bytes @ 0xC
   793  00000D                     	ds	1
   794  00000E                     ___fladd@aexp:
   795                           	opt callstack 0
   796  00000E                     ___flmul@grs:
   797                           	opt callstack 0
   798                           
   799                           ; 4 bytes @ 0xD
   800  00000E                     	ds	1
   801  00000F                     ___fladd@bexp:
   802                           	opt callstack 0
   803  00000F                     ___xxtofl@sign:
   804                           	opt callstack 0
   805  00000F                     LCD_init@i_524:
   806                           	opt callstack 0
   807                           
   808                           ; 4 bytes @ 0xE
   809  00000F                     	ds	1
   810  000010                     ___fladd@grs:
   811                           	opt callstack 0
   812  000010                     ___xxtofl@exp:
   813                           	opt callstack 0
   814                           
   815                           ; 1 bytes @ 0xF
   816  000010                     	ds	1
   817  000011                     ?___fltol:
   818                           	opt callstack 0
   819  000011                     ___fltol@f1:
   820                           	opt callstack 0
   821  000011                     ___xxtofl@arg:
   822                           	opt callstack 0
   823                           
   824                           ; 4 bytes @ 0x10
   825  000011                     	ds	1
   826  000012                     ___flmul@aexp:
   827                           	opt callstack 0
   828                           
   829                           ; 1 bytes @ 0x11
   830  000012                     	ds	1
   831  000013                     ___flmul@bexp:
   832                           	opt callstack 0
   833  000013                     LCD_init@i_525:
   834                           	opt callstack 0
   835                           
   836                           ; 4 bytes @ 0x12
   837  000013                     	ds	1
   838  000014                     ___flmul@prod:
   839                           	opt callstack 0
   840                           
   841                           ; 4 bytes @ 0x13
   842  000014                     	ds	1
   843  000015                     ??___fltol:
   844                           
   845                           ; 1 bytes @ 0x14
   846  000015                     	ds	2
   847  000017                     LCD_init@i_526:
   848                           	opt callstack 0
   849                           
   850                           ; 4 bytes @ 0x16
   851  000017                     	ds	1
   852  000018                     ___flmul@temp:
   853                           	opt callstack 0
   854                           
   855                           ; 2 bytes @ 0x17
   856  000018                     	ds	1
   857  000019                     ___fltol@sign1:
   858                           	opt callstack 0
   859                           
   860                           ; 1 bytes @ 0x18
   861  000019                     	ds	1
   862  00001A                     ?___fldiv:
   863                           	opt callstack 0
   864  00001A                     ___fltol@exp1:
   865                           	opt callstack 0
   866  00001A                     ___fldiv@b:
   867                           	opt callstack 0
   868                           
   869                           ; 4 bytes @ 0x19
   870  00001A                     	ds	4
   871  00001E                     ___fldiv@a:
   872                           	opt callstack 0
   873                           
   874                           ; 4 bytes @ 0x1D
   875  00001E                     	ds	4
   876  000022                     ??___fldiv:
   877                           
   878                           ; 1 bytes @ 0x21
   879  000022                     	ds	4
   880  000026                     ___fldiv@rem:
   881                           	opt callstack 0
   882                           
   883                           ; 4 bytes @ 0x25
   884  000026                     	ds	4
   885  00002A                     ___fldiv@sign:
   886                           	opt callstack 0
   887                           
   888                           ; 1 bytes @ 0x29
   889  00002A                     	ds	1
   890  00002B                     ___fldiv@new_exp:
   891                           	opt callstack 0
   892                           
   893                           ; 2 bytes @ 0x2A
   894  00002B                     	ds	2
   895  00002D                     ___fldiv@grs:
   896                           	opt callstack 0
   897                           
   898                           ; 4 bytes @ 0x2C
   899  00002D                     	ds	4
   900  000031                     ___fldiv@bexp:
   901                           	opt callstack 0
   902                           
   903                           ; 1 bytes @ 0x30
   904  000031                     	ds	1
   905  000032                     ___fldiv@aexp:
   906                           	opt callstack 0
   907                           
   908                           ; 1 bytes @ 0x31
   909  000032                     	ds	1
   910  000033                     ?_readADC:
   911                           	opt callstack 0
   912                           
   913                           ; 4 bytes @ 0x32
   914  000033                     	ds	4
   915  000037                     ?___almod:
   916                           	opt callstack 0
   917  000037                     ___almod@dividend:
   918                           	opt callstack 0
   919                           
   920                           ; 4 bytes @ 0x36
   921  000037                     	ds	4
   922  00003B                     ___almod@divisor:
   923                           	opt callstack 0
   924                           
   925                           ; 4 bytes @ 0x3A
   926  00003B                     	ds	4
   927  00003F                     ___almod@counter:
   928                           	opt callstack 0
   929                           
   930                           ; 1 bytes @ 0x3E
   931  00003F                     	ds	1
   932  000040                     ___almod@sign:
   933                           	opt callstack 0
   934                           
   935                           ; 1 bytes @ 0x3F
   936  000040                     	ds	1
   937  000041                     ?___aldiv:
   938                           	opt callstack 0
   939  000041                     ___aldiv@dividend:
   940                           	opt callstack 0
   941                           
   942                           ; 4 bytes @ 0x40
   943  000041                     	ds	4
   944  000045                     ___aldiv@divisor:
   945                           	opt callstack 0
   946                           
   947                           ; 4 bytes @ 0x44
   948  000045                     	ds	4
   949  000049                     ___aldiv@counter:
   950                           	opt callstack 0
   951                           
   952                           ; 1 bytes @ 0x48
   953  000049                     	ds	1
   954  00004A                     ___aldiv@sign:
   955                           	opt callstack 0
   956                           
   957                           ; 1 bytes @ 0x49
   958  00004A                     	ds	1
   959  00004B                     ___aldiv@quotient:
   960                           	opt callstack 0
   961                           
   962                           ; 4 bytes @ 0x4A
   963  00004B                     	ds	4
   964  00004F                     _descomposicion$2616:
   965                           	opt callstack 0
   966                           
   967                           ; 4 bytes @ 0x4E
   968  00004F                     	ds	4
   969  000053                     _descomposicion$2618:
   970                           	opt callstack 0
   971                           
   972                           ; 4 bytes @ 0x52
   973  000053                     	ds	4
   974  000057                     _descomposicion$2617:
   975                           	opt callstack 0
   976                           
   977                           ; 4 bytes @ 0x56
   978  000057                     	ds	4
   979  00005B                     ??_parpadeoLed:
   980                           
   981                           ; 1 bytes @ 0x5A
   982  00005B                     	ds	4
   983  00005F                     
   984                           ; 1 bytes @ 0x5E
   985 ;;
   986 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   987 ;;
   988 ;; *************** function _main *****************
   989 ;; Defined at:
   990 ;;		line 58 in file "main.c"
   991 ;; Parameters:    Size  Location     Type
   992 ;;		None
   993 ;; Auto vars:     Size  Location     Type
   994 ;;		None
   995 ;; Return value:  Size  Location     Type
   996 ;;                  1    wreg      void 
   997 ;; Registers used:
   998 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   999 ;; Tracked objects:
  1000 ;;		On entry : 0/0
  1001 ;;		On exit  : 0/0
  1002 ;;		Unchanged: 0/0
  1003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1004 ;;      Params:         0       0       0       0       0       0       0       0       0
  1005 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1006 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1007 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1008 ;;Total ram usage:        0 bytes
  1009 ;; Hardware stack levels required when called:    8
  1010 ;; This function calls:
  1011 ;;		_LCD_init
  1012 ;;		_PicIni21
  1013 ;;		_TIMER0_INI
  1014 ;;		_TIMER1_INI
  1015 ;;		_mefMenu
  1016 ;;		_tecladoIni13
  1017 ;; This function is called by:
  1018 ;;		Startup code after reset
  1019 ;; This function uses a non-reentrant model
  1020 ;;
  1021                           
  1022                           	psect	text0
  1023  005814                     __ptext0:
  1024                           	opt callstack 0
  1025  005814                     _main:
  1026                           	opt callstack 23
  1027                           
  1028                           ;main.c: 60: PicIni21();
  1029                           
  1030                           ;incstack = 0
  1031  005814  EC1C  F02C         	call	_PicIni21	;wreg free
  1032                           
  1033                           ;main.c: 62: TRISDbits.RD1 = 0;
  1034  005818  9295               	bcf	3989,1,c	;volatile
  1035                           
  1036                           ;main.c: 63: TRISDbits.RD0 = 0;
  1037  00581A  9095               	bcf	3989,0,c	;volatile
  1038                           
  1039                           ;main.c: 65: TIMER0_INI();
  1040  00581C  EC95  F02B         	call	_TIMER0_INI	;wreg free
  1041                           
  1042                           ;main.c: 66: TMR0ON = 1;
  1043  005820  8ED5               	bsf	4053,7,c	;volatile
  1044                           
  1045                           ;main.c: 67: TIMER1_INI();
  1046  005822  ECB2  F02B         	call	_TIMER1_INI	;wreg free
  1047                           
  1048                           ;main.c: 68: TMR1ON = 1;
  1049  005826  80CD               	bsf	4045,0,c	;volatile
  1050                           
  1051                           ;main.c: 69: (INTCONbits.GIE = 1);
  1052  005828  8EF2               	bsf	4082,7,c	;volatile
  1053                           
  1054                           ;main.c: 70: tecladoIni13();
  1055  00582A  EC7F  F02B         	call	_tecladoIni13	;wreg free
  1056                           
  1057                           ;main.c: 71: LCD_init();
  1058  00582E  EC11  F030         	call	_LCD_init	;wreg free
  1059  005832                     l5081:
  1060                           
  1061                           ;main.c: 75: mefMenu();
  1062  005832  EC6C  F037         	call	_mefMenu	;wreg free
  1063  005836  D7FD               	goto	l5081
  1064  005838                     __end_of_main:
  1065                           	opt callstack 0
  1066                           
  1067 ;; *************** function _tecladoIni13 *****************
  1068 ;; Defined at:
  1069 ;;		line 42 in file "teclado.c"
  1070 ;; Parameters:    Size  Location     Type
  1071 ;;		None
  1072 ;; Auto vars:     Size  Location     Type
  1073 ;;		None
  1074 ;; Return value:  Size  Location     Type
  1075 ;;                  1    wreg      void 
  1076 ;; Registers used:
  1077 ;;		wreg, status,2
  1078 ;; Tracked objects:
  1079 ;;		On entry : 0/0
  1080 ;;		On exit  : 0/0
  1081 ;;		Unchanged: 0/0
  1082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1083 ;;      Params:         0       0       0       0       0       0       0       0       0
  1084 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1085 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1086 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1087 ;;Total ram usage:        0 bytes
  1088 ;; Hardware stack levels used:    1
  1089 ;; Hardware stack levels required when called:    2
  1090 ;; This function calls:
  1091 ;;		Nothing
  1092 ;; This function is called by:
  1093 ;;		_main
  1094 ;; This function uses a non-reentrant model
  1095 ;;
  1096                           
  1097                           	psect	text1
  1098  0056FE                     __ptext1:
  1099                           	opt callstack 0
  1100  0056FE                     _tecladoIni13:
  1101                           	opt callstack 28
  1102                           
  1103                           ;teclado.c: 44: LATB = 0;
  1104                           
  1105                           ;incstack = 0
  1106  0056FE  0E00               	movlw	0
  1107  005700  6E8A               	movwf	3978,c	;volatile
  1108                           
  1109                           ;teclado.c: 45: PORTB = 0;
  1110  005702  0E00               	movlw	0
  1111  005704  6E81               	movwf	3969,c	;volatile
  1112                           
  1113                           ;teclado.c: 46: TRISB = 0xF0;
  1114  005706  0EF0               	movlw	240
  1115  005708  6E93               	movwf	3987,c	;volatile
  1116                           
  1117                           ;teclado.c: 47: RBPU = 0;
  1118  00570A  9EF1               	bcf	4081,7,c	;volatile
  1119                           
  1120                           ;teclado.c: 48: RBIP = 1;
  1121  00570C  80F1               	bsf	4081,0,c	;volatile
  1122                           
  1123                           ;teclado.c: 49: RBIF = 0;
  1124  00570E  90F2               	bcf	4082,0,c	;volatile
  1125                           
  1126                           ;teclado.c: 50: RBIE = 1;
  1127  005710  86F2               	bsf	4082,3,c	;volatile
  1128  005712  0012               	return		;funcret
  1129  005714                     __end_of_tecladoIni13:
  1130                           	opt callstack 0
  1131                           
  1132 ;; *************** function _mefMenu *****************
  1133 ;; Defined at:
  1134 ;;		line 126 in file "main.c"
  1135 ;; Parameters:    Size  Location     Type
  1136 ;;		None
  1137 ;; Auto vars:     Size  Location     Type
  1138 ;;		None
  1139 ;; Return value:  Size  Location     Type
  1140 ;;                  1    wreg      void 
  1141 ;; Registers used:
  1142 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1143 ;; Tracked objects:
  1144 ;;		On entry : 0/0
  1145 ;;		On exit  : 0/0
  1146 ;;		Unchanged: 0/0
  1147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1148 ;;      Params:         0       0       0       0       0       0       0       0       0
  1149 ;;      Locals:         0       8       0       0       0       0       0       0       0
  1150 ;;      Temps:          0       4       0       0       0       0       0       0       0
  1151 ;;      Totals:         0      12       0       0       0       0       0       0       0
  1152 ;;Total ram usage:       12 bytes
  1153 ;; Hardware stack levels used:    1
  1154 ;; Hardware stack levels required when called:    7
  1155 ;; This function calls:
  1156 ;;		___aldiv
  1157 ;;		___almod
  1158 ;;		_aluminioPrecio
  1159 ;;		_broncePrecio
  1160 ;;		_char2LCD
  1161 ;;		_clear_LCD
  1162 ;;		_cobrePrecio
  1163 ;;		_descomposicion
  1164 ;;		_msg2LCD
  1165 ;;		_parpadeoLed
  1166 ;;		_plomoPrecio
  1167 ;;		_set_CURSOR
  1168 ;;		_tecla
  1169 ;; This function is called by:
  1170 ;;		_main
  1171 ;; This function uses a non-reentrant model
  1172 ;;
  1173                           
  1174                           	psect	text2
  1175  006ED8                     __ptext2:
  1176                           	opt callstack 0
  1177  006ED8                     _mefMenu:
  1178                           	opt callstack 23
  1179                           
  1180                           ;main.c: 127: switch (casosMenu) {
  1181                           
  1182                           ;incstack = 0
  1183  006ED8  EFD5  F03F         	goto	l4951
  1184  006EDC                     l4749:
  1185                           
  1186                           ; BSR set to: 0
  1187                           ;main.c: 129: {;main.c: 130: set_CURSOR(0x00);
  1188  006EDC  0E00               	movlw	0
  1189  006EDE  EC6B  F02C         	call	_set_CURSOR
  1190                           
  1191                           ;main.c: 131: msg2LCD("C $");
  1192  006EE2  0E70               	movlw	low STR_1
  1193  006EE4  6E03               	movwf	msg2LCD@datos,c
  1194  006EE6  0E20               	movlw	high STR_1
  1195  006EE8  6E04               	movwf	msg2LCD@datos+1,c
  1196  006EEA  ECAC  F02C         	call	_msg2LCD	;wreg free
  1197                           
  1198                           ;main.c: 133: Cmil = cobrePrecio() / 1000;
  1199  006EEE  ECE6  F02B         	call	_cobrePrecio	;wreg free
  1200  006EF2  C001  F041         	movff	?_cobrePrecio,___aldiv@dividend
  1201  006EF6  C002  F042         	movff	?_cobrePrecio+1,___aldiv@dividend+1
  1202  006EFA  C003  F043         	movff	?_cobrePrecio+2,___aldiv@dividend+2
  1203  006EFE  C004  F044         	movff	?_cobrePrecio+3,___aldiv@dividend+3
  1204  006F02  0EE8               	movlw	232
  1205  006F04  6E45               	movwf	___aldiv@divisor,c
  1206  006F06  0E03               	movlw	3
  1207  006F08  6E46               	movwf	___aldiv@divisor+1,c
  1208  006F0A  0E00               	movlw	0
  1209  006F0C  6E47               	movwf	___aldiv@divisor+2,c
  1210  006F0E  0E00               	movlw	0
  1211  006F10  6E48               	movwf	___aldiv@divisor+3,c
  1212  006F12  EC68  F02E         	call	___aldiv	;wreg free
  1213  006F16  C041  F0B8         	movff	?___aldiv,_Cmil
  1214  006F1A  C042  F0B9         	movff	?___aldiv+1,_Cmil+1
  1215  006F1E  C043  F0BA         	movff	?___aldiv+2,_Cmil+2
  1216  006F22  C044  F0BB         	movff	?___aldiv+3,_Cmil+3
  1217                           
  1218                           ;main.c: 134: Ccen = (cobrePrecio() % 1000) / 100;
  1219  006F26  0EE8               	movlw	232
  1220  006F28  6E3B               	movwf	___almod@divisor,c
  1221  006F2A  0E03               	movlw	3
  1222  006F2C  6E3C               	movwf	___almod@divisor+1,c
  1223  006F2E  0E00               	movlw	0
  1224  006F30  6E3D               	movwf	___almod@divisor+2,c
  1225  006F32  0E00               	movlw	0
  1226  006F34  6E3E               	movwf	___almod@divisor+3,c
  1227  006F36  ECE6  F02B         	call	_cobrePrecio	;wreg free
  1228  006F3A  C001  F037         	movff	?_cobrePrecio,___almod@dividend
  1229  006F3E  C002  F038         	movff	?_cobrePrecio+1,___almod@dividend+1
  1230  006F42  C003  F039         	movff	?_cobrePrecio+2,___almod@dividend+2
  1231  006F46  C004  F03A         	movff	?_cobrePrecio+3,___almod@dividend+3
  1232  006F4A  EC5D  F02D         	call	___almod	;wreg free
  1233  006F4E  C037  F041         	movff	?___almod,___aldiv@dividend
  1234  006F52  C038  F042         	movff	?___almod+1,___aldiv@dividend+1
  1235  006F56  C039  F043         	movff	?___almod+2,___aldiv@dividend+2
  1236  006F5A  C03A  F044         	movff	?___almod+3,___aldiv@dividend+3
  1237  006F5E  0E64               	movlw	100
  1238  006F60  6E45               	movwf	___aldiv@divisor,c
  1239  006F62  0E00               	movlw	0
  1240  006F64  6E46               	movwf	___aldiv@divisor+1,c
  1241  006F66  0E00               	movlw	0
  1242  006F68  6E47               	movwf	___aldiv@divisor+2,c
  1243  006F6A  0E00               	movlw	0
  1244  006F6C  6E48               	movwf	___aldiv@divisor+3,c
  1245  006F6E  EC68  F02E         	call	___aldiv	;wreg free
  1246  006F72  C041  F0B4         	movff	?___aldiv,_Ccen
  1247  006F76  C042  F0B5         	movff	?___aldiv+1,_Ccen+1
  1248  006F7A  C043  F0B6         	movff	?___aldiv+2,_Ccen+2
  1249  006F7E  C044  F0B7         	movff	?___aldiv+3,_Ccen+3
  1250                           
  1251                           ;main.c: 135: Cdec = ((cobrePrecio() % 1000) % 100) / 10;
  1252  006F82  0EE8               	movlw	232
  1253  006F84  6E3B               	movwf	___almod@divisor,c
  1254  006F86  0E03               	movlw	3
  1255  006F88  6E3C               	movwf	___almod@divisor+1,c
  1256  006F8A  0E00               	movlw	0
  1257  006F8C  6E3D               	movwf	___almod@divisor+2,c
  1258  006F8E  0E00               	movlw	0
  1259  006F90  6E3E               	movwf	___almod@divisor+3,c
  1260  006F92  ECE6  F02B         	call	_cobrePrecio	;wreg free
  1261  006F96  C001  F037         	movff	?_cobrePrecio,___almod@dividend
  1262  006F9A  C002  F038         	movff	?_cobrePrecio+1,___almod@dividend+1
  1263  006F9E  C003  F039         	movff	?_cobrePrecio+2,___almod@dividend+2
  1264  006FA2  C004  F03A         	movff	?_cobrePrecio+3,___almod@dividend+3
  1265  006FA6  EC5D  F02D         	call	___almod	;wreg free
  1266  006FAA  C037  F0FC         	movff	?___almod,_mefMenu$2614
  1267  006FAE  C038  F0FD         	movff	?___almod+1,_mefMenu$2614+1
  1268  006FB2  C039  F0FE         	movff	?___almod+2,_mefMenu$2614+2
  1269  006FB6  C03A  F0FF         	movff	?___almod+3,_mefMenu$2614+3
  1270                           
  1271                           ;main.c: 135: Cdec = ((cobrePrecio() % 1000) % 100) / 10;
  1272  006FBA  0E64               	movlw	100
  1273  006FBC  6E3B               	movwf	___almod@divisor,c
  1274  006FBE  0E00               	movlw	0
  1275  006FC0  6E3C               	movwf	___almod@divisor+1,c
  1276  006FC2  0E00               	movlw	0
  1277  006FC4  6E3D               	movwf	___almod@divisor+2,c
  1278  006FC6  0E00               	movlw	0
  1279  006FC8  6E3E               	movwf	___almod@divisor+3,c
  1280  006FCA  C0FC  F037         	movff	_mefMenu$2614,___almod@dividend
  1281  006FCE  C0FD  F038         	movff	_mefMenu$2614+1,___almod@dividend+1
  1282  006FD2  C0FE  F039         	movff	_mefMenu$2614+2,___almod@dividend+2
  1283  006FD6  C0FF  F03A         	movff	_mefMenu$2614+3,___almod@dividend+3
  1284  006FDA  EC5D  F02D         	call	___almod	;wreg free
  1285  006FDE  C037  F041         	movff	?___almod,___aldiv@dividend
  1286  006FE2  C038  F042         	movff	?___almod+1,___aldiv@dividend+1
  1287  006FE6  C039  F043         	movff	?___almod+2,___aldiv@dividend+2
  1288  006FEA  C03A  F044         	movff	?___almod+3,___aldiv@dividend+3
  1289  006FEE  0E0A               	movlw	10
  1290  006FF0  6E45               	movwf	___aldiv@divisor,c
  1291  006FF2  0E00               	movlw	0
  1292  006FF4  6E46               	movwf	___aldiv@divisor+1,c
  1293  006FF6  0E00               	movlw	0
  1294  006FF8  6E47               	movwf	___aldiv@divisor+2,c
  1295  006FFA  0E00               	movlw	0
  1296  006FFC  6E48               	movwf	___aldiv@divisor+3,c
  1297  006FFE  EC68  F02E         	call	___aldiv	;wreg free
  1298  007002  C041  F0B0         	movff	?___aldiv,_Cdec
  1299  007006  C042  F0B1         	movff	?___aldiv+1,_Cdec+1
  1300  00700A  C043  F0B2         	movff	?___aldiv+2,_Cdec+2
  1301  00700E  C044  F0B3         	movff	?___aldiv+3,_Cdec+3
  1302                           
  1303                           ;main.c: 136: Cuni = ((cobrePrecio() % 1000) % 100) % 10;
  1304  007012  0EE8               	movlw	232
  1305  007014  6E3B               	movwf	___almod@divisor,c
  1306  007016  0E03               	movlw	3
  1307  007018  6E3C               	movwf	___almod@divisor+1,c
  1308  00701A  0E00               	movlw	0
  1309  00701C  6E3D               	movwf	___almod@divisor+2,c
  1310  00701E  0E00               	movlw	0
  1311  007020  6E3E               	movwf	___almod@divisor+3,c
  1312  007022  ECE6  F02B         	call	_cobrePrecio	;wreg free
  1313  007026  C001  F037         	movff	?_cobrePrecio,___almod@dividend
  1314  00702A  C002  F038         	movff	?_cobrePrecio+1,___almod@dividend+1
  1315  00702E  C003  F039         	movff	?_cobrePrecio+2,___almod@dividend+2
  1316  007032  C004  F03A         	movff	?_cobrePrecio+3,___almod@dividend+3
  1317  007036  EC5D  F02D         	call	___almod	;wreg free
  1318  00703A  C037  F0FC         	movff	?___almod,_mefMenu$2614
  1319  00703E  C038  F0FD         	movff	?___almod+1,_mefMenu$2614+1
  1320  007042  C039  F0FE         	movff	?___almod+2,_mefMenu$2614+2
  1321  007046  C03A  F0FF         	movff	?___almod+3,_mefMenu$2614+3
  1322                           
  1323                           ;main.c: 136: Cuni = ((cobrePrecio() % 1000) % 100) % 10;
  1324  00704A  0E64               	movlw	100
  1325  00704C  6E3B               	movwf	___almod@divisor,c
  1326  00704E  0E00               	movlw	0
  1327  007050  6E3C               	movwf	___almod@divisor+1,c
  1328  007052  0E00               	movlw	0
  1329  007054  6E3D               	movwf	___almod@divisor+2,c
  1330  007056  0E00               	movlw	0
  1331  007058  6E3E               	movwf	___almod@divisor+3,c
  1332  00705A  C0FC  F037         	movff	_mefMenu$2614,___almod@dividend
  1333  00705E  C0FD  F038         	movff	_mefMenu$2614+1,___almod@dividend+1
  1334  007062  C0FE  F039         	movff	_mefMenu$2614+2,___almod@dividend+2
  1335  007066  C0FF  F03A         	movff	_mefMenu$2614+3,___almod@dividend+3
  1336  00706A  EC5D  F02D         	call	___almod	;wreg free
  1337  00706E  C037  F0F8         	movff	?___almod,_mefMenu$2615
  1338  007072  C038  F0F9         	movff	?___almod+1,_mefMenu$2615+1
  1339  007076  C039  F0FA         	movff	?___almod+2,_mefMenu$2615+2
  1340  00707A  C03A  F0FB         	movff	?___almod+3,_mefMenu$2615+3
  1341                           
  1342                           ;main.c: 136: Cuni = ((cobrePrecio() % 1000) % 100) % 10;
  1343  00707E  C0F8  F037         	movff	_mefMenu$2615,___almod@dividend
  1344  007082  C0F9  F038         	movff	_mefMenu$2615+1,___almod@dividend+1
  1345  007086  C0FA  F039         	movff	_mefMenu$2615+2,___almod@dividend+2
  1346  00708A  C0FB  F03A         	movff	_mefMenu$2615+3,___almod@dividend+3
  1347  00708E  0E0A               	movlw	10
  1348  007090  6E3B               	movwf	___almod@divisor,c
  1349  007092  0E00               	movlw	0
  1350  007094  6E3C               	movwf	___almod@divisor+1,c
  1351  007096  0E00               	movlw	0
  1352  007098  6E3D               	movwf	___almod@divisor+2,c
  1353  00709A  0E00               	movlw	0
  1354  00709C  6E3E               	movwf	___almod@divisor+3,c
  1355  00709E  EC5D  F02D         	call	___almod	;wreg free
  1356  0070A2  C037  F0AC         	movff	?___almod,_Cuni
  1357  0070A6  C038  F0AD         	movff	?___almod+1,_Cuni+1
  1358  0070AA  C039  F0AE         	movff	?___almod+2,_Cuni+2
  1359  0070AE  C03A  F0AF         	movff	?___almod+3,_Cuni+3
  1360                           
  1361                           ;main.c: 138: char2LCD(Cmil + 48);
  1362  0070B2  0100               	movlb	0	; () banked
  1363  0070B4  51B8               	movf	_Cmil& (0+255),w,b
  1364  0070B6  0F30               	addlw	48
  1365  0070B8  EC4E  F02C         	call	_char2LCD
  1366                           
  1367                           ;main.c: 139: char2LCD(Ccen + 48);
  1368  0070BC  0100               	movlb	0	; () banked
  1369  0070BE  51B4               	movf	_Ccen& (0+255),w,b
  1370  0070C0  0F30               	addlw	48
  1371  0070C2  EC4E  F02C         	call	_char2LCD
  1372                           
  1373                           ;main.c: 140: char2LCD(Cdec + 48);
  1374  0070C6  0100               	movlb	0	; () banked
  1375  0070C8  51B0               	movf	_Cdec& (0+255),w,b
  1376  0070CA  0F30               	addlw	48
  1377  0070CC  EC4E  F02C         	call	_char2LCD
  1378                           
  1379                           ;main.c: 141: char2LCD(Cuni + 48);
  1380  0070D0  0100               	movlb	0	; () banked
  1381  0070D2  51AC               	movf	_Cuni& (0+255),w,b
  1382  0070D4  0F30               	addlw	48
  1383  0070D6  EC4E  F02C         	call	_char2LCD
  1384                           
  1385                           ;main.c: 143: set_CURSOR(0x09);
  1386  0070DA  0E09               	movlw	9
  1387  0070DC  EC6B  F02C         	call	_set_CURSOR
  1388                           
  1389                           ;main.c: 144: msg2LCD("<");
  1390  0070E0  0E7E               	movlw	low STR_2
  1391  0070E2  6E03               	movwf	msg2LCD@datos,c
  1392  0070E4  0E20               	movlw	high STR_2
  1393  0070E6  6E04               	movwf	msg2LCD@datos+1,c
  1394  0070E8  ECAC  F02C         	call	_msg2LCD	;wreg free
  1395                           
  1396                           ;main.c: 145: set_CURSOR(0x40);
  1397  0070EC  0E40               	movlw	64
  1398  0070EE  EC6B  F02C         	call	_set_CURSOR
  1399                           
  1400                           ;main.c: 146: msg2LCD("A $");
  1401  0070F2  0E68               	movlw	low STR_3
  1402  0070F4  6E03               	movwf	msg2LCD@datos,c
  1403  0070F6  0E20               	movlw	high STR_3
  1404  0070F8  6E04               	movwf	msg2LCD@datos+1,c
  1405  0070FA  ECAC  F02C         	call	_msg2LCD	;wreg free
  1406                           
  1407                           ;main.c: 148: Amil = aluminioPrecio() / 1000;
  1408  0070FE  ECC2  F02B         	call	_aluminioPrecio	;wreg free
  1409  007102  C001  F041         	movff	?_aluminioPrecio,___aldiv@dividend
  1410  007106  C002  F042         	movff	?_aluminioPrecio+1,___aldiv@dividend+1
  1411  00710A  C003  F043         	movff	?_aluminioPrecio+2,___aldiv@dividend+2
  1412  00710E  C004  F044         	movff	?_aluminioPrecio+3,___aldiv@dividend+3
  1413  007112  0EE8               	movlw	232
  1414  007114  6E45               	movwf	___aldiv@divisor,c
  1415  007116  0E03               	movlw	3
  1416  007118  6E46               	movwf	___aldiv@divisor+1,c
  1417  00711A  0E00               	movlw	0
  1418  00711C  6E47               	movwf	___aldiv@divisor+2,c
  1419  00711E  0E00               	movlw	0
  1420  007120  6E48               	movwf	___aldiv@divisor+3,c
  1421  007122  EC68  F02E         	call	___aldiv	;wreg free
  1422  007126  C041  F0A8         	movff	?___aldiv,_Amil
  1423  00712A  C042  F0A9         	movff	?___aldiv+1,_Amil+1
  1424  00712E  C043  F0AA         	movff	?___aldiv+2,_Amil+2
  1425  007132  C044  F0AB         	movff	?___aldiv+3,_Amil+3
  1426                           
  1427                           ;main.c: 149: Acen = (aluminioPrecio() % 1000) / 100;
  1428  007136  0EE8               	movlw	232
  1429  007138  6E3B               	movwf	___almod@divisor,c
  1430  00713A  0E03               	movlw	3
  1431  00713C  6E3C               	movwf	___almod@divisor+1,c
  1432  00713E  0E00               	movlw	0
  1433  007140  6E3D               	movwf	___almod@divisor+2,c
  1434  007142  0E00               	movlw	0
  1435  007144  6E3E               	movwf	___almod@divisor+3,c
  1436  007146  ECC2  F02B         	call	_aluminioPrecio	;wreg free
  1437  00714A  C001  F037         	movff	?_aluminioPrecio,___almod@dividend
  1438  00714E  C002  F038         	movff	?_aluminioPrecio+1,___almod@dividend+1
  1439  007152  C003  F039         	movff	?_aluminioPrecio+2,___almod@dividend+2
  1440  007156  C004  F03A         	movff	?_aluminioPrecio+3,___almod@dividend+3
  1441  00715A  EC5D  F02D         	call	___almod	;wreg free
  1442  00715E  C037  F041         	movff	?___almod,___aldiv@dividend
  1443  007162  C038  F042         	movff	?___almod+1,___aldiv@dividend+1
  1444  007166  C039  F043         	movff	?___almod+2,___aldiv@dividend+2
  1445  00716A  C03A  F044         	movff	?___almod+3,___aldiv@dividend+3
  1446  00716E  0E64               	movlw	100
  1447  007170  6E45               	movwf	___aldiv@divisor,c
  1448  007172  0E00               	movlw	0
  1449  007174  6E46               	movwf	___aldiv@divisor+1,c
  1450  007176  0E00               	movlw	0
  1451  007178  6E47               	movwf	___aldiv@divisor+2,c
  1452  00717A  0E00               	movlw	0
  1453  00717C  6E48               	movwf	___aldiv@divisor+3,c
  1454  00717E  EC68  F02E         	call	___aldiv	;wreg free
  1455  007182  C041  F0A4         	movff	?___aldiv,_Acen
  1456  007186  C042  F0A5         	movff	?___aldiv+1,_Acen+1
  1457  00718A  C043  F0A6         	movff	?___aldiv+2,_Acen+2
  1458  00718E  C044  F0A7         	movff	?___aldiv+3,_Acen+3
  1459                           
  1460                           ;main.c: 150: Adec = ((aluminioPrecio() % 1000) % 100) / 10;
  1461  007192  0EE8               	movlw	232
  1462  007194  6E3B               	movwf	___almod@divisor,c
  1463  007196  0E03               	movlw	3
  1464  007198  6E3C               	movwf	___almod@divisor+1,c
  1465  00719A  0E00               	movlw	0
  1466  00719C  6E3D               	movwf	___almod@divisor+2,c
  1467  00719E  0E00               	movlw	0
  1468  0071A0  6E3E               	movwf	___almod@divisor+3,c
  1469  0071A2  ECC2  F02B         	call	_aluminioPrecio	;wreg free
  1470  0071A6  C001  F037         	movff	?_aluminioPrecio,___almod@dividend
  1471  0071AA  C002  F038         	movff	?_aluminioPrecio+1,___almod@dividend+1
  1472  0071AE  C003  F039         	movff	?_aluminioPrecio+2,___almod@dividend+2
  1473  0071B2  C004  F03A         	movff	?_aluminioPrecio+3,___almod@dividend+3
  1474  0071B6  EC5D  F02D         	call	___almod	;wreg free
  1475  0071BA  C037  F0FC         	movff	?___almod,_mefMenu$2614
  1476  0071BE  C038  F0FD         	movff	?___almod+1,_mefMenu$2614+1
  1477  0071C2  C039  F0FE         	movff	?___almod+2,_mefMenu$2614+2
  1478  0071C6  C03A  F0FF         	movff	?___almod+3,_mefMenu$2614+3
  1479                           
  1480                           ;main.c: 150: Adec = ((aluminioPrecio() % 1000) % 100) / 10;
  1481  0071CA  0E64               	movlw	100
  1482  0071CC  6E3B               	movwf	___almod@divisor,c
  1483  0071CE  0E00               	movlw	0
  1484  0071D0  6E3C               	movwf	___almod@divisor+1,c
  1485  0071D2  0E00               	movlw	0
  1486  0071D4  6E3D               	movwf	___almod@divisor+2,c
  1487  0071D6  0E00               	movlw	0
  1488  0071D8  6E3E               	movwf	___almod@divisor+3,c
  1489  0071DA  C0FC  F037         	movff	_mefMenu$2614,___almod@dividend
  1490  0071DE  C0FD  F038         	movff	_mefMenu$2614+1,___almod@dividend+1
  1491  0071E2  C0FE  F039         	movff	_mefMenu$2614+2,___almod@dividend+2
  1492  0071E6  C0FF  F03A         	movff	_mefMenu$2614+3,___almod@dividend+3
  1493  0071EA  EC5D  F02D         	call	___almod	;wreg free
  1494  0071EE  C037  F041         	movff	?___almod,___aldiv@dividend
  1495  0071F2  C038  F042         	movff	?___almod+1,___aldiv@dividend+1
  1496  0071F6  C039  F043         	movff	?___almod+2,___aldiv@dividend+2
  1497  0071FA  C03A  F044         	movff	?___almod+3,___aldiv@dividend+3
  1498  0071FE  0E0A               	movlw	10
  1499  007200  6E45               	movwf	___aldiv@divisor,c
  1500  007202  0E00               	movlw	0
  1501  007204  6E46               	movwf	___aldiv@divisor+1,c
  1502  007206  0E00               	movlw	0
  1503  007208  6E47               	movwf	___aldiv@divisor+2,c
  1504  00720A  0E00               	movlw	0
  1505  00720C  6E48               	movwf	___aldiv@divisor+3,c
  1506  00720E  EC68  F02E         	call	___aldiv	;wreg free
  1507  007212  C041  F0A0         	movff	?___aldiv,_Adec
  1508  007216  C042  F0A1         	movff	?___aldiv+1,_Adec+1
  1509  00721A  C043  F0A2         	movff	?___aldiv+2,_Adec+2
  1510  00721E  C044  F0A3         	movff	?___aldiv+3,_Adec+3
  1511                           
  1512                           ;main.c: 151: Auni = ((aluminioPrecio() % 1000) % 100) % 10;
  1513  007222  0EE8               	movlw	232
  1514  007224  6E3B               	movwf	___almod@divisor,c
  1515  007226  0E03               	movlw	3
  1516  007228  6E3C               	movwf	___almod@divisor+1,c
  1517  00722A  0E00               	movlw	0
  1518  00722C  6E3D               	movwf	___almod@divisor+2,c
  1519  00722E  0E00               	movlw	0
  1520  007230  6E3E               	movwf	___almod@divisor+3,c
  1521  007232  ECC2  F02B         	call	_aluminioPrecio	;wreg free
  1522  007236  C001  F037         	movff	?_aluminioPrecio,___almod@dividend
  1523  00723A  C002  F038         	movff	?_aluminioPrecio+1,___almod@dividend+1
  1524  00723E  C003  F039         	movff	?_aluminioPrecio+2,___almod@dividend+2
  1525  007242  C004  F03A         	movff	?_aluminioPrecio+3,___almod@dividend+3
  1526  007246  EC5D  F02D         	call	___almod	;wreg free
  1527  00724A  C037  F0FC         	movff	?___almod,_mefMenu$2614
  1528  00724E  C038  F0FD         	movff	?___almod+1,_mefMenu$2614+1
  1529  007252  C039  F0FE         	movff	?___almod+2,_mefMenu$2614+2
  1530  007256  C03A  F0FF         	movff	?___almod+3,_mefMenu$2614+3
  1531                           
  1532                           ;main.c: 151: Auni = ((aluminioPrecio() % 1000) % 100) % 10;
  1533  00725A  0E64               	movlw	100
  1534  00725C  6E3B               	movwf	___almod@divisor,c
  1535  00725E  0E00               	movlw	0
  1536  007260  6E3C               	movwf	___almod@divisor+1,c
  1537  007262  0E00               	movlw	0
  1538  007264  6E3D               	movwf	___almod@divisor+2,c
  1539  007266  0E00               	movlw	0
  1540  007268  6E3E               	movwf	___almod@divisor+3,c
  1541  00726A  C0FC  F037         	movff	_mefMenu$2614,___almod@dividend
  1542  00726E  C0FD  F038         	movff	_mefMenu$2614+1,___almod@dividend+1
  1543  007272  C0FE  F039         	movff	_mefMenu$2614+2,___almod@dividend+2
  1544  007276  C0FF  F03A         	movff	_mefMenu$2614+3,___almod@dividend+3
  1545  00727A  EC5D  F02D         	call	___almod	;wreg free
  1546  00727E  C037  F0F8         	movff	?___almod,_mefMenu$2615
  1547  007282  C038  F0F9         	movff	?___almod+1,_mefMenu$2615+1
  1548  007286  C039  F0FA         	movff	?___almod+2,_mefMenu$2615+2
  1549  00728A  C03A  F0FB         	movff	?___almod+3,_mefMenu$2615+3
  1550                           
  1551                           ;main.c: 151: Auni = ((aluminioPrecio() % 1000) % 100) % 10;
  1552  00728E  C0F8  F037         	movff	_mefMenu$2615,___almod@dividend
  1553  007292  C0F9  F038         	movff	_mefMenu$2615+1,___almod@dividend+1
  1554  007296  C0FA  F039         	movff	_mefMenu$2615+2,___almod@dividend+2
  1555  00729A  C0FB  F03A         	movff	_mefMenu$2615+3,___almod@dividend+3
  1556  00729E  0E0A               	movlw	10
  1557  0072A0  6E3B               	movwf	___almod@divisor,c
  1558  0072A2  0E00               	movlw	0
  1559  0072A4  6E3C               	movwf	___almod@divisor+1,c
  1560  0072A6  0E00               	movlw	0
  1561  0072A8  6E3D               	movwf	___almod@divisor+2,c
  1562  0072AA  0E00               	movlw	0
  1563  0072AC  6E3E               	movwf	___almod@divisor+3,c
  1564  0072AE  EC5D  F02D         	call	___almod	;wreg free
  1565  0072B2  C037  F09C         	movff	?___almod,_Auni
  1566  0072B6  C038  F09D         	movff	?___almod+1,_Auni+1
  1567  0072BA  C039  F09E         	movff	?___almod+2,_Auni+2
  1568  0072BE  C03A  F09F         	movff	?___almod+3,_Auni+3
  1569                           
  1570                           ;main.c: 153: char2LCD(Amil + 48);
  1571  0072C2  0100               	movlb	0	; () banked
  1572  0072C4  51A8               	movf	_Amil& (0+255),w,b
  1573  0072C6  0F30               	addlw	48
  1574  0072C8  EC4E  F02C         	call	_char2LCD
  1575                           
  1576                           ;main.c: 154: char2LCD(Acen + 48);
  1577  0072CC  0100               	movlb	0	; () banked
  1578  0072CE  51A4               	movf	_Acen& (0+255),w,b
  1579  0072D0  0F30               	addlw	48
  1580  0072D2  EC4E  F02C         	call	_char2LCD
  1581                           
  1582                           ;main.c: 155: char2LCD(Adec + 48);
  1583  0072D6  0100               	movlb	0	; () banked
  1584  0072D8  51A0               	movf	_Adec& (0+255),w,b
  1585  0072DA  0F30               	addlw	48
  1586  0072DC  EC4E  F02C         	call	_char2LCD
  1587                           
  1588                           ;main.c: 156: char2LCD(Auni + 48);
  1589  0072E0  0100               	movlb	0	; () banked
  1590  0072E2  519C               	movf	_Auni& (0+255),w,b
  1591  0072E4  0F30               	addlw	48
  1592  0072E6  EC4E  F02C         	call	_char2LCD
  1593                           
  1594                           ;main.c: 158: if(tecla()==2){
  1595  0072EA  EC6E  F02F         	call	_tecla	;wreg free
  1596  0072EE  0A02               	xorlw	2
  1597  0072F0  A4D8               	btfss	status,2,c
  1598  0072F2  0012               	return	
  1599                           
  1600                           ;main.c: 159: casosMenu = 1;
  1601  0072F4  0E01               	movlw	1
  1602  0072F6  0100               	movlb	0	; () banked
  1603  0072F8  6F68               	movwf	_casosMenu& (0+255),b
  1604  0072FA  0E00               	movlw	0
  1605  0072FC  6F69               	movwf	(_casosMenu+1)& (0+255),b
  1606  0072FE  0E00               	movlw	0
  1607  007300  6F6A               	movwf	(_casosMenu+2)& (0+255),b
  1608  007302  0E00               	movlw	0
  1609  007304  6F6B               	movwf	(_casosMenu+3)& (0+255),b
  1610                           
  1611                           ; BSR set to: 0
  1612                           ;main.c: 160: clear_LCD();
  1613  007306  EC32  F02C         	call	_clear_LCD	;wreg free
  1614  00730A  0012               	return	
  1615  00730C                     l4809:
  1616                           
  1617                           ; BSR set to: 0
  1618                           ;main.c: 173: {;main.c: 174: set_CURSOR(0x00);
  1619  00730C  0E00               	movlw	0
  1620  00730E  EC6B  F02C         	call	_set_CURSOR
  1621                           
  1622                           ;main.c: 175: msg2LCD("C $");
  1623  007312  0E70               	movlw	low STR_1
  1624  007314  6E03               	movwf	msg2LCD@datos,c
  1625  007316  0E20               	movlw	high STR_1
  1626  007318  6E04               	movwf	msg2LCD@datos+1,c
  1627  00731A  ECAC  F02C         	call	_msg2LCD	;wreg free
  1628                           
  1629                           ;main.c: 177: Cmil = cobrePrecio() / 1000;
  1630  00731E  ECE6  F02B         	call	_cobrePrecio	;wreg free
  1631  007322  C001  F041         	movff	?_cobrePrecio,___aldiv@dividend
  1632  007326  C002  F042         	movff	?_cobrePrecio+1,___aldiv@dividend+1
  1633  00732A  C003  F043         	movff	?_cobrePrecio+2,___aldiv@dividend+2
  1634  00732E  C004  F044         	movff	?_cobrePrecio+3,___aldiv@dividend+3
  1635  007332  0EE8               	movlw	232
  1636  007334  6E45               	movwf	___aldiv@divisor,c
  1637  007336  0E03               	movlw	3
  1638  007338  6E46               	movwf	___aldiv@divisor+1,c
  1639  00733A  0E00               	movlw	0
  1640  00733C  6E47               	movwf	___aldiv@divisor+2,c
  1641  00733E  0E00               	movlw	0
  1642  007340  6E48               	movwf	___aldiv@divisor+3,c
  1643  007342  EC68  F02E         	call	___aldiv	;wreg free
  1644  007346  C041  F0B8         	movff	?___aldiv,_Cmil
  1645  00734A  C042  F0B9         	movff	?___aldiv+1,_Cmil+1
  1646  00734E  C043  F0BA         	movff	?___aldiv+2,_Cmil+2
  1647  007352  C044  F0BB         	movff	?___aldiv+3,_Cmil+3
  1648                           
  1649                           ;main.c: 178: Ccen = (cobrePrecio() % 1000) / 100;
  1650  007356  0EE8               	movlw	232
  1651  007358  6E3B               	movwf	___almod@divisor,c
  1652  00735A  0E03               	movlw	3
  1653  00735C  6E3C               	movwf	___almod@divisor+1,c
  1654  00735E  0E00               	movlw	0
  1655  007360  6E3D               	movwf	___almod@divisor+2,c
  1656  007362  0E00               	movlw	0
  1657  007364  6E3E               	movwf	___almod@divisor+3,c
  1658  007366  ECE6  F02B         	call	_cobrePrecio	;wreg free
  1659  00736A  C001  F037         	movff	?_cobrePrecio,___almod@dividend
  1660  00736E  C002  F038         	movff	?_cobrePrecio+1,___almod@dividend+1
  1661  007372  C003  F039         	movff	?_cobrePrecio+2,___almod@dividend+2
  1662  007376  C004  F03A         	movff	?_cobrePrecio+3,___almod@dividend+3
  1663  00737A  EC5D  F02D         	call	___almod	;wreg free
  1664  00737E  C037  F041         	movff	?___almod,___aldiv@dividend
  1665  007382  C038  F042         	movff	?___almod+1,___aldiv@dividend+1
  1666  007386  C039  F043         	movff	?___almod+2,___aldiv@dividend+2
  1667  00738A  C03A  F044         	movff	?___almod+3,___aldiv@dividend+3
  1668  00738E  0E64               	movlw	100
  1669  007390  6E45               	movwf	___aldiv@divisor,c
  1670  007392  0E00               	movlw	0
  1671  007394  6E46               	movwf	___aldiv@divisor+1,c
  1672  007396  0E00               	movlw	0
  1673  007398  6E47               	movwf	___aldiv@divisor+2,c
  1674  00739A  0E00               	movlw	0
  1675  00739C  6E48               	movwf	___aldiv@divisor+3,c
  1676  00739E  EC68  F02E         	call	___aldiv	;wreg free
  1677  0073A2  C041  F0B4         	movff	?___aldiv,_Ccen
  1678  0073A6  C042  F0B5         	movff	?___aldiv+1,_Ccen+1
  1679  0073AA  C043  F0B6         	movff	?___aldiv+2,_Ccen+2
  1680  0073AE  C044  F0B7         	movff	?___aldiv+3,_Ccen+3
  1681                           
  1682                           ;main.c: 179: Cdec = ((cobrePrecio() % 1000) % 100) / 10;
  1683  0073B2  0EE8               	movlw	232
  1684  0073B4  6E3B               	movwf	___almod@divisor,c
  1685  0073B6  0E03               	movlw	3
  1686  0073B8  6E3C               	movwf	___almod@divisor+1,c
  1687  0073BA  0E00               	movlw	0
  1688  0073BC  6E3D               	movwf	___almod@divisor+2,c
  1689  0073BE  0E00               	movlw	0
  1690  0073C0  6E3E               	movwf	___almod@divisor+3,c
  1691  0073C2  ECE6  F02B         	call	_cobrePrecio	;wreg free
  1692  0073C6  C001  F037         	movff	?_cobrePrecio,___almod@dividend
  1693  0073CA  C002  F038         	movff	?_cobrePrecio+1,___almod@dividend+1
  1694  0073CE  C003  F039         	movff	?_cobrePrecio+2,___almod@dividend+2
  1695  0073D2  C004  F03A         	movff	?_cobrePrecio+3,___almod@dividend+3
  1696  0073D6  EC5D  F02D         	call	___almod	;wreg free
  1697  0073DA  C037  F0FC         	movff	?___almod,_mefMenu$2614
  1698  0073DE  C038  F0FD         	movff	?___almod+1,_mefMenu$2614+1
  1699  0073E2  C039  F0FE         	movff	?___almod+2,_mefMenu$2614+2
  1700  0073E6  C03A  F0FF         	movff	?___almod+3,_mefMenu$2614+3
  1701                           
  1702                           ;main.c: 179: Cdec = ((cobrePrecio() % 1000) % 100) / 10;
  1703  0073EA  0E64               	movlw	100
  1704  0073EC  6E3B               	movwf	___almod@divisor,c
  1705  0073EE  0E00               	movlw	0
  1706  0073F0  6E3C               	movwf	___almod@divisor+1,c
  1707  0073F2  0E00               	movlw	0
  1708  0073F4  6E3D               	movwf	___almod@divisor+2,c
  1709  0073F6  0E00               	movlw	0
  1710  0073F8  6E3E               	movwf	___almod@divisor+3,c
  1711  0073FA  C0FC  F037         	movff	_mefMenu$2614,___almod@dividend
  1712  0073FE  C0FD  F038         	movff	_mefMenu$2614+1,___almod@dividend+1
  1713  007402  C0FE  F039         	movff	_mefMenu$2614+2,___almod@dividend+2
  1714  007406  C0FF  F03A         	movff	_mefMenu$2614+3,___almod@dividend+3
  1715  00740A  EC5D  F02D         	call	___almod	;wreg free
  1716  00740E  C037  F041         	movff	?___almod,___aldiv@dividend
  1717  007412  C038  F042         	movff	?___almod+1,___aldiv@dividend+1
  1718  007416  C039  F043         	movff	?___almod+2,___aldiv@dividend+2
  1719  00741A  C03A  F044         	movff	?___almod+3,___aldiv@dividend+3
  1720  00741E  0E0A               	movlw	10
  1721  007420  6E45               	movwf	___aldiv@divisor,c
  1722  007422  0E00               	movlw	0
  1723  007424  6E46               	movwf	___aldiv@divisor+1,c
  1724  007426  0E00               	movlw	0
  1725  007428  6E47               	movwf	___aldiv@divisor+2,c
  1726  00742A  0E00               	movlw	0
  1727  00742C  6E48               	movwf	___aldiv@divisor+3,c
  1728  00742E  EC68  F02E         	call	___aldiv	;wreg free
  1729  007432  C041  F0B0         	movff	?___aldiv,_Cdec
  1730  007436  C042  F0B1         	movff	?___aldiv+1,_Cdec+1
  1731  00743A  C043  F0B2         	movff	?___aldiv+2,_Cdec+2
  1732  00743E  C044  F0B3         	movff	?___aldiv+3,_Cdec+3
  1733                           
  1734                           ;main.c: 180: Cuni = ((cobrePrecio() % 1000) % 100) % 10;
  1735  007442  0EE8               	movlw	232
  1736  007444  6E3B               	movwf	___almod@divisor,c
  1737  007446  0E03               	movlw	3
  1738  007448  6E3C               	movwf	___almod@divisor+1,c
  1739  00744A  0E00               	movlw	0
  1740  00744C  6E3D               	movwf	___almod@divisor+2,c
  1741  00744E  0E00               	movlw	0
  1742  007450  6E3E               	movwf	___almod@divisor+3,c
  1743  007452  ECE6  F02B         	call	_cobrePrecio	;wreg free
  1744  007456  C001  F037         	movff	?_cobrePrecio,___almod@dividend
  1745  00745A  C002  F038         	movff	?_cobrePrecio+1,___almod@dividend+1
  1746  00745E  C003  F039         	movff	?_cobrePrecio+2,___almod@dividend+2
  1747  007462  C004  F03A         	movff	?_cobrePrecio+3,___almod@dividend+3
  1748  007466  EC5D  F02D         	call	___almod	;wreg free
  1749  00746A  C037  F0FC         	movff	?___almod,_mefMenu$2614
  1750  00746E  C038  F0FD         	movff	?___almod+1,_mefMenu$2614+1
  1751  007472  C039  F0FE         	movff	?___almod+2,_mefMenu$2614+2
  1752  007476  C03A  F0FF         	movff	?___almod+3,_mefMenu$2614+3
  1753                           
  1754                           ;main.c: 180: Cuni = ((cobrePrecio() % 1000) % 100) % 10;
  1755  00747A  0E64               	movlw	100
  1756  00747C  6E3B               	movwf	___almod@divisor,c
  1757  00747E  0E00               	movlw	0
  1758  007480  6E3C               	movwf	___almod@divisor+1,c
  1759  007482  0E00               	movlw	0
  1760  007484  6E3D               	movwf	___almod@divisor+2,c
  1761  007486  0E00               	movlw	0
  1762  007488  6E3E               	movwf	___almod@divisor+3,c
  1763  00748A  C0FC  F037         	movff	_mefMenu$2614,___almod@dividend
  1764  00748E  C0FD  F038         	movff	_mefMenu$2614+1,___almod@dividend+1
  1765  007492  C0FE  F039         	movff	_mefMenu$2614+2,___almod@dividend+2
  1766  007496  C0FF  F03A         	movff	_mefMenu$2614+3,___almod@dividend+3
  1767  00749A  EC5D  F02D         	call	___almod	;wreg free
  1768  00749E  C037  F0F8         	movff	?___almod,_mefMenu$2615
  1769  0074A2  C038  F0F9         	movff	?___almod+1,_mefMenu$2615+1
  1770  0074A6  C039  F0FA         	movff	?___almod+2,_mefMenu$2615+2
  1771  0074AA  C03A  F0FB         	movff	?___almod+3,_mefMenu$2615+3
  1772                           
  1773                           ;main.c: 180: Cuni = ((cobrePrecio() % 1000) % 100) % 10;
  1774  0074AE  C0F8  F037         	movff	_mefMenu$2615,___almod@dividend
  1775  0074B2  C0F9  F038         	movff	_mefMenu$2615+1,___almod@dividend+1
  1776  0074B6  C0FA  F039         	movff	_mefMenu$2615+2,___almod@dividend+2
  1777  0074BA  C0FB  F03A         	movff	_mefMenu$2615+3,___almod@dividend+3
  1778  0074BE  0E0A               	movlw	10
  1779  0074C0  6E3B               	movwf	___almod@divisor,c
  1780  0074C2  0E00               	movlw	0
  1781  0074C4  6E3C               	movwf	___almod@divisor+1,c
  1782  0074C6  0E00               	movlw	0
  1783  0074C8  6E3D               	movwf	___almod@divisor+2,c
  1784  0074CA  0E00               	movlw	0
  1785  0074CC  6E3E               	movwf	___almod@divisor+3,c
  1786  0074CE  EC5D  F02D         	call	___almod	;wreg free
  1787  0074D2  C037  F0AC         	movff	?___almod,_Cuni
  1788  0074D6  C038  F0AD         	movff	?___almod+1,_Cuni+1
  1789  0074DA  C039  F0AE         	movff	?___almod+2,_Cuni+2
  1790  0074DE  C03A  F0AF         	movff	?___almod+3,_Cuni+3
  1791                           
  1792                           ;main.c: 182: char2LCD(Cmil + 48);
  1793  0074E2  0100               	movlb	0	; () banked
  1794  0074E4  51B8               	movf	_Cmil& (0+255),w,b
  1795  0074E6  0F30               	addlw	48
  1796  0074E8  EC4E  F02C         	call	_char2LCD
  1797                           
  1798                           ;main.c: 183: char2LCD(Ccen + 48);
  1799  0074EC  0100               	movlb	0	; () banked
  1800  0074EE  51B4               	movf	_Ccen& (0+255),w,b
  1801  0074F0  0F30               	addlw	48
  1802  0074F2  EC4E  F02C         	call	_char2LCD
  1803                           
  1804                           ;main.c: 184: char2LCD(Cdec + 48);
  1805  0074F6  0100               	movlb	0	; () banked
  1806  0074F8  51B0               	movf	_Cdec& (0+255),w,b
  1807  0074FA  0F30               	addlw	48
  1808  0074FC  EC4E  F02C         	call	_char2LCD
  1809                           
  1810                           ;main.c: 185: char2LCD(Cuni + 48);
  1811  007500  0100               	movlb	0	; () banked
  1812  007502  51AC               	movf	_Cuni& (0+255),w,b
  1813  007504  0F30               	addlw	48
  1814  007506  EC4E  F02C         	call	_char2LCD
  1815                           
  1816                           ;main.c: 187: set_CURSOR(0x40);
  1817  00750A  0E40               	movlw	64
  1818  00750C  EC6B  F02C         	call	_set_CURSOR
  1819                           
  1820                           ;main.c: 188: msg2LCD("A $");
  1821  007510  0E68               	movlw	low STR_3
  1822  007512  6E03               	movwf	msg2LCD@datos,c
  1823  007514  0E20               	movlw	high STR_3
  1824  007516  6E04               	movwf	msg2LCD@datos+1,c
  1825  007518  ECAC  F02C         	call	_msg2LCD	;wreg free
  1826                           
  1827                           ;main.c: 190: Amil = aluminioPrecio() / 1000;
  1828  00751C  ECC2  F02B         	call	_aluminioPrecio	;wreg free
  1829  007520  C001  F041         	movff	?_aluminioPrecio,___aldiv@dividend
  1830  007524  C002  F042         	movff	?_aluminioPrecio+1,___aldiv@dividend+1
  1831  007528  C003  F043         	movff	?_aluminioPrecio+2,___aldiv@dividend+2
  1832  00752C  C004  F044         	movff	?_aluminioPrecio+3,___aldiv@dividend+3
  1833  007530  0EE8               	movlw	232
  1834  007532  6E45               	movwf	___aldiv@divisor,c
  1835  007534  0E03               	movlw	3
  1836  007536  6E46               	movwf	___aldiv@divisor+1,c
  1837  007538  0E00               	movlw	0
  1838  00753A  6E47               	movwf	___aldiv@divisor+2,c
  1839  00753C  0E00               	movlw	0
  1840  00753E  6E48               	movwf	___aldiv@divisor+3,c
  1841  007540  EC68  F02E         	call	___aldiv	;wreg free
  1842  007544  C041  F0A8         	movff	?___aldiv,_Amil
  1843  007548  C042  F0A9         	movff	?___aldiv+1,_Amil+1
  1844  00754C  C043  F0AA         	movff	?___aldiv+2,_Amil+2
  1845  007550  C044  F0AB         	movff	?___aldiv+3,_Amil+3
  1846                           
  1847                           ;main.c: 191: Acen = (aluminioPrecio() % 1000) / 100;
  1848  007554  0EE8               	movlw	232
  1849  007556  6E3B               	movwf	___almod@divisor,c
  1850  007558  0E03               	movlw	3
  1851  00755A  6E3C               	movwf	___almod@divisor+1,c
  1852  00755C  0E00               	movlw	0
  1853  00755E  6E3D               	movwf	___almod@divisor+2,c
  1854  007560  0E00               	movlw	0
  1855  007562  6E3E               	movwf	___almod@divisor+3,c
  1856  007564  ECC2  F02B         	call	_aluminioPrecio	;wreg free
  1857  007568  C001  F037         	movff	?_aluminioPrecio,___almod@dividend
  1858  00756C  C002  F038         	movff	?_aluminioPrecio+1,___almod@dividend+1
  1859  007570  C003  F039         	movff	?_aluminioPrecio+2,___almod@dividend+2
  1860  007574  C004  F03A         	movff	?_aluminioPrecio+3,___almod@dividend+3
  1861  007578  EC5D  F02D         	call	___almod	;wreg free
  1862  00757C  C037  F041         	movff	?___almod,___aldiv@dividend
  1863  007580  C038  F042         	movff	?___almod+1,___aldiv@dividend+1
  1864  007584  C039  F043         	movff	?___almod+2,___aldiv@dividend+2
  1865  007588  C03A  F044         	movff	?___almod+3,___aldiv@dividend+3
  1866  00758C  0E64               	movlw	100
  1867  00758E  6E45               	movwf	___aldiv@divisor,c
  1868  007590  0E00               	movlw	0
  1869  007592  6E46               	movwf	___aldiv@divisor+1,c
  1870  007594  0E00               	movlw	0
  1871  007596  6E47               	movwf	___aldiv@divisor+2,c
  1872  007598  0E00               	movlw	0
  1873  00759A  6E48               	movwf	___aldiv@divisor+3,c
  1874  00759C  EC68  F02E         	call	___aldiv	;wreg free
  1875  0075A0  C041  F0A4         	movff	?___aldiv,_Acen
  1876  0075A4  C042  F0A5         	movff	?___aldiv+1,_Acen+1
  1877  0075A8  C043  F0A6         	movff	?___aldiv+2,_Acen+2
  1878  0075AC  C044  F0A7         	movff	?___aldiv+3,_Acen+3
  1879                           
  1880                           ;main.c: 192: Adec = ((aluminioPrecio() % 1000) % 100) / 10;
  1881  0075B0  0EE8               	movlw	232
  1882  0075B2  6E3B               	movwf	___almod@divisor,c
  1883  0075B4  0E03               	movlw	3
  1884  0075B6  6E3C               	movwf	___almod@divisor+1,c
  1885  0075B8  0E00               	movlw	0
  1886  0075BA  6E3D               	movwf	___almod@divisor+2,c
  1887  0075BC  0E00               	movlw	0
  1888  0075BE  6E3E               	movwf	___almod@divisor+3,c
  1889  0075C0  ECC2  F02B         	call	_aluminioPrecio	;wreg free
  1890  0075C4  C001  F037         	movff	?_aluminioPrecio,___almod@dividend
  1891  0075C8  C002  F038         	movff	?_aluminioPrecio+1,___almod@dividend+1
  1892  0075CC  C003  F039         	movff	?_aluminioPrecio+2,___almod@dividend+2
  1893  0075D0  C004  F03A         	movff	?_aluminioPrecio+3,___almod@dividend+3
  1894  0075D4  EC5D  F02D         	call	___almod	;wreg free
  1895  0075D8  C037  F0FC         	movff	?___almod,_mefMenu$2614
  1896  0075DC  C038  F0FD         	movff	?___almod+1,_mefMenu$2614+1
  1897  0075E0  C039  F0FE         	movff	?___almod+2,_mefMenu$2614+2
  1898  0075E4  C03A  F0FF         	movff	?___almod+3,_mefMenu$2614+3
  1899                           
  1900                           ;main.c: 192: Adec = ((aluminioPrecio() % 1000) % 100) / 10;
  1901  0075E8  0E64               	movlw	100
  1902  0075EA  6E3B               	movwf	___almod@divisor,c
  1903  0075EC  0E00               	movlw	0
  1904  0075EE  6E3C               	movwf	___almod@divisor+1,c
  1905  0075F0  0E00               	movlw	0
  1906  0075F2  6E3D               	movwf	___almod@divisor+2,c
  1907  0075F4  0E00               	movlw	0
  1908  0075F6  6E3E               	movwf	___almod@divisor+3,c
  1909  0075F8  C0FC  F037         	movff	_mefMenu$2614,___almod@dividend
  1910  0075FC  C0FD  F038         	movff	_mefMenu$2614+1,___almod@dividend+1
  1911  007600  C0FE  F039         	movff	_mefMenu$2614+2,___almod@dividend+2
  1912  007604  C0FF  F03A         	movff	_mefMenu$2614+3,___almod@dividend+3
  1913  007608  EC5D  F02D         	call	___almod	;wreg free
  1914  00760C  C037  F041         	movff	?___almod,___aldiv@dividend
  1915  007610  C038  F042         	movff	?___almod+1,___aldiv@dividend+1
  1916  007614  C039  F043         	movff	?___almod+2,___aldiv@dividend+2
  1917  007618  C03A  F044         	movff	?___almod+3,___aldiv@dividend+3
  1918  00761C  0E0A               	movlw	10
  1919  00761E  6E45               	movwf	___aldiv@divisor,c
  1920  007620  0E00               	movlw	0
  1921  007622  6E46               	movwf	___aldiv@divisor+1,c
  1922  007624  0E00               	movlw	0
  1923  007626  6E47               	movwf	___aldiv@divisor+2,c
  1924  007628  0E00               	movlw	0
  1925  00762A  6E48               	movwf	___aldiv@divisor+3,c
  1926  00762C  EC68  F02E         	call	___aldiv	;wreg free
  1927  007630  C041  F0A0         	movff	?___aldiv,_Adec
  1928  007634  C042  F0A1         	movff	?___aldiv+1,_Adec+1
  1929  007638  C043  F0A2         	movff	?___aldiv+2,_Adec+2
  1930  00763C  C044  F0A3         	movff	?___aldiv+3,_Adec+3
  1931                           
  1932                           ;main.c: 193: Auni = ((aluminioPrecio() % 1000) % 100) % 10;
  1933  007640  0EE8               	movlw	232
  1934  007642  6E3B               	movwf	___almod@divisor,c
  1935  007644  0E03               	movlw	3
  1936  007646  6E3C               	movwf	___almod@divisor+1,c
  1937  007648  0E00               	movlw	0
  1938  00764A  6E3D               	movwf	___almod@divisor+2,c
  1939  00764C  0E00               	movlw	0
  1940  00764E  6E3E               	movwf	___almod@divisor+3,c
  1941  007650  ECC2  F02B         	call	_aluminioPrecio	;wreg free
  1942  007654  C001  F037         	movff	?_aluminioPrecio,___almod@dividend
  1943  007658  C002  F038         	movff	?_aluminioPrecio+1,___almod@dividend+1
  1944  00765C  C003  F039         	movff	?_aluminioPrecio+2,___almod@dividend+2
  1945  007660  C004  F03A         	movff	?_aluminioPrecio+3,___almod@dividend+3
  1946  007664  EC5D  F02D         	call	___almod	;wreg free
  1947  007668  C037  F0FC         	movff	?___almod,_mefMenu$2614
  1948  00766C  C038  F0FD         	movff	?___almod+1,_mefMenu$2614+1
  1949  007670  C039  F0FE         	movff	?___almod+2,_mefMenu$2614+2
  1950  007674  C03A  F0FF         	movff	?___almod+3,_mefMenu$2614+3
  1951                           
  1952                           ;main.c: 193: Auni = ((aluminioPrecio() % 1000) % 100) % 10;
  1953  007678  0E64               	movlw	100
  1954  00767A  6E3B               	movwf	___almod@divisor,c
  1955  00767C  0E00               	movlw	0
  1956  00767E  6E3C               	movwf	___almod@divisor+1,c
  1957  007680  0E00               	movlw	0
  1958  007682  6E3D               	movwf	___almod@divisor+2,c
  1959  007684  0E00               	movlw	0
  1960  007686  6E3E               	movwf	___almod@divisor+3,c
  1961  007688  C0FC  F037         	movff	_mefMenu$2614,___almod@dividend
  1962  00768C  C0FD  F038         	movff	_mefMenu$2614+1,___almod@dividend+1
  1963  007690  C0FE  F039         	movff	_mefMenu$2614+2,___almod@dividend+2
  1964  007694  C0FF  F03A         	movff	_mefMenu$2614+3,___almod@dividend+3
  1965  007698  EC5D  F02D         	call	___almod	;wreg free
  1966  00769C  C037  F0F8         	movff	?___almod,_mefMenu$2615
  1967  0076A0  C038  F0F9         	movff	?___almod+1,_mefMenu$2615+1
  1968  0076A4  C039  F0FA         	movff	?___almod+2,_mefMenu$2615+2
  1969  0076A8  C03A  F0FB         	movff	?___almod+3,_mefMenu$2615+3
  1970                           
  1971                           ;main.c: 193: Auni = ((aluminioPrecio() % 1000) % 100) % 10;
  1972  0076AC  C0F8  F037         	movff	_mefMenu$2615,___almod@dividend
  1973  0076B0  C0F9  F038         	movff	_mefMenu$2615+1,___almod@dividend+1
  1974  0076B4  C0FA  F039         	movff	_mefMenu$2615+2,___almod@dividend+2
  1975  0076B8  C0FB  F03A         	movff	_mefMenu$2615+3,___almod@dividend+3
  1976  0076BC  0E0A               	movlw	10
  1977  0076BE  6E3B               	movwf	___almod@divisor,c
  1978  0076C0  0E00               	movlw	0
  1979  0076C2  6E3C               	movwf	___almod@divisor+1,c
  1980  0076C4  0E00               	movlw	0
  1981  0076C6  6E3D               	movwf	___almod@divisor+2,c
  1982  0076C8  0E00               	movlw	0
  1983  0076CA  6E3E               	movwf	___almod@divisor+3,c
  1984  0076CC  EC5D  F02D         	call	___almod	;wreg free
  1985  0076D0  C037  F09C         	movff	?___almod,_Auni
  1986  0076D4  C038  F09D         	movff	?___almod+1,_Auni+1
  1987  0076D8  C039  F09E         	movff	?___almod+2,_Auni+2
  1988  0076DC  C03A  F09F         	movff	?___almod+3,_Auni+3
  1989                           
  1990                           ;main.c: 195: char2LCD(Amil + 48);
  1991  0076E0  0100               	movlb	0	; () banked
  1992  0076E2  51A8               	movf	_Amil& (0+255),w,b
  1993  0076E4  0F30               	addlw	48
  1994  0076E6  EC4E  F02C         	call	_char2LCD
  1995                           
  1996                           ;main.c: 196: char2LCD(Acen + 48);
  1997  0076EA  0100               	movlb	0	; () banked
  1998  0076EC  51A4               	movf	_Acen& (0+255),w,b
  1999  0076EE  0F30               	addlw	48
  2000  0076F0  EC4E  F02C         	call	_char2LCD
  2001                           
  2002                           ;main.c: 197: char2LCD(Adec + 48);
  2003  0076F4  0100               	movlb	0	; () banked
  2004  0076F6  51A0               	movf	_Adec& (0+255),w,b
  2005  0076F8  0F30               	addlw	48
  2006  0076FA  EC4E  F02C         	call	_char2LCD
  2007                           
  2008                           ;main.c: 198: char2LCD(Auni + 48);
  2009  0076FE  0100               	movlb	0	; () banked
  2010  007700  519C               	movf	_Auni& (0+255),w,b
  2011  007702  0F30               	addlw	48
  2012  007704  EC4E  F02C         	call	_char2LCD
  2013                           
  2014                           ;main.c: 200: set_CURSOR(0x49);
  2015  007708  0E49               	movlw	73
  2016  00770A  EC6B  F02C         	call	_set_CURSOR
  2017                           
  2018                           ;main.c: 201: msg2LCD("<");
  2019  00770E  0E7E               	movlw	low STR_2
  2020  007710  6E03               	movwf	msg2LCD@datos,c
  2021  007712  0E20               	movlw	high STR_2
  2022  007714  6E04               	movwf	msg2LCD@datos+1,c
  2023  007716  ECAC  F02C         	call	_msg2LCD	;wreg free
  2024                           
  2025                           ;main.c: 202: if(tecla()==2){
  2026  00771A  EC6E  F02F         	call	_tecla	;wreg free
  2027  00771E  0A02               	xorlw	2
  2028  007720  A4D8               	btfss	status,2,c
  2029  007722  0012               	return	
  2030                           
  2031                           ;main.c: 203: clear_LCD();
  2032  007724  EC32  F02C         	call	_clear_LCD	;wreg free
  2033                           
  2034                           ;main.c: 204: casosMenu = 2;
  2035  007728  0E02               	movlw	2
  2036  00772A  0100               	movlb	0	; () banked
  2037  00772C  6F68               	movwf	_casosMenu& (0+255),b
  2038  00772E  0E00               	movlw	0
  2039  007730  6F69               	movwf	(_casosMenu+1)& (0+255),b
  2040  007732  0E00               	movlw	0
  2041  007734  6F6A               	movwf	(_casosMenu+2)& (0+255),b
  2042  007736  0E00               	movlw	0
  2043  007738  6F6B               	movwf	(_casosMenu+3)& (0+255),b
  2044  00773A  0012               	return	
  2045  00773C                     l4847:
  2046                           
  2047                           ; BSR set to: 0
  2048                           ;main.c: 215: {;main.c: 216: set_CURSOR(0x00);
  2049  00773C  0E00               	movlw	0
  2050  00773E  EC6B  F02C         	call	_set_CURSOR
  2051                           
  2052                           ;main.c: 217: msg2LCD("A $");
  2053  007742  0E68               	movlw	low STR_3
  2054  007744  6E03               	movwf	msg2LCD@datos,c
  2055  007746  0E20               	movlw	high STR_3
  2056  007748  6E04               	movwf	msg2LCD@datos+1,c
  2057  00774A  ECAC  F02C         	call	_msg2LCD	;wreg free
  2058                           
  2059                           ;main.c: 219: Amil = aluminioPrecio() / 1000;
  2060  00774E  ECC2  F02B         	call	_aluminioPrecio	;wreg free
  2061  007752  C001  F041         	movff	?_aluminioPrecio,___aldiv@dividend
  2062  007756  C002  F042         	movff	?_aluminioPrecio+1,___aldiv@dividend+1
  2063  00775A  C003  F043         	movff	?_aluminioPrecio+2,___aldiv@dividend+2
  2064  00775E  C004  F044         	movff	?_aluminioPrecio+3,___aldiv@dividend+3
  2065  007762  0EE8               	movlw	232
  2066  007764  6E45               	movwf	___aldiv@divisor,c
  2067  007766  0E03               	movlw	3
  2068  007768  6E46               	movwf	___aldiv@divisor+1,c
  2069  00776A  0E00               	movlw	0
  2070  00776C  6E47               	movwf	___aldiv@divisor+2,c
  2071  00776E  0E00               	movlw	0
  2072  007770  6E48               	movwf	___aldiv@divisor+3,c
  2073  007772  EC68  F02E         	call	___aldiv	;wreg free
  2074  007776  C041  F0A8         	movff	?___aldiv,_Amil
  2075  00777A  C042  F0A9         	movff	?___aldiv+1,_Amil+1
  2076  00777E  C043  F0AA         	movff	?___aldiv+2,_Amil+2
  2077  007782  C044  F0AB         	movff	?___aldiv+3,_Amil+3
  2078                           
  2079                           ;main.c: 220: Acen = (aluminioPrecio() % 1000) / 100;
  2080  007786  0EE8               	movlw	232
  2081  007788  6E3B               	movwf	___almod@divisor,c
  2082  00778A  0E03               	movlw	3
  2083  00778C  6E3C               	movwf	___almod@divisor+1,c
  2084  00778E  0E00               	movlw	0
  2085  007790  6E3D               	movwf	___almod@divisor+2,c
  2086  007792  0E00               	movlw	0
  2087  007794  6E3E               	movwf	___almod@divisor+3,c
  2088  007796  ECC2  F02B         	call	_aluminioPrecio	;wreg free
  2089  00779A  C001  F037         	movff	?_aluminioPrecio,___almod@dividend
  2090  00779E  C002  F038         	movff	?_aluminioPrecio+1,___almod@dividend+1
  2091  0077A2  C003  F039         	movff	?_aluminioPrecio+2,___almod@dividend+2
  2092  0077A6  C004  F03A         	movff	?_aluminioPrecio+3,___almod@dividend+3
  2093  0077AA  EC5D  F02D         	call	___almod	;wreg free
  2094  0077AE  C037  F041         	movff	?___almod,___aldiv@dividend
  2095  0077B2  C038  F042         	movff	?___almod+1,___aldiv@dividend+1
  2096  0077B6  C039  F043         	movff	?___almod+2,___aldiv@dividend+2
  2097  0077BA  C03A  F044         	movff	?___almod+3,___aldiv@dividend+3
  2098  0077BE  0E64               	movlw	100
  2099  0077C0  6E45               	movwf	___aldiv@divisor,c
  2100  0077C2  0E00               	movlw	0
  2101  0077C4  6E46               	movwf	___aldiv@divisor+1,c
  2102  0077C6  0E00               	movlw	0
  2103  0077C8  6E47               	movwf	___aldiv@divisor+2,c
  2104  0077CA  0E00               	movlw	0
  2105  0077CC  6E48               	movwf	___aldiv@divisor+3,c
  2106  0077CE  EC68  F02E         	call	___aldiv	;wreg free
  2107  0077D2  C041  F0A4         	movff	?___aldiv,_Acen
  2108  0077D6  C042  F0A5         	movff	?___aldiv+1,_Acen+1
  2109  0077DA  C043  F0A6         	movff	?___aldiv+2,_Acen+2
  2110  0077DE  C044  F0A7         	movff	?___aldiv+3,_Acen+3
  2111                           
  2112                           ;main.c: 221: Adec = ((aluminioPrecio() % 1000) % 100) / 10;
  2113  0077E2  0EE8               	movlw	232
  2114  0077E4  6E3B               	movwf	___almod@divisor,c
  2115  0077E6  0E03               	movlw	3
  2116  0077E8  6E3C               	movwf	___almod@divisor+1,c
  2117  0077EA  0E00               	movlw	0
  2118  0077EC  6E3D               	movwf	___almod@divisor+2,c
  2119  0077EE  0E00               	movlw	0
  2120  0077F0  6E3E               	movwf	___almod@divisor+3,c
  2121  0077F2  ECC2  F02B         	call	_aluminioPrecio	;wreg free
  2122  0077F6  C001  F037         	movff	?_aluminioPrecio,___almod@dividend
  2123  0077FA  C002  F038         	movff	?_aluminioPrecio+1,___almod@dividend+1
  2124  0077FE  C003  F039         	movff	?_aluminioPrecio+2,___almod@dividend+2
  2125  007802  C004  F03A         	movff	?_aluminioPrecio+3,___almod@dividend+3
  2126  007806  EC5D  F02D         	call	___almod	;wreg free
  2127  00780A  C037  F0FC         	movff	?___almod,_mefMenu$2614
  2128  00780E  C038  F0FD         	movff	?___almod+1,_mefMenu$2614+1
  2129  007812  C039  F0FE         	movff	?___almod+2,_mefMenu$2614+2
  2130  007816  C03A  F0FF         	movff	?___almod+3,_mefMenu$2614+3
  2131                           
  2132                           ;main.c: 221: Adec = ((aluminioPrecio() % 1000) % 100) / 10;
  2133  00781A  0E64               	movlw	100
  2134  00781C  6E3B               	movwf	___almod@divisor,c
  2135  00781E  0E00               	movlw	0
  2136  007820  6E3C               	movwf	___almod@divisor+1,c
  2137  007822  0E00               	movlw	0
  2138  007824  6E3D               	movwf	___almod@divisor+2,c
  2139  007826  0E00               	movlw	0
  2140  007828  6E3E               	movwf	___almod@divisor+3,c
  2141  00782A  C0FC  F037         	movff	_mefMenu$2614,___almod@dividend
  2142  00782E  C0FD  F038         	movff	_mefMenu$2614+1,___almod@dividend+1
  2143  007832  C0FE  F039         	movff	_mefMenu$2614+2,___almod@dividend+2
  2144  007836  C0FF  F03A         	movff	_mefMenu$2614+3,___almod@dividend+3
  2145  00783A  EC5D  F02D         	call	___almod	;wreg free
  2146  00783E  C037  F041         	movff	?___almod,___aldiv@dividend
  2147  007842  C038  F042         	movff	?___almod+1,___aldiv@dividend+1
  2148  007846  C039  F043         	movff	?___almod+2,___aldiv@dividend+2
  2149  00784A  C03A  F044         	movff	?___almod+3,___aldiv@dividend+3
  2150  00784E  0E0A               	movlw	10
  2151  007850  6E45               	movwf	___aldiv@divisor,c
  2152  007852  0E00               	movlw	0
  2153  007854  6E46               	movwf	___aldiv@divisor+1,c
  2154  007856  0E00               	movlw	0
  2155  007858  6E47               	movwf	___aldiv@divisor+2,c
  2156  00785A  0E00               	movlw	0
  2157  00785C  6E48               	movwf	___aldiv@divisor+3,c
  2158  00785E  EC68  F02E         	call	___aldiv	;wreg free
  2159  007862  C041  F0A0         	movff	?___aldiv,_Adec
  2160  007866  C042  F0A1         	movff	?___aldiv+1,_Adec+1
  2161  00786A  C043  F0A2         	movff	?___aldiv+2,_Adec+2
  2162  00786E  C044  F0A3         	movff	?___aldiv+3,_Adec+3
  2163                           
  2164                           ;main.c: 222: Auni = ((aluminioPrecio() % 1000) % 100) % 10;
  2165  007872  0EE8               	movlw	232
  2166  007874  6E3B               	movwf	___almod@divisor,c
  2167  007876  0E03               	movlw	3
  2168  007878  6E3C               	movwf	___almod@divisor+1,c
  2169  00787A  0E00               	movlw	0
  2170  00787C  6E3D               	movwf	___almod@divisor+2,c
  2171  00787E  0E00               	movlw	0
  2172  007880  6E3E               	movwf	___almod@divisor+3,c
  2173  007882  ECC2  F02B         	call	_aluminioPrecio	;wreg free
  2174  007886  C001  F037         	movff	?_aluminioPrecio,___almod@dividend
  2175  00788A  C002  F038         	movff	?_aluminioPrecio+1,___almod@dividend+1
  2176  00788E  C003  F039         	movff	?_aluminioPrecio+2,___almod@dividend+2
  2177  007892  C004  F03A         	movff	?_aluminioPrecio+3,___almod@dividend+3
  2178  007896  EC5D  F02D         	call	___almod	;wreg free
  2179  00789A  C037  F0FC         	movff	?___almod,_mefMenu$2614
  2180  00789E  C038  F0FD         	movff	?___almod+1,_mefMenu$2614+1
  2181  0078A2  C039  F0FE         	movff	?___almod+2,_mefMenu$2614+2
  2182  0078A6  C03A  F0FF         	movff	?___almod+3,_mefMenu$2614+3
  2183                           
  2184                           ;main.c: 222: Auni = ((aluminioPrecio() % 1000) % 100) % 10;
  2185  0078AA  0E64               	movlw	100
  2186  0078AC  6E3B               	movwf	___almod@divisor,c
  2187  0078AE  0E00               	movlw	0
  2188  0078B0  6E3C               	movwf	___almod@divisor+1,c
  2189  0078B2  0E00               	movlw	0
  2190  0078B4  6E3D               	movwf	___almod@divisor+2,c
  2191  0078B6  0E00               	movlw	0
  2192  0078B8  6E3E               	movwf	___almod@divisor+3,c
  2193  0078BA  C0FC  F037         	movff	_mefMenu$2614,___almod@dividend
  2194  0078BE  C0FD  F038         	movff	_mefMenu$2614+1,___almod@dividend+1
  2195  0078C2  C0FE  F039         	movff	_mefMenu$2614+2,___almod@dividend+2
  2196  0078C6  C0FF  F03A         	movff	_mefMenu$2614+3,___almod@dividend+3
  2197  0078CA  EC5D  F02D         	call	___almod	;wreg free
  2198  0078CE  C037  F0F8         	movff	?___almod,_mefMenu$2615
  2199  0078D2  C038  F0F9         	movff	?___almod+1,_mefMenu$2615+1
  2200  0078D6  C039  F0FA         	movff	?___almod+2,_mefMenu$2615+2
  2201  0078DA  C03A  F0FB         	movff	?___almod+3,_mefMenu$2615+3
  2202                           
  2203                           ;main.c: 222: Auni = ((aluminioPrecio() % 1000) % 100) % 10;
  2204  0078DE  C0F8  F037         	movff	_mefMenu$2615,___almod@dividend
  2205  0078E2  C0F9  F038         	movff	_mefMenu$2615+1,___almod@dividend+1
  2206  0078E6  C0FA  F039         	movff	_mefMenu$2615+2,___almod@dividend+2
  2207  0078EA  C0FB  F03A         	movff	_mefMenu$2615+3,___almod@dividend+3
  2208  0078EE  0E0A               	movlw	10
  2209  0078F0  6E3B               	movwf	___almod@divisor,c
  2210  0078F2  0E00               	movlw	0
  2211  0078F4  6E3C               	movwf	___almod@divisor+1,c
  2212  0078F6  0E00               	movlw	0
  2213  0078F8  6E3D               	movwf	___almod@divisor+2,c
  2214  0078FA  0E00               	movlw	0
  2215  0078FC  6E3E               	movwf	___almod@divisor+3,c
  2216  0078FE  EC5D  F02D         	call	___almod	;wreg free
  2217  007902  C037  F09C         	movff	?___almod,_Auni
  2218  007906  C038  F09D         	movff	?___almod+1,_Auni+1
  2219  00790A  C039  F09E         	movff	?___almod+2,_Auni+2
  2220  00790E  C03A  F09F         	movff	?___almod+3,_Auni+3
  2221                           
  2222                           ;main.c: 224: char2LCD(Amil + 48);
  2223  007912  0100               	movlb	0	; () banked
  2224  007914  51A8               	movf	_Amil& (0+255),w,b
  2225  007916  0F30               	addlw	48
  2226  007918  EC4E  F02C         	call	_char2LCD
  2227                           
  2228                           ;main.c: 225: char2LCD(Acen + 48);
  2229  00791C  0100               	movlb	0	; () banked
  2230  00791E  51A4               	movf	_Acen& (0+255),w,b
  2231  007920  0F30               	addlw	48
  2232  007922  EC4E  F02C         	call	_char2LCD
  2233                           
  2234                           ;main.c: 226: char2LCD(Adec + 48);
  2235  007926  0100               	movlb	0	; () banked
  2236  007928  51A0               	movf	_Adec& (0+255),w,b
  2237  00792A  0F30               	addlw	48
  2238  00792C  EC4E  F02C         	call	_char2LCD
  2239                           
  2240                           ;main.c: 227: char2LCD(Auni + 48);
  2241  007930  0100               	movlb	0	; () banked
  2242  007932  519C               	movf	_Auni& (0+255),w,b
  2243  007934  0F30               	addlw	48
  2244  007936  EC4E  F02C         	call	_char2LCD
  2245                           
  2246                           ;main.c: 229: set_CURSOR(0x40);
  2247  00793A  0E40               	movlw	64
  2248  00793C  EC6B  F02C         	call	_set_CURSOR
  2249                           
  2250                           ;main.c: 230: msg2LCD("B $");
  2251  007940  0E6C               	movlw	low STR_8
  2252  007942  6E03               	movwf	msg2LCD@datos,c
  2253  007944  0E20               	movlw	high STR_8
  2254  007946  6E04               	movwf	msg2LCD@datos+1,c
  2255  007948  ECAC  F02C         	call	_msg2LCD	;wreg free
  2256                           
  2257                           ;main.c: 232: Bmil = broncePrecio() / 1000;
  2258  00794C  ECD4  F02B         	call	_broncePrecio	;wreg free
  2259  007950  C001  F041         	movff	?_broncePrecio,___aldiv@dividend
  2260  007954  C002  F042         	movff	?_broncePrecio+1,___aldiv@dividend+1
  2261  007958  C003  F043         	movff	?_broncePrecio+2,___aldiv@dividend+2
  2262  00795C  C004  F044         	movff	?_broncePrecio+3,___aldiv@dividend+3
  2263  007960  0EE8               	movlw	232
  2264  007962  6E45               	movwf	___aldiv@divisor,c
  2265  007964  0E03               	movlw	3
  2266  007966  6E46               	movwf	___aldiv@divisor+1,c
  2267  007968  0E00               	movlw	0
  2268  00796A  6E47               	movwf	___aldiv@divisor+2,c
  2269  00796C  0E00               	movlw	0
  2270  00796E  6E48               	movwf	___aldiv@divisor+3,c
  2271  007970  EC68  F02E         	call	___aldiv	;wreg free
  2272  007974  C041  F098         	movff	?___aldiv,_Bmil
  2273  007978  C042  F099         	movff	?___aldiv+1,_Bmil+1
  2274  00797C  C043  F09A         	movff	?___aldiv+2,_Bmil+2
  2275  007980  C044  F09B         	movff	?___aldiv+3,_Bmil+3
  2276                           
  2277                           ;main.c: 233: Bcen = (broncePrecio() % 1000) / 100;
  2278  007984  0EE8               	movlw	232
  2279  007986  6E3B               	movwf	___almod@divisor,c
  2280  007988  0E03               	movlw	3
  2281  00798A  6E3C               	movwf	___almod@divisor+1,c
  2282  00798C  0E00               	movlw	0
  2283  00798E  6E3D               	movwf	___almod@divisor+2,c
  2284  007990  0E00               	movlw	0
  2285  007992  6E3E               	movwf	___almod@divisor+3,c
  2286  007994  ECD4  F02B         	call	_broncePrecio	;wreg free
  2287  007998  C001  F037         	movff	?_broncePrecio,___almod@dividend
  2288  00799C  C002  F038         	movff	?_broncePrecio+1,___almod@dividend+1
  2289  0079A0  C003  F039         	movff	?_broncePrecio+2,___almod@dividend+2
  2290  0079A4  C004  F03A         	movff	?_broncePrecio+3,___almod@dividend+3
  2291  0079A8  EC5D  F02D         	call	___almod	;wreg free
  2292  0079AC  C037  F041         	movff	?___almod,___aldiv@dividend
  2293  0079B0  C038  F042         	movff	?___almod+1,___aldiv@dividend+1
  2294  0079B4  C039  F043         	movff	?___almod+2,___aldiv@dividend+2
  2295  0079B8  C03A  F044         	movff	?___almod+3,___aldiv@dividend+3
  2296  0079BC  0E64               	movlw	100
  2297  0079BE  6E45               	movwf	___aldiv@divisor,c
  2298  0079C0  0E00               	movlw	0
  2299  0079C2  6E46               	movwf	___aldiv@divisor+1,c
  2300  0079C4  0E00               	movlw	0
  2301  0079C6  6E47               	movwf	___aldiv@divisor+2,c
  2302  0079C8  0E00               	movlw	0
  2303  0079CA  6E48               	movwf	___aldiv@divisor+3,c
  2304  0079CC  EC68  F02E         	call	___aldiv	;wreg free
  2305  0079D0  C041  F094         	movff	?___aldiv,_Bcen
  2306  0079D4  C042  F095         	movff	?___aldiv+1,_Bcen+1
  2307  0079D8  C043  F096         	movff	?___aldiv+2,_Bcen+2
  2308  0079DC  C044  F097         	movff	?___aldiv+3,_Bcen+3
  2309                           
  2310                           ;main.c: 234: Bdec = ((broncePrecio() % 1000) % 100) / 10;
  2311  0079E0  0EE8               	movlw	232
  2312  0079E2  6E3B               	movwf	___almod@divisor,c
  2313  0079E4  0E03               	movlw	3
  2314  0079E6  6E3C               	movwf	___almod@divisor+1,c
  2315  0079E8  0E00               	movlw	0
  2316  0079EA  6E3D               	movwf	___almod@divisor+2,c
  2317  0079EC  0E00               	movlw	0
  2318  0079EE  6E3E               	movwf	___almod@divisor+3,c
  2319  0079F0  ECD4  F02B         	call	_broncePrecio	;wreg free
  2320  0079F4  C001  F037         	movff	?_broncePrecio,___almod@dividend
  2321  0079F8  C002  F038         	movff	?_broncePrecio+1,___almod@dividend+1
  2322  0079FC  C003  F039         	movff	?_broncePrecio+2,___almod@dividend+2
  2323  007A00  C004  F03A         	movff	?_broncePrecio+3,___almod@dividend+3
  2324  007A04  EC5D  F02D         	call	___almod	;wreg free
  2325  007A08  C037  F0FC         	movff	?___almod,_mefMenu$2614
  2326  007A0C  C038  F0FD         	movff	?___almod+1,_mefMenu$2614+1
  2327  007A10  C039  F0FE         	movff	?___almod+2,_mefMenu$2614+2
  2328  007A14  C03A  F0FF         	movff	?___almod+3,_mefMenu$2614+3
  2329                           
  2330                           ;main.c: 234: Bdec = ((broncePrecio() % 1000) % 100) / 10;
  2331  007A18  0E64               	movlw	100
  2332  007A1A  6E3B               	movwf	___almod@divisor,c
  2333  007A1C  0E00               	movlw	0
  2334  007A1E  6E3C               	movwf	___almod@divisor+1,c
  2335  007A20  0E00               	movlw	0
  2336  007A22  6E3D               	movwf	___almod@divisor+2,c
  2337  007A24  0E00               	movlw	0
  2338  007A26  6E3E               	movwf	___almod@divisor+3,c
  2339  007A28  C0FC  F037         	movff	_mefMenu$2614,___almod@dividend
  2340  007A2C  C0FD  F038         	movff	_mefMenu$2614+1,___almod@dividend+1
  2341  007A30  C0FE  F039         	movff	_mefMenu$2614+2,___almod@dividend+2
  2342  007A34  C0FF  F03A         	movff	_mefMenu$2614+3,___almod@dividend+3
  2343  007A38  EC5D  F02D         	call	___almod	;wreg free
  2344  007A3C  C037  F041         	movff	?___almod,___aldiv@dividend
  2345  007A40  C038  F042         	movff	?___almod+1,___aldiv@dividend+1
  2346  007A44  C039  F043         	movff	?___almod+2,___aldiv@dividend+2
  2347  007A48  C03A  F044         	movff	?___almod+3,___aldiv@dividend+3
  2348  007A4C  0E0A               	movlw	10
  2349  007A4E  6E45               	movwf	___aldiv@divisor,c
  2350  007A50  0E00               	movlw	0
  2351  007A52  6E46               	movwf	___aldiv@divisor+1,c
  2352  007A54  0E00               	movlw	0
  2353  007A56  6E47               	movwf	___aldiv@divisor+2,c
  2354  007A58  0E00               	movlw	0
  2355  007A5A  6E48               	movwf	___aldiv@divisor+3,c
  2356  007A5C  EC68  F02E         	call	___aldiv	;wreg free
  2357  007A60  C041  F090         	movff	?___aldiv,_Bdec
  2358  007A64  C042  F091         	movff	?___aldiv+1,_Bdec+1
  2359  007A68  C043  F092         	movff	?___aldiv+2,_Bdec+2
  2360  007A6C  C044  F093         	movff	?___aldiv+3,_Bdec+3
  2361                           
  2362                           ;main.c: 235: Buni = ((broncePrecio() % 1000) % 100) % 10;
  2363  007A70  0EE8               	movlw	232
  2364  007A72  6E3B               	movwf	___almod@divisor,c
  2365  007A74  0E03               	movlw	3
  2366  007A76  6E3C               	movwf	___almod@divisor+1,c
  2367  007A78  0E00               	movlw	0
  2368  007A7A  6E3D               	movwf	___almod@divisor+2,c
  2369  007A7C  0E00               	movlw	0
  2370  007A7E  6E3E               	movwf	___almod@divisor+3,c
  2371  007A80  ECD4  F02B         	call	_broncePrecio	;wreg free
  2372  007A84  C001  F037         	movff	?_broncePrecio,___almod@dividend
  2373  007A88  C002  F038         	movff	?_broncePrecio+1,___almod@dividend+1
  2374  007A8C  C003  F039         	movff	?_broncePrecio+2,___almod@dividend+2
  2375  007A90  C004  F03A         	movff	?_broncePrecio+3,___almod@dividend+3
  2376  007A94  EC5D  F02D         	call	___almod	;wreg free
  2377  007A98  C037  F0FC         	movff	?___almod,_mefMenu$2614
  2378  007A9C  C038  F0FD         	movff	?___almod+1,_mefMenu$2614+1
  2379  007AA0  C039  F0FE         	movff	?___almod+2,_mefMenu$2614+2
  2380  007AA4  C03A  F0FF         	movff	?___almod+3,_mefMenu$2614+3
  2381                           
  2382                           ;main.c: 235: Buni = ((broncePrecio() % 1000) % 100) % 10;
  2383  007AA8  0E64               	movlw	100
  2384  007AAA  6E3B               	movwf	___almod@divisor,c
  2385  007AAC  0E00               	movlw	0
  2386  007AAE  6E3C               	movwf	___almod@divisor+1,c
  2387  007AB0  0E00               	movlw	0
  2388  007AB2  6E3D               	movwf	___almod@divisor+2,c
  2389  007AB4  0E00               	movlw	0
  2390  007AB6  6E3E               	movwf	___almod@divisor+3,c
  2391  007AB8  C0FC  F037         	movff	_mefMenu$2614,___almod@dividend
  2392  007ABC  C0FD  F038         	movff	_mefMenu$2614+1,___almod@dividend+1
  2393  007AC0  C0FE  F039         	movff	_mefMenu$2614+2,___almod@dividend+2
  2394  007AC4  C0FF  F03A         	movff	_mefMenu$2614+3,___almod@dividend+3
  2395  007AC8  EC5D  F02D         	call	___almod	;wreg free
  2396  007ACC  C037  F0F8         	movff	?___almod,_mefMenu$2615
  2397  007AD0  C038  F0F9         	movff	?___almod+1,_mefMenu$2615+1
  2398  007AD4  C039  F0FA         	movff	?___almod+2,_mefMenu$2615+2
  2399  007AD8  C03A  F0FB         	movff	?___almod+3,_mefMenu$2615+3
  2400                           
  2401                           ;main.c: 235: Buni = ((broncePrecio() % 1000) % 100) % 10;
  2402  007ADC  C0F8  F037         	movff	_mefMenu$2615,___almod@dividend
  2403  007AE0  C0F9  F038         	movff	_mefMenu$2615+1,___almod@dividend+1
  2404  007AE4  C0FA  F039         	movff	_mefMenu$2615+2,___almod@dividend+2
  2405  007AE8  C0FB  F03A         	movff	_mefMenu$2615+3,___almod@dividend+3
  2406  007AEC  0E0A               	movlw	10
  2407  007AEE  6E3B               	movwf	___almod@divisor,c
  2408  007AF0  0E00               	movlw	0
  2409  007AF2  6E3C               	movwf	___almod@divisor+1,c
  2410  007AF4  0E00               	movlw	0
  2411  007AF6  6E3D               	movwf	___almod@divisor+2,c
  2412  007AF8  0E00               	movlw	0
  2413  007AFA  6E3E               	movwf	___almod@divisor+3,c
  2414  007AFC  EC5D  F02D         	call	___almod	;wreg free
  2415  007B00  C037  F08C         	movff	?___almod,_Buni
  2416  007B04  C038  F08D         	movff	?___almod+1,_Buni+1
  2417  007B08  C039  F08E         	movff	?___almod+2,_Buni+2
  2418  007B0C  C03A  F08F         	movff	?___almod+3,_Buni+3
  2419                           
  2420                           ;main.c: 237: char2LCD(Bmil + 48);
  2421  007B10  0100               	movlb	0	; () banked
  2422  007B12  5198               	movf	_Bmil& (0+255),w,b
  2423  007B14  0F30               	addlw	48
  2424  007B16  EC4E  F02C         	call	_char2LCD
  2425                           
  2426                           ;main.c: 238: char2LCD(Bcen + 48);
  2427  007B1A  0100               	movlb	0	; () banked
  2428  007B1C  5194               	movf	_Bcen& (0+255),w,b
  2429  007B1E  0F30               	addlw	48
  2430  007B20  EC4E  F02C         	call	_char2LCD
  2431                           
  2432                           ;main.c: 239: char2LCD(Bdec + 48);
  2433  007B24  0100               	movlb	0	; () banked
  2434  007B26  5190               	movf	_Bdec& (0+255),w,b
  2435  007B28  0F30               	addlw	48
  2436  007B2A  EC4E  F02C         	call	_char2LCD
  2437                           
  2438                           ;main.c: 240: char2LCD(Buni + 48);
  2439  007B2E  0100               	movlb	0	; () banked
  2440  007B30  518C               	movf	_Buni& (0+255),w,b
  2441  007B32  0F30               	addlw	48
  2442  007B34  EC4E  F02C         	call	_char2LCD
  2443                           
  2444                           ;main.c: 242: set_CURSOR(0x49);
  2445  007B38  0E49               	movlw	73
  2446  007B3A  EC6B  F02C         	call	_set_CURSOR
  2447                           
  2448                           ;main.c: 243: msg2LCD("<");
  2449  007B3E  0E7E               	movlw	low STR_2
  2450  007B40  6E03               	movwf	msg2LCD@datos,c
  2451  007B42  0E20               	movlw	high STR_2
  2452  007B44  6E04               	movwf	msg2LCD@datos+1,c
  2453  007B46  ECAC  F02C         	call	_msg2LCD	;wreg free
  2454                           
  2455                           ;main.c: 244: if(tecla()==2){
  2456  007B4A  EC6E  F02F         	call	_tecla	;wreg free
  2457  007B4E  0A02               	xorlw	2
  2458  007B50  A4D8               	btfss	status,2,c
  2459  007B52  0012               	return	
  2460                           
  2461                           ;main.c: 245: clear_LCD();
  2462  007B54  EC32  F02C         	call	_clear_LCD	;wreg free
  2463                           
  2464                           ;main.c: 246: casosMenu = 3;
  2465  007B58  0E03               	movlw	3
  2466  007B5A  0100               	movlb	0	; () banked
  2467  007B5C  6F68               	movwf	_casosMenu& (0+255),b
  2468  007B5E  0E00               	movlw	0
  2469  007B60  6F69               	movwf	(_casosMenu+1)& (0+255),b
  2470  007B62  0E00               	movlw	0
  2471  007B64  6F6A               	movwf	(_casosMenu+2)& (0+255),b
  2472  007B66  0E00               	movlw	0
  2473  007B68  6F6B               	movwf	(_casosMenu+3)& (0+255),b
  2474  007B6A  0012               	return	
  2475  007B6C                     l4885:
  2476                           
  2477                           ; BSR set to: 0
  2478                           ;main.c: 258: {;main.c: 259: parpadeoLed();
  2479  007B6C  ECD5  F030         	call	_parpadeoLed	;wreg free
  2480                           
  2481                           ;main.c: 296: if (tecla() == 2) {
  2482  007B70  EC6E  F02F         	call	_tecla	;wreg free
  2483  007B74  0A02               	xorlw	2
  2484  007B76  A4D8               	btfss	status,2,c
  2485  007B78  0012               	return	
  2486                           
  2487                           ;main.c: 297: clear_LCD();
  2488  007B7A  EC32  F02C         	call	_clear_LCD	;wreg free
  2489  007B7E                     l4889:
  2490                           
  2491                           ;main.c: 298: casosMenu = 0;
  2492  007B7E  0E00               	movlw	0
  2493  007B80  0100               	movlb	0	; () banked
  2494  007B82  6F68               	movwf	_casosMenu& (0+255),b
  2495  007B84  0E00               	movlw	0
  2496  007B86  6F69               	movwf	(_casosMenu+1)& (0+255),b
  2497  007B88  0E00               	movlw	0
  2498  007B8A  6F6A               	movwf	(_casosMenu+2)& (0+255),b
  2499  007B8C  0E00               	movlw	0
  2500  007B8E  6F6B               	movwf	(_casosMenu+3)& (0+255),b
  2501  007B90  0012               	return	
  2502  007B92                     l4891:
  2503                           
  2504                           ; BSR set to: 0
  2505                           ;main.c: 309: set_CURSOR(0x00);
  2506  007B92  0E00               	movlw	0
  2507  007B94  EC6B  F02C         	call	_set_CURSOR
  2508                           
  2509                           ;main.c: 310: msg2LCD("P $");
  2510  007B98  0E74               	movlw	low STR_10
  2511  007B9A  6E03               	movwf	msg2LCD@datos,c
  2512  007B9C  0E20               	movlw	high STR_10
  2513  007B9E  6E04               	movwf	msg2LCD@datos+1,c
  2514  007BA0  ECAC  F02C         	call	_msg2LCD	;wreg free
  2515                           
  2516                           ;main.c: 312: Pmil = plomoPrecio() / 1000;
  2517  007BA4  ECF8  F02B         	call	_plomoPrecio	;wreg free
  2518  007BA8  C001  F041         	movff	?_plomoPrecio,___aldiv@dividend
  2519  007BAC  C002  F042         	movff	?_plomoPrecio+1,___aldiv@dividend+1
  2520  007BB0  C003  F043         	movff	?_plomoPrecio+2,___aldiv@dividend+2
  2521  007BB4  C004  F044         	movff	?_plomoPrecio+3,___aldiv@dividend+3
  2522  007BB8  0EE8               	movlw	232
  2523  007BBA  6E45               	movwf	___aldiv@divisor,c
  2524  007BBC  0E03               	movlw	3
  2525  007BBE  6E46               	movwf	___aldiv@divisor+1,c
  2526  007BC0  0E00               	movlw	0
  2527  007BC2  6E47               	movwf	___aldiv@divisor+2,c
  2528  007BC4  0E00               	movlw	0
  2529  007BC6  6E48               	movwf	___aldiv@divisor+3,c
  2530  007BC8  EC68  F02E         	call	___aldiv	;wreg free
  2531  007BCC  C041  F088         	movff	?___aldiv,_Pmil
  2532  007BD0  C042  F089         	movff	?___aldiv+1,_Pmil+1
  2533  007BD4  C043  F08A         	movff	?___aldiv+2,_Pmil+2
  2534  007BD8  C044  F08B         	movff	?___aldiv+3,_Pmil+3
  2535                           
  2536                           ;main.c: 313: Pcen = (plomoPrecio() % 1000) / 100;
  2537  007BDC  0EE8               	movlw	232
  2538  007BDE  6E3B               	movwf	___almod@divisor,c
  2539  007BE0  0E03               	movlw	3
  2540  007BE2  6E3C               	movwf	___almod@divisor+1,c
  2541  007BE4  0E00               	movlw	0
  2542  007BE6  6E3D               	movwf	___almod@divisor+2,c
  2543  007BE8  0E00               	movlw	0
  2544  007BEA  6E3E               	movwf	___almod@divisor+3,c
  2545  007BEC  ECF8  F02B         	call	_plomoPrecio	;wreg free
  2546  007BF0  C001  F037         	movff	?_plomoPrecio,___almod@dividend
  2547  007BF4  C002  F038         	movff	?_plomoPrecio+1,___almod@dividend+1
  2548  007BF8  C003  F039         	movff	?_plomoPrecio+2,___almod@dividend+2
  2549  007BFC  C004  F03A         	movff	?_plomoPrecio+3,___almod@dividend+3
  2550  007C00  EC5D  F02D         	call	___almod	;wreg free
  2551  007C04  C037  F041         	movff	?___almod,___aldiv@dividend
  2552  007C08  C038  F042         	movff	?___almod+1,___aldiv@dividend+1
  2553  007C0C  C039  F043         	movff	?___almod+2,___aldiv@dividend+2
  2554  007C10  C03A  F044         	movff	?___almod+3,___aldiv@dividend+3
  2555  007C14  0E64               	movlw	100
  2556  007C16  6E45               	movwf	___aldiv@divisor,c
  2557  007C18  0E00               	movlw	0
  2558  007C1A  6E46               	movwf	___aldiv@divisor+1,c
  2559  007C1C  0E00               	movlw	0
  2560  007C1E  6E47               	movwf	___aldiv@divisor+2,c
  2561  007C20  0E00               	movlw	0
  2562  007C22  6E48               	movwf	___aldiv@divisor+3,c
  2563  007C24  EC68  F02E         	call	___aldiv	;wreg free
  2564  007C28  C041  F084         	movff	?___aldiv,_Pcen
  2565  007C2C  C042  F085         	movff	?___aldiv+1,_Pcen+1
  2566  007C30  C043  F086         	movff	?___aldiv+2,_Pcen+2
  2567  007C34  C044  F087         	movff	?___aldiv+3,_Pcen+3
  2568                           
  2569                           ;main.c: 314: Pdec = ((plomoPrecio() % 1000) % 100) / 10;
  2570  007C38  0EE8               	movlw	232
  2571  007C3A  6E3B               	movwf	___almod@divisor,c
  2572  007C3C  0E03               	movlw	3
  2573  007C3E  6E3C               	movwf	___almod@divisor+1,c
  2574  007C40  0E00               	movlw	0
  2575  007C42  6E3D               	movwf	___almod@divisor+2,c
  2576  007C44  0E00               	movlw	0
  2577  007C46  6E3E               	movwf	___almod@divisor+3,c
  2578  007C48  ECF8  F02B         	call	_plomoPrecio	;wreg free
  2579  007C4C  C001  F037         	movff	?_plomoPrecio,___almod@dividend
  2580  007C50  C002  F038         	movff	?_plomoPrecio+1,___almod@dividend+1
  2581  007C54  C003  F039         	movff	?_plomoPrecio+2,___almod@dividend+2
  2582  007C58  C004  F03A         	movff	?_plomoPrecio+3,___almod@dividend+3
  2583  007C5C  EC5D  F02D         	call	___almod	;wreg free
  2584  007C60  C037  F0FC         	movff	?___almod,_mefMenu$2614
  2585  007C64  C038  F0FD         	movff	?___almod+1,_mefMenu$2614+1
  2586  007C68  C039  F0FE         	movff	?___almod+2,_mefMenu$2614+2
  2587  007C6C  C03A  F0FF         	movff	?___almod+3,_mefMenu$2614+3
  2588                           
  2589                           ;main.c: 314: Pdec = ((plomoPrecio() % 1000) % 100) / 10;
  2590  007C70  0E64               	movlw	100
  2591  007C72  6E3B               	movwf	___almod@divisor,c
  2592  007C74  0E00               	movlw	0
  2593  007C76  6E3C               	movwf	___almod@divisor+1,c
  2594  007C78  0E00               	movlw	0
  2595  007C7A  6E3D               	movwf	___almod@divisor+2,c
  2596  007C7C  0E00               	movlw	0
  2597  007C7E  6E3E               	movwf	___almod@divisor+3,c
  2598  007C80  C0FC  F037         	movff	_mefMenu$2614,___almod@dividend
  2599  007C84  C0FD  F038         	movff	_mefMenu$2614+1,___almod@dividend+1
  2600  007C88  C0FE  F039         	movff	_mefMenu$2614+2,___almod@dividend+2
  2601  007C8C  C0FF  F03A         	movff	_mefMenu$2614+3,___almod@dividend+3
  2602  007C90  EC5D  F02D         	call	___almod	;wreg free
  2603  007C94  C037  F041         	movff	?___almod,___aldiv@dividend
  2604  007C98  C038  F042         	movff	?___almod+1,___aldiv@dividend+1
  2605  007C9C  C039  F043         	movff	?___almod+2,___aldiv@dividend+2
  2606  007CA0  C03A  F044         	movff	?___almod+3,___aldiv@dividend+3
  2607  007CA4  0E0A               	movlw	10
  2608  007CA6  6E45               	movwf	___aldiv@divisor,c
  2609  007CA8  0E00               	movlw	0
  2610  007CAA  6E46               	movwf	___aldiv@divisor+1,c
  2611  007CAC  0E00               	movlw	0
  2612  007CAE  6E47               	movwf	___aldiv@divisor+2,c
  2613  007CB0  0E00               	movlw	0
  2614  007CB2  6E48               	movwf	___aldiv@divisor+3,c
  2615  007CB4  EC68  F02E         	call	___aldiv	;wreg free
  2616  007CB8  C041  F080         	movff	?___aldiv,_Pdec
  2617  007CBC  C042  F081         	movff	?___aldiv+1,_Pdec+1
  2618  007CC0  C043  F082         	movff	?___aldiv+2,_Pdec+2
  2619  007CC4  C044  F083         	movff	?___aldiv+3,_Pdec+3
  2620                           
  2621                           ;main.c: 315: Puni = ((plomoPrecio() % 1000) % 100) % 10;
  2622  007CC8  0EE8               	movlw	232
  2623  007CCA  6E3B               	movwf	___almod@divisor,c
  2624  007CCC  0E03               	movlw	3
  2625  007CCE  6E3C               	movwf	___almod@divisor+1,c
  2626  007CD0  0E00               	movlw	0
  2627  007CD2  6E3D               	movwf	___almod@divisor+2,c
  2628  007CD4  0E00               	movlw	0
  2629  007CD6  6E3E               	movwf	___almod@divisor+3,c
  2630  007CD8  ECF8  F02B         	call	_plomoPrecio	;wreg free
  2631  007CDC  C001  F037         	movff	?_plomoPrecio,___almod@dividend
  2632  007CE0  C002  F038         	movff	?_plomoPrecio+1,___almod@dividend+1
  2633  007CE4  C003  F039         	movff	?_plomoPrecio+2,___almod@dividend+2
  2634  007CE8  C004  F03A         	movff	?_plomoPrecio+3,___almod@dividend+3
  2635  007CEC  EC5D  F02D         	call	___almod	;wreg free
  2636  007CF0  C037  F0FC         	movff	?___almod,_mefMenu$2614
  2637  007CF4  C038  F0FD         	movff	?___almod+1,_mefMenu$2614+1
  2638  007CF8  C039  F0FE         	movff	?___almod+2,_mefMenu$2614+2
  2639  007CFC  C03A  F0FF         	movff	?___almod+3,_mefMenu$2614+3
  2640                           
  2641                           ;main.c: 315: Puni = ((plomoPrecio() % 1000) % 100) % 10;
  2642  007D00  0E64               	movlw	100
  2643  007D02  6E3B               	movwf	___almod@divisor,c
  2644  007D04  0E00               	movlw	0
  2645  007D06  6E3C               	movwf	___almod@divisor+1,c
  2646  007D08  0E00               	movlw	0
  2647  007D0A  6E3D               	movwf	___almod@divisor+2,c
  2648  007D0C  0E00               	movlw	0
  2649  007D0E  6E3E               	movwf	___almod@divisor+3,c
  2650  007D10  C0FC  F037         	movff	_mefMenu$2614,___almod@dividend
  2651  007D14  C0FD  F038         	movff	_mefMenu$2614+1,___almod@dividend+1
  2652  007D18  C0FE  F039         	movff	_mefMenu$2614+2,___almod@dividend+2
  2653  007D1C  C0FF  F03A         	movff	_mefMenu$2614+3,___almod@dividend+3
  2654  007D20  EC5D  F02D         	call	___almod	;wreg free
  2655  007D24  C037  F0F8         	movff	?___almod,_mefMenu$2615
  2656  007D28  C038  F0F9         	movff	?___almod+1,_mefMenu$2615+1
  2657  007D2C  C039  F0FA         	movff	?___almod+2,_mefMenu$2615+2
  2658  007D30  C03A  F0FB         	movff	?___almod+3,_mefMenu$2615+3
  2659                           
  2660                           ;main.c: 315: Puni = ((plomoPrecio() % 1000) % 100) % 10;
  2661  007D34  C0F8  F037         	movff	_mefMenu$2615,___almod@dividend
  2662  007D38  C0F9  F038         	movff	_mefMenu$2615+1,___almod@dividend+1
  2663  007D3C  C0FA  F039         	movff	_mefMenu$2615+2,___almod@dividend+2
  2664  007D40  C0FB  F03A         	movff	_mefMenu$2615+3,___almod@dividend+3
  2665  007D44  0E0A               	movlw	10
  2666  007D46  6E3B               	movwf	___almod@divisor,c
  2667  007D48  0E00               	movlw	0
  2668  007D4A  6E3C               	movwf	___almod@divisor+1,c
  2669  007D4C  0E00               	movlw	0
  2670  007D4E  6E3D               	movwf	___almod@divisor+2,c
  2671  007D50  0E00               	movlw	0
  2672  007D52  6E3E               	movwf	___almod@divisor+3,c
  2673  007D54  EC5D  F02D         	call	___almod	;wreg free
  2674  007D58  C037  F07C         	movff	?___almod,_Puni
  2675  007D5C  C038  F07D         	movff	?___almod+1,_Puni+1
  2676  007D60  C039  F07E         	movff	?___almod+2,_Puni+2
  2677  007D64  C03A  F07F         	movff	?___almod+3,_Puni+3
  2678                           
  2679                           ;main.c: 317: char2LCD(Pmil + 48);
  2680  007D68  0100               	movlb	0	; () banked
  2681  007D6A  5188               	movf	_Pmil& (0+255),w,b
  2682  007D6C  0F30               	addlw	48
  2683  007D6E  EC4E  F02C         	call	_char2LCD
  2684                           
  2685                           ;main.c: 318: char2LCD(Pcen + 48);
  2686  007D72  0100               	movlb	0	; () banked
  2687  007D74  5184               	movf	_Pcen& (0+255),w,b
  2688  007D76  0F30               	addlw	48
  2689  007D78  EC4E  F02C         	call	_char2LCD
  2690                           
  2691                           ;main.c: 319: char2LCD(Pdec + 48);
  2692  007D7C  0100               	movlb	0	; () banked
  2693  007D7E  5180               	movf	_Pdec& (0+255),w,b
  2694  007D80  0F30               	addlw	48
  2695  007D82  EC4E  F02C         	call	_char2LCD
  2696                           
  2697                           ;main.c: 320: char2LCD(Puni + 48);
  2698  007D86  0100               	movlb	0	; () banked
  2699  007D88  517C               	movf	_Puni& (0+255),w,b
  2700  007D8A  0F30               	addlw	48
  2701  007D8C  EC4E  F02C         	call	_char2LCD
  2702                           
  2703                           ;main.c: 322: descomposicion();
  2704  007D90  ECE7  F032         	call	_descomposicion	;wreg free
  2705                           
  2706                           ;main.c: 324: set_CURSOR(0x40);
  2707  007D94  0E40               	movlw	64
  2708  007D96  EC6B  F02C         	call	_set_CURSOR
  2709                           
  2710                           ;main.c: 325: msg2LCD("$");
  2711  007D9A  0E6A               	movlw	low (STR_3+2)
  2712  007D9C  6E03               	movwf	msg2LCD@datos,c
  2713  007D9E  0E20               	movlw	high (STR_3+2)
  2714  007DA0  6E04               	movwf	msg2LCD@datos+1,c
  2715  007DA2  ECAC  F02C         	call	_msg2LCD	;wreg free
  2716                           
  2717                           ;main.c: 326: Pmil = plomoPrecio() / 1000;
  2718  007DA6  ECF8  F02B         	call	_plomoPrecio	;wreg free
  2719  007DAA  C001  F041         	movff	?_plomoPrecio,___aldiv@dividend
  2720  007DAE  C002  F042         	movff	?_plomoPrecio+1,___aldiv@dividend+1
  2721  007DB2  C003  F043         	movff	?_plomoPrecio+2,___aldiv@dividend+2
  2722  007DB6  C004  F044         	movff	?_plomoPrecio+3,___aldiv@dividend+3
  2723  007DBA  0EE8               	movlw	232
  2724  007DBC  6E45               	movwf	___aldiv@divisor,c
  2725  007DBE  0E03               	movlw	3
  2726  007DC0  6E46               	movwf	___aldiv@divisor+1,c
  2727  007DC2  0E00               	movlw	0
  2728  007DC4  6E47               	movwf	___aldiv@divisor+2,c
  2729  007DC6  0E00               	movlw	0
  2730  007DC8  6E48               	movwf	___aldiv@divisor+3,c
  2731  007DCA  EC68  F02E         	call	___aldiv	;wreg free
  2732  007DCE  C041  F088         	movff	?___aldiv,_Pmil
  2733  007DD2  C042  F089         	movff	?___aldiv+1,_Pmil+1
  2734  007DD6  C043  F08A         	movff	?___aldiv+2,_Pmil+2
  2735  007DDA  C044  F08B         	movff	?___aldiv+3,_Pmil+3
  2736                           
  2737                           ;main.c: 327: Pcen = (plomoPrecio() % 1000) / 100;
  2738  007DDE  0EE8               	movlw	232
  2739  007DE0  6E3B               	movwf	___almod@divisor,c
  2740  007DE2  0E03               	movlw	3
  2741  007DE4  6E3C               	movwf	___almod@divisor+1,c
  2742  007DE6  0E00               	movlw	0
  2743  007DE8  6E3D               	movwf	___almod@divisor+2,c
  2744  007DEA  0E00               	movlw	0
  2745  007DEC  6E3E               	movwf	___almod@divisor+3,c
  2746  007DEE  ECF8  F02B         	call	_plomoPrecio	;wreg free
  2747  007DF2  C001  F037         	movff	?_plomoPrecio,___almod@dividend
  2748  007DF6  C002  F038         	movff	?_plomoPrecio+1,___almod@dividend+1
  2749  007DFA  C003  F039         	movff	?_plomoPrecio+2,___almod@dividend+2
  2750  007DFE  C004  F03A         	movff	?_plomoPrecio+3,___almod@dividend+3
  2751  007E02  EC5D  F02D         	call	___almod	;wreg free
  2752  007E06  C037  F041         	movff	?___almod,___aldiv@dividend
  2753  007E0A  C038  F042         	movff	?___almod+1,___aldiv@dividend+1
  2754  007E0E  C039  F043         	movff	?___almod+2,___aldiv@dividend+2
  2755  007E12  C03A  F044         	movff	?___almod+3,___aldiv@dividend+3
  2756  007E16  0E64               	movlw	100
  2757  007E18  6E45               	movwf	___aldiv@divisor,c
  2758  007E1A  0E00               	movlw	0
  2759  007E1C  6E46               	movwf	___aldiv@divisor+1,c
  2760  007E1E  0E00               	movlw	0
  2761  007E20  6E47               	movwf	___aldiv@divisor+2,c
  2762  007E22  0E00               	movlw	0
  2763  007E24  6E48               	movwf	___aldiv@divisor+3,c
  2764  007E26  EC68  F02E         	call	___aldiv	;wreg free
  2765  007E2A  C041  F084         	movff	?___aldiv,_Pcen
  2766  007E2E  C042  F085         	movff	?___aldiv+1,_Pcen+1
  2767  007E32  C043  F086         	movff	?___aldiv+2,_Pcen+2
  2768  007E36  C044  F087         	movff	?___aldiv+3,_Pcen+3
  2769                           
  2770                           ;main.c: 328: Pdec = ((plomoPrecio() % 1000) % 100) / 10;
  2771  007E3A  0EE8               	movlw	232
  2772  007E3C  6E3B               	movwf	___almod@divisor,c
  2773  007E3E  0E03               	movlw	3
  2774  007E40  6E3C               	movwf	___almod@divisor+1,c
  2775  007E42  0E00               	movlw	0
  2776  007E44  6E3D               	movwf	___almod@divisor+2,c
  2777  007E46  0E00               	movlw	0
  2778  007E48  6E3E               	movwf	___almod@divisor+3,c
  2779  007E4A  ECF8  F02B         	call	_plomoPrecio	;wreg free
  2780  007E4E  C001  F037         	movff	?_plomoPrecio,___almod@dividend
  2781  007E52  C002  F038         	movff	?_plomoPrecio+1,___almod@dividend+1
  2782  007E56  C003  F039         	movff	?_plomoPrecio+2,___almod@dividend+2
  2783  007E5A  C004  F03A         	movff	?_plomoPrecio+3,___almod@dividend+3
  2784  007E5E  EC5D  F02D         	call	___almod	;wreg free
  2785  007E62  C037  F0FC         	movff	?___almod,_mefMenu$2614
  2786  007E66  C038  F0FD         	movff	?___almod+1,_mefMenu$2614+1
  2787  007E6A  C039  F0FE         	movff	?___almod+2,_mefMenu$2614+2
  2788  007E6E  C03A  F0FF         	movff	?___almod+3,_mefMenu$2614+3
  2789                           
  2790                           ;main.c: 328: Pdec = ((plomoPrecio() % 1000) % 100) / 10;
  2791  007E72  0E64               	movlw	100
  2792  007E74  6E3B               	movwf	___almod@divisor,c
  2793  007E76  0E00               	movlw	0
  2794  007E78  6E3C               	movwf	___almod@divisor+1,c
  2795  007E7A  0E00               	movlw	0
  2796  007E7C  6E3D               	movwf	___almod@divisor+2,c
  2797  007E7E  0E00               	movlw	0
  2798  007E80  6E3E               	movwf	___almod@divisor+3,c
  2799  007E82  C0FC  F037         	movff	_mefMenu$2614,___almod@dividend
  2800  007E86  C0FD  F038         	movff	_mefMenu$2614+1,___almod@dividend+1
  2801  007E8A  C0FE  F039         	movff	_mefMenu$2614+2,___almod@dividend+2
  2802  007E8E  C0FF  F03A         	movff	_mefMenu$2614+3,___almod@dividend+3
  2803  007E92  EC5D  F02D         	call	___almod	;wreg free
  2804  007E96  C037  F041         	movff	?___almod,___aldiv@dividend
  2805  007E9A  C038  F042         	movff	?___almod+1,___aldiv@dividend+1
  2806  007E9E  C039  F043         	movff	?___almod+2,___aldiv@dividend+2
  2807  007EA2  C03A  F044         	movff	?___almod+3,___aldiv@dividend+3
  2808  007EA6  0E0A               	movlw	10
  2809  007EA8  6E45               	movwf	___aldiv@divisor,c
  2810  007EAA  0E00               	movlw	0
  2811  007EAC  6E46               	movwf	___aldiv@divisor+1,c
  2812  007EAE  0E00               	movlw	0
  2813  007EB0  6E47               	movwf	___aldiv@divisor+2,c
  2814  007EB2  0E00               	movlw	0
  2815  007EB4  6E48               	movwf	___aldiv@divisor+3,c
  2816  007EB6  EC68  F02E         	call	___aldiv	;wreg free
  2817  007EBA  C041  F080         	movff	?___aldiv,_Pdec
  2818  007EBE  C042  F081         	movff	?___aldiv+1,_Pdec+1
  2819  007EC2  C043  F082         	movff	?___aldiv+2,_Pdec+2
  2820  007EC6  C044  F083         	movff	?___aldiv+3,_Pdec+3
  2821                           
  2822                           ;main.c: 329: Puni = ((plomoPrecio() % 1000) % 100) % 10;
  2823  007ECA  0EE8               	movlw	232
  2824  007ECC  6E3B               	movwf	___almod@divisor,c
  2825  007ECE  0E03               	movlw	3
  2826  007ED0  6E3C               	movwf	___almod@divisor+1,c
  2827  007ED2  0E00               	movlw	0
  2828  007ED4  6E3D               	movwf	___almod@divisor+2,c
  2829  007ED6  0E00               	movlw	0
  2830  007ED8  6E3E               	movwf	___almod@divisor+3,c
  2831  007EDA  ECF8  F02B         	call	_plomoPrecio	;wreg free
  2832  007EDE  C001  F037         	movff	?_plomoPrecio,___almod@dividend
  2833  007EE2  C002  F038         	movff	?_plomoPrecio+1,___almod@dividend+1
  2834  007EE6  C003  F039         	movff	?_plomoPrecio+2,___almod@dividend+2
  2835  007EEA  C004  F03A         	movff	?_plomoPrecio+3,___almod@dividend+3
  2836  007EEE  EC5D  F02D         	call	___almod	;wreg free
  2837  007EF2  C037  F0FC         	movff	?___almod,_mefMenu$2614
  2838  007EF6  C038  F0FD         	movff	?___almod+1,_mefMenu$2614+1
  2839  007EFA  C039  F0FE         	movff	?___almod+2,_mefMenu$2614+2
  2840  007EFE  C03A  F0FF         	movff	?___almod+3,_mefMenu$2614+3
  2841                           
  2842                           ;main.c: 329: Puni = ((plomoPrecio() % 1000) % 100) % 10;
  2843  007F02  0E64               	movlw	100
  2844  007F04  6E3B               	movwf	___almod@divisor,c
  2845  007F06  0E00               	movlw	0
  2846  007F08  6E3C               	movwf	___almod@divisor+1,c
  2847  007F0A  0E00               	movlw	0
  2848  007F0C  6E3D               	movwf	___almod@divisor+2,c
  2849  007F0E  0E00               	movlw	0
  2850  007F10  6E3E               	movwf	___almod@divisor+3,c
  2851  007F12  C0FC  F037         	movff	_mefMenu$2614,___almod@dividend
  2852  007F16  C0FD  F038         	movff	_mefMenu$2614+1,___almod@dividend+1
  2853  007F1A  C0FE  F039         	movff	_mefMenu$2614+2,___almod@dividend+2
  2854  007F1E  C0FF  F03A         	movff	_mefMenu$2614+3,___almod@dividend+3
  2855  007F22  EC5D  F02D         	call	___almod	;wreg free
  2856  007F26  C037  F0F8         	movff	?___almod,_mefMenu$2615
  2857  007F2A  C038  F0F9         	movff	?___almod+1,_mefMenu$2615+1
  2858  007F2E  C039  F0FA         	movff	?___almod+2,_mefMenu$2615+2
  2859  007F32  C03A  F0FB         	movff	?___almod+3,_mefMenu$2615+3
  2860                           
  2861                           ;main.c: 329: Puni = ((plomoPrecio() % 1000) % 100) % 10;
  2862  007F36  C0F8  F037         	movff	_mefMenu$2615,___almod@dividend
  2863  007F3A  C0F9  F038         	movff	_mefMenu$2615+1,___almod@dividend+1
  2864  007F3E  C0FA  F039         	movff	_mefMenu$2615+2,___almod@dividend+2
  2865  007F42  C0FB  F03A         	movff	_mefMenu$2615+3,___almod@dividend+3
  2866  007F46  0E0A               	movlw	10
  2867  007F48  6E3B               	movwf	___almod@divisor,c
  2868  007F4A  0E00               	movlw	0
  2869  007F4C  6E3C               	movwf	___almod@divisor+1,c
  2870  007F4E  0E00               	movlw	0
  2871  007F50  6E3D               	movwf	___almod@divisor+2,c
  2872  007F52  0E00               	movlw	0
  2873  007F54  6E3E               	movwf	___almod@divisor+3,c
  2874  007F56  EC5D  F02D         	call	___almod	;wreg free
  2875  007F5A  C037  F07C         	movff	?___almod,_Puni
  2876  007F5E  C038  F07D         	movff	?___almod+1,_Puni+1
  2877  007F62  C039  F07E         	movff	?___almod+2,_Puni+2
  2878  007F66  C03A  F07F         	movff	?___almod+3,_Puni+3
  2879                           
  2880                           ;main.c: 331: char2LCD(Pmil + 48);
  2881  007F6A  0100               	movlb	0	; () banked
  2882  007F6C  5188               	movf	_Pmil& (0+255),w,b
  2883  007F6E  0F30               	addlw	48
  2884  007F70  EC4E  F02C         	call	_char2LCD
  2885                           
  2886                           ;main.c: 332: char2LCD(Pcen + 48);
  2887  007F74  0100               	movlb	0	; () banked
  2888  007F76  5184               	movf	_Pcen& (0+255),w,b
  2889  007F78  0F30               	addlw	48
  2890  007F7A  EC4E  F02C         	call	_char2LCD
  2891                           
  2892                           ;main.c: 333: char2LCD(Pdec + 48);
  2893  007F7E  0100               	movlb	0	; () banked
  2894  007F80  5180               	movf	_Pdec& (0+255),w,b
  2895  007F82  0F30               	addlw	48
  2896  007F84  EC4E  F02C         	call	_char2LCD
  2897                           
  2898                           ;main.c: 334: char2LCD(Puni + 48);
  2899  007F88  0100               	movlb	0	; () banked
  2900  007F8A  517C               	movf	_Puni& (0+255),w,b
  2901  007F8C  0F30               	addlw	48
  2902  007F8E  EC4E  F02C         	call	_char2LCD
  2903                           
  2904                           ;main.c: 335: msg2LCD(".-");
  2905  007F92  0E78               	movlw	low STR_12
  2906  007F94  6E03               	movwf	msg2LCD@datos,c
  2907  007F96  0E20               	movlw	high STR_12
  2908  007F98  6E04               	movwf	msg2LCD@datos+1,c
  2909  007F9A  ECAC  F02C         	call	_msg2LCD	;wreg free
  2910                           
  2911                           ;main.c: 336: if(tecla()==1){
  2912  007F9E  EC6E  F02F         	call	_tecla	;wreg free
  2913  007FA2  06E8               	decf	wreg,f,c
  2914  007FA4  A4D8               	btfss	status,2,c
  2915  007FA6  0012               	return	
  2916  007FA8  D5EA               	goto	l4889
  2917  007FAA                     l4951:
  2918  007FAA  C068  F0F4         	movff	_casosMenu,??_mefMenu
  2919  007FAE  C069  F0F5         	movff	_casosMenu+1,??_mefMenu+1
  2920  007FB2  C06A  F0F6         	movff	_casosMenu+2,??_mefMenu+2
  2921  007FB6  C06B  F0F7         	movff	_casosMenu+3,??_mefMenu+3
  2922                           
  2923                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  2924                           ; Switch size 1, requested type "simple"
  2925                           ; Number of cases is 1, Range of values is 0 to 0
  2926                           ; switch strategies available:
  2927                           ; Name         Instructions Cycles
  2928                           ; simple_byte            4     3 (average)
  2929                           ;	Chosen strategy is simple_byte
  2930  007FBA  0100               	movlb	0	; () banked
  2931  007FBC  51F7               	movf	(??_mefMenu+3)& (0+255),w,b
  2932  007FBE  0A00               	xorlw	0	; case 0
  2933  007FC0  A4D8               	btfss	status,2,c
  2934  007FC2  0012               	return	
  2935  007FC4  D018               	goto	l5741
  2936  007FC6                     l5739:
  2937                           
  2938                           ; BSR set to: 0
  2939                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2940                           ; Switch size 1, requested type "simple"
  2941                           ; Number of cases is 1, Range of values is 0 to 0
  2942                           ; switch strategies available:
  2943                           ; Name         Instructions Cycles
  2944                           ; simple_byte            4     3 (average)
  2945                           ;	Chosen strategy is simple_byte
  2946  007FC6  51F5               	movf	(??_mefMenu+1)& (0+255),w,b
  2947  007FC8  0A00               	xorlw	0	; case 0
  2948  007FCA  A4D8               	btfss	status,2,c
  2949  007FCC  0012               	return	
  2950                           
  2951                           ; BSR set to: 0
  2952                           ; Switch size 1, requested type "simple"
  2953                           ; Number of cases is 5, Range of values is 0 to 4
  2954                           ; switch strategies available:
  2955                           ; Name         Instructions Cycles
  2956                           ; simple_byte           16     9 (average)
  2957                           ;	Chosen strategy is simple_byte
  2958  007FCE  51F4               	movf	??_mefMenu& (0+255),w,b
  2959  007FD0  0A00               	xorlw	0	; case 0
  2960  007FD2  B4D8               	btfsc	status,2,c
  2961  007FD4  EF6E  F037         	goto	l4749
  2962  007FD8  0A01               	xorlw	1	; case 1
  2963  007FDA  B4D8               	btfsc	status,2,c
  2964  007FDC  EF86  F039         	goto	l4809
  2965  007FE0  0A03               	xorlw	3	; case 2
  2966  007FE2  B4D8               	btfsc	status,2,c
  2967  007FE4  EF9E  F03B         	goto	l4847
  2968  007FE8  0A01               	xorlw	1	; case 3
  2969  007FEA  B4D8               	btfsc	status,2,c
  2970  007FEC  D5BF               	goto	l4885
  2971  007FEE  0A07               	xorlw	7	; case 4
  2972  007FF0  A4D8               	btfss	status,2,c
  2973  007FF2  0012               	return	
  2974  007FF4  D5CE               	goto	l4891
  2975  007FF6                     l5741:
  2976                           
  2977                           ; BSR set to: 0
  2978                           ; Switch size 1, requested type "simple"
  2979                           ; Number of cases is 1, Range of values is 0 to 0
  2980                           ; switch strategies available:
  2981                           ; Name         Instructions Cycles
  2982                           ; simple_byte            4     3 (average)
  2983                           ;	Chosen strategy is simple_byte
  2984  007FF6  51F6               	movf	(??_mefMenu+2)& (0+255),w,b
  2985  007FF8  0A00               	xorlw	0	; case 0
  2986  007FFA  A4D8               	btfss	status,2,c
  2987  007FFC  0012               	return	
  2988  007FFE  D7E3               	goto	l5739
  2989  008000                     __end_of_mefMenu:
  2990                           	opt callstack 0
  2991                           
  2992 ;; *************** function _tecla *****************
  2993 ;; Defined at:
  2994 ;;		line 53 in file "teclado.c"
  2995 ;; Parameters:    Size  Location     Type
  2996 ;;		None
  2997 ;; Auto vars:     Size  Location     Type
  2998 ;;  tecla_KB        1    2[COMRAM] unsigned char 
  2999 ;; Return value:  Size  Location     Type
  3000 ;;                  1    wreg      unsigned char 
  3001 ;; Registers used:
  3002 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  3003 ;; Tracked objects:
  3004 ;;		On entry : 0/0
  3005 ;;		On exit  : 0/0
  3006 ;;		Unchanged: 0/0
  3007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3008 ;;      Params:         0       0       0       0       0       0       0       0       0
  3009 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3010 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3011 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3012 ;;Total ram usage:        3 bytes
  3013 ;; Hardware stack levels used:    1
  3014 ;; Hardware stack levels required when called:    2
  3015 ;; This function calls:
  3016 ;;		Nothing
  3017 ;; This function is called by:
  3018 ;;		_mefMenu
  3019 ;; This function uses a non-reentrant model
  3020 ;;
  3021                           
  3022                           	psect	text3
  3023  005EDC                     __ptext3:
  3024                           	opt callstack 0
  3025  005EDC                     _tecla:
  3026                           	opt callstack 27
  3027                           
  3028                           ;teclado.c: 54: static unsigned char status_KB = KB_LIBRE;;teclado.c: 55: unsigned char 
      +                          tecla_KB = 0xFF;
  3029                           
  3030                           ;incstack = 0
  3031  005EDC  6803               	setf	tecla@tecla_KB,c
  3032                           
  3033                           ;teclado.c: 62: switch (status_KB) {
  3034  005EDE  D090               	goto	l4507
  3035  005EE0                     l4429:
  3036                           
  3037                           ; BSR set to: 0
  3038                           ;teclado.c: 65: if (flag_kb) {
  3039  005EE0  51C4               	movf	_flag_kb& (0+255),w,b	;volatile
  3040  005EE2  B4D8               	btfsc	status,2,c
  3041  005EE4  D09C               	goto	l4509
  3042                           
  3043                           ; BSR set to: 0
  3044                           ;teclado.c: 66: flag_kb = 0;
  3045  005EE6  0E00               	movlw	0
  3046  005EE8  6FC4               	movwf	_flag_kb& (0+255),b	;volatile
  3047                           
  3048                           ; BSR set to: 0
  3049                           ;teclado.c: 67: fila = 0xFF;
  3050  005EEA  69EB               	setf	_fila& (0+255),b
  3051                           
  3052                           ; BSR set to: 0
  3053                           ;teclado.c: 68: col = 0xFF;
  3054  005EEC  69EA               	setf	_col& (0+255),b
  3055                           
  3056                           ; BSR set to: 0
  3057                           ;teclado.c: 69: tecla_KB = 0xFF;
  3058  005EEE  6803               	setf	tecla@tecla_KB,c
  3059                           
  3060                           ;teclado.c: 70: delay_kb = 30;
  3061  005EF0  0E1E               	movlw	30
  3062  005EF2  6FC3               	movwf	_delay_kb& (0+255),b	;volatile
  3063                           
  3064                           ;teclado.c: 71: status_KB = KB_ESPERA;
  3065  005EF4  0E01               	movlw	1
  3066  005EF6  D019               	goto	L2
  3067  005EF8                     l4439:
  3068                           
  3069                           ; BSR set to: 0
  3070                           ;teclado.c: 79: if (!delay_kb) {
  3071  005EF8  51C3               	movf	_delay_kb& (0+255),w,b	;volatile
  3072  005EFA  A4D8               	btfss	status,2,c
  3073  005EFC  D090               	goto	l4509
  3074                           
  3075                           ; BSR set to: 0
  3076                           ;teclado.c: 80: status_KB = KB_DETECTA;
  3077  005EFE  0E02               	movlw	2
  3078  005F00  D014               	goto	L2
  3079  005F02                     l842:
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;teclado.c: 90: if (!PORTBbits.RB4) {
  3083  005F02  B881               	btfsc	3969,4,c	;volatile
  3084  005F04  D002               	goto	l843
  3085                           
  3086                           ; BSR set to: 0
  3087                           ;teclado.c: 91: fila = 0;
  3088  005F06  0E00               	movlw	0
  3089  005F08  D00B               	goto	L6
  3090  005F0A                     l843:
  3091                           
  3092                           ; BSR set to: 0
  3093  005F0A  BA81               	btfsc	3969,5,c	;volatile
  3094  005F0C  D002               	goto	l845
  3095                           
  3096                           ; BSR set to: 0
  3097                           ;teclado.c: 94: fila = 1;
  3098  005F0E  0E01               	movlw	1
  3099  005F10  D007               	goto	L6
  3100  005F12                     l845:
  3101                           
  3102                           ; BSR set to: 0
  3103  005F12  BC81               	btfsc	3969,6,c	;volatile
  3104  005F14  D002               	goto	l847
  3105                           
  3106                           ; BSR set to: 0
  3107                           ;teclado.c: 97: fila = 2;
  3108  005F16  0E02               	movlw	2
  3109  005F18  D003               	goto	L6
  3110  005F1A                     l847:
  3111                           
  3112                           ; BSR set to: 0
  3113  005F1A  BE81               	btfsc	3969,7,c	;volatile
  3114  005F1C  D002               	goto	l846
  3115                           
  3116                           ; BSR set to: 0
  3117                           ;teclado.c: 100: fila = 3;
  3118  005F1E  0E03               	movlw	3
  3119  005F20                     L6:
  3120  005F20  6FEB               	movwf	_fila& (0+255),b
  3121  005F22                     l846:
  3122                           
  3123                           ; BSR set to: 0
  3124                           ;teclado.c: 102: };teclado.c: 107: if (fila == 0xFF) {
  3125                           
  3126                           ; BSR set to: 0
  3127  005F22  29EB               	incf	_fila& (0+255),w,b
  3128  005F24  A4D8               	btfss	status,2,c
  3129  005F26  D003               	goto	l850
  3130  005F28                     u3890:
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;teclado.c: 108: status_KB = KB_LIBRE;
  3134  005F28  0E00               	movlw	0
  3135  005F2A                     L2:
  3136  005F2A  6FC2               	movwf	tecla@status_KB& (0+255),b
  3137                           
  3138                           ;teclado.c: 109: }
  3139  005F2C  D078               	goto	l4509
  3140  005F2E                     l850:
  3141                           
  3142                           ; BSR set to: 0
  3143                           ;teclado.c: 113: else {;teclado.c: 114: TRISBbits.RB0 = 1;
  3144  005F2E  8093               	bsf	3987,0,c	;volatile
  3145  005F30  F000               	nop		;# 
  3146  005F32  F000               	nop		;# 
  3147  005F34  F000               	nop		;# 
  3148  005F36  F000               	nop		;# 
  3149  005F38  F000               	nop		;# 
  3150  005F3A  F000               	nop		;# 
  3151  005F3C  F000               	nop		;# 
  3152  005F3E  F000               	nop		;# 
  3153  005F40  F000               	nop		;# 
  3154  005F42  F000               	nop		;# 
  3155                           
  3156                           ;teclado.c: 126: if (PORTBbits.RB4 && PORTBbits.RB5 && PORTBbits.RB6 && PORTBbits.RB7) {
  3157  005F44  B881               	btfsc	3969,4,c	;volatile
  3158  005F46  AA81               	btfss	3969,5,c	;volatile
  3159  005F48  D005               	goto	l852
  3160  005F4A  BC81               	btfsc	3969,6,c	;volatile
  3161  005F4C  AE81               	btfss	3969,7,c	;volatile
  3162  005F4E  D002               	goto	l852
  3163                           
  3164                           ;teclado.c: 127: col = 0;
  3165  005F50  0E00               	movlw	0
  3166  005F52  D025               	goto	L3
  3167  005F54                     l852:
  3168                           
  3169                           ;teclado.c: 132: TRISBbits.RB1 = 1;
  3170  005F54  8293               	bsf	3987,1,c	;volatile
  3171  005F56  F000               	nop		;# 
  3172  005F58  F000               	nop		;# 
  3173  005F5A  F000               	nop		;# 
  3174  005F5C  F000               	nop		;# 
  3175  005F5E  F000               	nop		;# 
  3176  005F60  F000               	nop		;# 
  3177  005F62  F000               	nop		;# 
  3178  005F64  F000               	nop		;# 
  3179  005F66  F000               	nop		;# 
  3180  005F68  F000               	nop		;# 
  3181                           
  3182                           ;teclado.c: 143: if (PORTBbits.RB4 && PORTBbits.RB5 && PORTBbits.RB6 && PORTBbits.RB7) {
  3183  005F6A  B881               	btfsc	3969,4,c	;volatile
  3184  005F6C  AA81               	btfss	3969,5,c	;volatile
  3185  005F6E  D005               	goto	l854
  3186  005F70  BC81               	btfsc	3969,6,c	;volatile
  3187  005F72  AE81               	btfss	3969,7,c	;volatile
  3188  005F74  D002               	goto	l854
  3189                           
  3190                           ;teclado.c: 144: col = 1;
  3191  005F76  0E01               	movlw	1
  3192  005F78  D012               	goto	L3
  3193  005F7A                     l854:
  3194                           
  3195                           ;teclado.c: 147: TRISBbits.RB2 = 1;
  3196  005F7A  8493               	bsf	3987,2,c	;volatile
  3197  005F7C  F000               	nop		;# 
  3198  005F7E  F000               	nop		;# 
  3199  005F80  F000               	nop		;# 
  3200  005F82  F000               	nop		;# 
  3201  005F84  F000               	nop		;# 
  3202  005F86  F000               	nop		;# 
  3203  005F88  F000               	nop		;# 
  3204  005F8A  F000               	nop		;# 
  3205  005F8C  F000               	nop		;# 
  3206  005F8E  F000               	nop		;# 
  3207                           
  3208                           ;teclado.c: 158: if (PORTBbits.RB4 && PORTBbits.RB5 && PORTBbits.RB6 && PORTBbits.RB7) {
  3209  005F90  B881               	btfsc	3969,4,c	;volatile
  3210  005F92  AA81               	btfss	3969,5,c	;volatile
  3211  005F94  D006               	goto	l4479
  3212  005F96  BC81               	btfsc	3969,6,c	;volatile
  3213  005F98  AE81               	btfss	3969,7,c	;volatile
  3214  005F9A  D003               	goto	l4479
  3215                           
  3216                           ;teclado.c: 159: col = 2;
  3217  005F9C  0E02               	movlw	2
  3218  005F9E                     L3:
  3219  005F9E  0100               	movlb	0	; () banked
  3220  005FA0  6FEA               	movwf	_col& (0+255),b
  3221  005FA2                     l4479:
  3222                           
  3223                           ;teclado.c: 161: };teclado.c: 162: };teclado.c: 163: };teclado.c: 165: TRISBbits.RB0 = 0
      +                          ;
  3224  005FA2  9093               	bcf	3987,0,c	;volatile
  3225                           
  3226                           ;teclado.c: 166: TRISBbits.RB1 = 0;
  3227  005FA4  9293               	bcf	3987,1,c	;volatile
  3228                           
  3229                           ;teclado.c: 167: TRISBbits.RB2 = 0;
  3230  005FA6  9493               	bcf	3987,2,c	;volatile
  3231                           
  3232                           ;teclado.c: 169: if (col == 0xFF) {
  3233  005FA8  0100               	movlb	0	; () banked
  3234  005FAA  29EA               	incf	_col& (0+255),w,b
  3235  005FAC  B4D8               	btfsc	status,2,c
  3236  005FAE  D7BC               	goto	u3890
  3237                           
  3238                           ; BSR set to: 0
  3239                           ;teclado.c: 177: else {;teclado.c: 178: delay_kb = 50;
  3240  005FB0  0E32               	movlw	50
  3241  005FB2  6FC3               	movwf	_delay_kb& (0+255),b	;volatile
  3242                           
  3243                           ;teclado.c: 179: status_KB = KB_LIBERA;
  3244  005FB4  0E03               	movlw	3
  3245  005FB6  6FC2               	movwf	tecla@status_KB& (0+255),b
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;teclado.c: 180: tecla_KB = teclas[fila][col];
  3249  005FB8  51EB               	movf	_fila& (0+255),w,b
  3250  005FBA  0D03               	mullw	3
  3251  005FBC  0E19               	movlw	low _teclas
  3252  005FBE  6E01               	movwf	??_tecla& (0+255),c
  3253  005FC0  0E20               	movlw	high _teclas
  3254  005FC2  6E02               	movwf	(??_tecla+1)& (0+255),c
  3255  005FC4  50F3               	movf	prodl,w,c
  3256  005FC6  2601               	addwf	??_tecla,f,c
  3257  005FC8  50F4               	movf	prodh,w,c
  3258  005FCA  2202               	addwfc	??_tecla+1,f,c
  3259  005FCC  51EA               	movf	_col& (0+255),w,b
  3260  005FCE  2601               	addwf	??_tecla,f,c
  3261  005FD0  0E00               	movlw	0
  3262  005FD2  2202               	addwfc	??_tecla+1,f,c
  3263  005FD4  C001  FFF6         	movff	??_tecla,tblptrl
  3264  005FD8  C002  FFF7         	movff	??_tecla+1,tblptrh
  3265  005FDC                     	if	0	;tblptru may be non-zero
  3266  005FDC                     	endif
  3267  005FDC                     	if	0	;tblptru may be non-zero
  3268  005FDC                     	endif
  3269  005FDC  0008               	tblrd		*
  3270  005FDE  CFF5 F003          	movff	tablat,tecla@tecla_KB
  3271  005FE2  D01D               	goto	l4509
  3272  005FE4                     l859:
  3273                           
  3274                           ; BSR set to: 0
  3275                           ;teclado.c: 188: if ((PORTBbits.RB4 && PORTBbits.RB5 && PORTBbits.RB6 && PORTBbits.RB7)&
      +                          &(!delay_kb)) status_KB = KB_LIBRE;
  3276  005FE4  B881               	btfsc	3969,4,c	;volatile
  3277                           
  3278                           ; BSR set to: 0
  3279  005FE6  AA81               	btfss	3969,5,c	;volatile
  3280  005FE8  D01A               	goto	l4509
  3281                           
  3282                           ; BSR set to: 0
  3283  005FEA  BC81               	btfsc	3969,6,c	;volatile
  3284                           
  3285                           ; BSR set to: 0
  3286  005FEC  AE81               	btfss	3969,7,c	;volatile
  3287  005FEE  D017               	goto	l4509
  3288                           
  3289                           ; BSR set to: 0
  3290  005FF0  51C3               	movf	_delay_kb& (0+255),w,b	;volatile
  3291  005FF2  B4D8               	btfsc	status,2,c
  3292  005FF4  D799               	goto	u3890
  3293  005FF6  D013               	goto	l4509
  3294  005FF8                     l861:
  3295                           
  3296                           ; BSR set to: 0
  3297                           ;teclado.c: 196: fila = 0xFF;
  3298  005FF8  69EB               	setf	_fila& (0+255),b
  3299                           
  3300                           ;teclado.c: 197: col = 0xFF;
  3301  005FFA  69EA               	setf	_col& (0+255),b
  3302                           
  3303                           ;teclado.c: 198: tecla_KB = 0xFF;
  3304  005FFC  6803               	setf	tecla@tecla_KB,c
  3305  005FFE  D794               	goto	u3890
  3306  006000                     l4507:
  3307  006000  0100               	movlb	0	; () banked
  3308  006002  51C2               	movf	tecla@status_KB& (0+255),w,b
  3309                           
  3310                           ; Switch size 1, requested type "simple"
  3311                           ; Number of cases is 4, Range of values is 0 to 3
  3312                           ; switch strategies available:
  3313                           ; Name         Instructions Cycles
  3314                           ; simple_byte           13     7 (average)
  3315                           ;	Chosen strategy is simple_byte
  3316  006004  0A00               	xorlw	0	; case 0
  3317  006006  B4D8               	btfsc	status,2,c
  3318  006008  D76B               	goto	l4429
  3319  00600A  0A01               	xorlw	1	; case 1
  3320  00600C  B4D8               	btfsc	status,2,c
  3321  00600E  D774               	goto	l4439
  3322  006010  0A03               	xorlw	3	; case 2
  3323  006012  B4D8               	btfsc	status,2,c
  3324  006014  D776               	goto	l842
  3325  006016  0A01               	xorlw	1	; case 3
  3326  006018  B4D8               	btfsc	status,2,c
  3327  00601A  D7E4               	goto	l859
  3328  00601C  D7ED               	goto	l861
  3329  00601E                     l4509:
  3330                           
  3331                           ; BSR set to: 0
  3332                           ;teclado.c: 203: return tecla_KB;
  3333  00601E  5003               	movf	tecla@tecla_KB,w,c
  3334                           
  3335                           ; BSR set to: 0
  3336  006020  0012               	return		;funcret
  3337  006022                     __end_of_tecla:
  3338                           	opt callstack 0
  3339                           
  3340 ;; *************** function _plomoPrecio *****************
  3341 ;; Defined at:
  3342 ;;		line 358 in file "main.c"
  3343 ;; Parameters:    Size  Location     Type
  3344 ;;		None
  3345 ;; Auto vars:     Size  Location     Type
  3346 ;;		None
  3347 ;; Return value:  Size  Location     Type
  3348 ;;                  4    0[COMRAM] long 
  3349 ;; Registers used:
  3350 ;;		wreg, status,2
  3351 ;; Tracked objects:
  3352 ;;		On entry : 0/0
  3353 ;;		On exit  : 0/0
  3354 ;;		Unchanged: 0/0
  3355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3356 ;;      Params:         4       0       0       0       0       0       0       0       0
  3357 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3358 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3359 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3360 ;;Total ram usage:        4 bytes
  3361 ;; Hardware stack levels used:    1
  3362 ;; Hardware stack levels required when called:    2
  3363 ;; This function calls:
  3364 ;;		Nothing
  3365 ;; This function is called by:
  3366 ;;		_mefMenu
  3367 ;; This function uses a non-reentrant model
  3368 ;;
  3369                           
  3370                           	psect	text4
  3371  0057F0                     __ptext4:
  3372                           	opt callstack 0
  3373  0057F0                     _plomoPrecio:
  3374                           	opt callstack 27
  3375                           
  3376                           ;main.c: 359: plomo_hoy = plomo * dolar_hoy;
  3377                           
  3378                           ; BSR set to: 0
  3379                           ;incstack = 0
  3380  0057F0  0E7F               	movlw	127
  3381  0057F2  0100               	movlb	0	; () banked
  3382  0057F4  6F6C               	movwf	_plomo_hoy& (0+255),b
  3383  0057F6  0E00               	movlw	0
  3384  0057F8  6F6D               	movwf	(_plomo_hoy+1)& (0+255),b
  3385  0057FA  0E00               	movlw	0
  3386  0057FC  6F6E               	movwf	(_plomo_hoy+2)& (0+255),b
  3387  0057FE  0E00               	movlw	0
  3388  005800  6F6F               	movwf	(_plomo_hoy+3)& (0+255),b
  3389                           
  3390                           ; BSR set to: 0
  3391                           ;main.c: 360: return plomo_hoy;
  3392  005802  0E7F               	movlw	127
  3393  005804  6E01               	movwf	?_plomoPrecio,c
  3394  005806  0E00               	movlw	0
  3395  005808  6E02               	movwf	?_plomoPrecio+1,c
  3396  00580A  0E00               	movlw	0
  3397  00580C  6E03               	movwf	?_plomoPrecio+2,c
  3398  00580E  0E00               	movlw	0
  3399  005810  6E04               	movwf	?_plomoPrecio+3,c
  3400                           
  3401                           ; BSR set to: 0
  3402  005812  0012               	return		;funcret
  3403  005814                     __end_of_plomoPrecio:
  3404                           	opt callstack 0
  3405                           
  3406 ;; *************** function _parpadeoLed *****************
  3407 ;; Defined at:
  3408 ;;		line 373 in file "main.c"
  3409 ;; Parameters:    Size  Location     Type
  3410 ;;		None
  3411 ;; Auto vars:     Size  Location     Type
  3412 ;;		None
  3413 ;; Return value:  Size  Location     Type
  3414 ;;                  1    wreg      void 
  3415 ;; Registers used:
  3416 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3417 ;; Tracked objects:
  3418 ;;		On entry : 0/0
  3419 ;;		On exit  : 0/0
  3420 ;;		Unchanged: 0/0
  3421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3422 ;;      Params:         0       0       0       0       0       0       0       0       0
  3423 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3424 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3425 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3426 ;;Total ram usage:        4 bytes
  3427 ;; Hardware stack levels used:    1
  3428 ;; Hardware stack levels required when called:    6
  3429 ;; This function calls:
  3430 ;;		_clear_LCD
  3431 ;;		_descomposicion
  3432 ;; This function is called by:
  3433 ;;		_mefMenu
  3434 ;; This function uses a non-reentrant model
  3435 ;;
  3436                           
  3437                           	psect	text5
  3438  0061AA                     __ptext5:
  3439                           	opt callstack 0
  3440  0061AA                     _parpadeoLed:
  3441                           	opt callstack 23
  3442                           
  3443                           ;main.c: 374: descomposicion();
  3444                           
  3445                           ; BSR set to: 0
  3446                           ;incstack = 0
  3447  0061AA  ECE7  F032         	call	_descomposicion	;wreg free
  3448                           
  3449                           ;main.c: 375: if (tiempo_ventana_peso != 0) {
  3450  0061AE  0100               	movlb	0	; () banked
  3451  0061B0  51E6               	movf	_tiempo_ventana_peso& (0+255),w,b
  3452  0061B2  11E7               	iorwf	(_tiempo_ventana_peso+1)& (0+255),w,b
  3453  0061B4  11E8               	iorwf	(_tiempo_ventana_peso+2)& (0+255),w,b
  3454  0061B6  11E9               	iorwf	(_tiempo_ventana_peso+3)& (0+255),w,b
  3455  0061B8  B4D8               	btfsc	status,2,c
  3456  0061BA  D0A8               	goto	l4573
  3457                           
  3458                           ; BSR set to: 0
  3459                           ;main.c: 376: activador_tiempo_ventana_peso = 1;
  3460  0061BC  0E01               	movlw	1
  3461  0061BE  6F64               	movwf	_activador_tiempo_ventana_peso& (0+255),b
  3462  0061C0  0E00               	movlw	0
  3463  0061C2  6F65               	movwf	(_activador_tiempo_ventana_peso+1)& (0+255),b
  3464  0061C4  0E00               	movlw	0
  3465  0061C6  6F66               	movwf	(_activador_tiempo_ventana_peso+2)& (0+255),b
  3466  0061C8  0E00               	movlw	0
  3467  0061CA  6F67               	movwf	(_activador_tiempo_ventana_peso+3)& (0+255),b
  3468                           
  3469                           ;main.c: 377: switch (casos_parpadeo) {
  3470  0061CC  D07C               	goto	l4571
  3471  0061CE                     l4525:
  3472                           
  3473                           ; BSR set to: 0
  3474                           ;main.c: 379: {;main.c: 380: if (tiempo_parpadeo_on != 0) {
  3475  0061CE  51E2               	movf	_tiempo_parpadeo_on& (0+255),w,b
  3476  0061D0  11E3               	iorwf	(_tiempo_parpadeo_on+1)& (0+255),w,b
  3477  0061D2  11E4               	iorwf	(_tiempo_parpadeo_on+2)& (0+255),w,b
  3478  0061D4  11E5               	iorwf	(_tiempo_parpadeo_on+3)& (0+255),w,b
  3479  0061D6  B4D8               	btfsc	status,2,c
  3480  0061D8  D009               	goto	l4531
  3481                           
  3482                           ; BSR set to: 0
  3483                           ;main.c: 382: activador_on = 1;
  3484  0061DA  0E01               	movlw	1
  3485  0061DC  6F60               	movwf	_activador_on& (0+255),b
  3486  0061DE  0E00               	movlw	0
  3487  0061E0  6F61               	movwf	(_activador_on+1)& (0+255),b
  3488  0061E2  0E00               	movlw	0
  3489  0061E4  6F62               	movwf	(_activador_on+2)& (0+255),b
  3490  0061E6  0E00               	movlw	0
  3491  0061E8  6F63               	movwf	(_activador_on+3)& (0+255),b
  3492                           
  3493                           ; BSR set to: 0
  3494                           ;main.c: 383: LATDbits.LD1 = 1;
  3495  0061EA  828C               	bsf	3980,1,c	;volatile
  3496  0061EC                     l4531:
  3497                           
  3498                           ; BSR set to: 0
  3499                           ;main.c: 385: };main.c: 386: if (tiempo_parpadeo_on == 0) {
  3500  0061EC  51E2               	movf	_tiempo_parpadeo_on& (0+255),w,b
  3501  0061EE  11E3               	iorwf	(_tiempo_parpadeo_on+1)& (0+255),w,b
  3502  0061F0  11E4               	iorwf	(_tiempo_parpadeo_on+2)& (0+255),w,b
  3503  0061F2  11E5               	iorwf	(_tiempo_parpadeo_on+3)& (0+255),w,b
  3504  0061F4  A4D8               	btfss	status,2,c
  3505  0061F6  D08A               	goto	l4573
  3506                           
  3507                           ; BSR set to: 0
  3508                           ;main.c: 387: activador_on = 0;
  3509  0061F8  0E00               	movlw	0
  3510  0061FA  6F60               	movwf	_activador_on& (0+255),b
  3511  0061FC  0E00               	movlw	0
  3512  0061FE  6F61               	movwf	(_activador_on+1)& (0+255),b
  3513  006200  0E00               	movlw	0
  3514  006202  6F62               	movwf	(_activador_on+2)& (0+255),b
  3515  006204  0E00               	movlw	0
  3516  006206  6F63               	movwf	(_activador_on+3)& (0+255),b
  3517                           
  3518                           ; BSR set to: 0
  3519                           ;main.c: 388: clear_LCD();
  3520  006208  EC32  F02C         	call	_clear_LCD	;wreg free
  3521                           
  3522                           ;main.c: 389: casos_parpadeo = 1;
  3523  00620C  0E01               	movlw	1
  3524  00620E  D052               	goto	L8
  3525  006210                     l4539:
  3526                           
  3527                           ; BSR set to: 0
  3528                           ;main.c: 394: {;main.c: 395: if (tiempo_parpadeo_on == 0) {
  3529  006210  51E2               	movf	_tiempo_parpadeo_on& (0+255),w,b
  3530  006212  11E3               	iorwf	(_tiempo_parpadeo_on+1)& (0+255),w,b
  3531  006214  11E4               	iorwf	(_tiempo_parpadeo_on+2)& (0+255),w,b
  3532  006216  11E5               	iorwf	(_tiempo_parpadeo_on+3)& (0+255),w,b
  3533  006218  A4D8               	btfss	status,2,c
  3534  00621A  D078               	goto	l4573
  3535                           
  3536                           ; BSR set to: 0
  3537                           ;main.c: 396: LATDbits.LD1 = 0;
  3538  00621C  928C               	bcf	3980,1,c	;volatile
  3539                           
  3540                           ; BSR set to: 0
  3541                           ;main.c: 397: clear_LCD();
  3542  00621E  EC32  F02C         	call	_clear_LCD	;wreg free
  3543                           
  3544                           ;main.c: 398: tiempo_parpadeo_on = 3;
  3545  006222  0E03               	movlw	3
  3546  006224  0100               	movlb	0	; () banked
  3547  006226  6FE2               	movwf	_tiempo_parpadeo_on& (0+255),b
  3548  006228  0E00               	movlw	0
  3549  00622A  6FE3               	movwf	(_tiempo_parpadeo_on+1)& (0+255),b
  3550  00622C  0E00               	movlw	0
  3551  00622E  6FE4               	movwf	(_tiempo_parpadeo_on+2)& (0+255),b
  3552  006230  0E00               	movlw	0
  3553  006232  6FE5               	movwf	(_tiempo_parpadeo_on+3)& (0+255),b
  3554                           
  3555                           ; BSR set to: 0
  3556                           ;main.c: 399: casos_parpadeo=2;
  3557  006234  0E02               	movlw	2
  3558  006236  D03E               	goto	L8
  3559  006238                     l4549:
  3560                           
  3561                           ; BSR set to: 0
  3562                           ;main.c: 405: {;main.c: 406: if(tiempo_parpadeo_off!=0){
  3563  006238  51DE               	movf	_tiempo_parpadeo_off& (0+255),w,b
  3564  00623A  11DF               	iorwf	(_tiempo_parpadeo_off+1)& (0+255),w,b
  3565  00623C  11E0               	iorwf	(_tiempo_parpadeo_off+2)& (0+255),w,b
  3566  00623E  11E1               	iorwf	(_tiempo_parpadeo_off+3)& (0+255),w,b
  3567  006240  B4D8               	btfsc	status,2,c
  3568  006242  D00A               	goto	l4555
  3569                           
  3570                           ; BSR set to: 0
  3571                           ;main.c: 407: activador_off=1;
  3572  006244  0E01               	movlw	1
  3573  006246  0101               	movlb	1	; () banked
  3574  006248  6F20               	movwf	_activador_off& (0+255),b
  3575  00624A  0E00               	movlw	0
  3576  00624C  6F21               	movwf	(_activador_off+1)& (0+255),b
  3577  00624E  0E00               	movlw	0
  3578  006250  6F22               	movwf	(_activador_off+2)& (0+255),b
  3579  006252  0E00               	movlw	0
  3580  006254  6F23               	movwf	(_activador_off+3)& (0+255),b
  3581                           
  3582                           ; BSR set to: 1
  3583                           ;main.c: 408: LATDbits.LD0=1;
  3584  006256  808C               	bsf	3980,0,c	;volatile
  3585  006258                     l4555:
  3586                           
  3587                           ;main.c: 410: };main.c: 411: if(tiempo_parpadeo_off==0){
  3588  006258  0100               	movlb	0	; () banked
  3589  00625A  51DE               	movf	_tiempo_parpadeo_off& (0+255),w,b
  3590  00625C  11DF               	iorwf	(_tiempo_parpadeo_off+1)& (0+255),w,b
  3591  00625E  11E0               	iorwf	(_tiempo_parpadeo_off+2)& (0+255),w,b
  3592  006260  11E1               	iorwf	(_tiempo_parpadeo_off+3)& (0+255),w,b
  3593  006262  A4D8               	btfss	status,2,c
  3594  006264  D053               	goto	l4573
  3595                           
  3596                           ; BSR set to: 0
  3597                           ;main.c: 412: activador_off=0;
  3598  006266  0E00               	movlw	0
  3599  006268  0101               	movlb	1	; () banked
  3600  00626A  6F20               	movwf	_activador_off& (0+255),b
  3601  00626C  0E00               	movlw	0
  3602  00626E  6F21               	movwf	(_activador_off+1)& (0+255),b
  3603  006270  0E00               	movlw	0
  3604  006272  6F22               	movwf	(_activador_off+2)& (0+255),b
  3605  006274  0E00               	movlw	0
  3606  006276  6F23               	movwf	(_activador_off+3)& (0+255),b
  3607                           
  3608                           ;main.c: 413: casos_parpadeo=3;
  3609  006278  0E03               	movlw	3
  3610  00627A  6F1C               	movwf	_casos_parpadeo& (0+255),b
  3611  00627C  0E00               	movlw	0
  3612  00627E  6F1D               	movwf	(_casos_parpadeo+1)& (0+255),b
  3613  006280  0E00               	movlw	0
  3614  006282  6F1E               	movwf	(_casos_parpadeo+2)& (0+255),b
  3615  006284  0E00               	movlw	0
  3616  006286  6F1F               	movwf	(_casos_parpadeo+3)& (0+255),b
  3617                           
  3618                           ; BSR set to: 1
  3619                           ;main.c: 414: clear_LCD();
  3620  006288  EC32  F02C         	call	_clear_LCD	;wreg free
  3621  00628C  D03F               	goto	l4573
  3622  00628E                     l4561:
  3623                           
  3624                           ; BSR set to: 0
  3625                           ;main.c: 420: {;main.c: 421: if (tiempo_parpadeo_off == 0) {
  3626  00628E  51DE               	movf	_tiempo_parpadeo_off& (0+255),w,b
  3627  006290  11DF               	iorwf	(_tiempo_parpadeo_off+1)& (0+255),w,b
  3628  006292  11E0               	iorwf	(_tiempo_parpadeo_off+2)& (0+255),w,b
  3629  006294  11E1               	iorwf	(_tiempo_parpadeo_off+3)& (0+255),w,b
  3630  006296  A4D8               	btfss	status,2,c
  3631  006298  D039               	goto	l4573
  3632                           
  3633                           ; BSR set to: 0
  3634                           ;main.c: 422: LATDbits.LD0 = 0;
  3635  00629A  908C               	bcf	3980,0,c	;volatile
  3636                           
  3637                           ; BSR set to: 0
  3638                           ;main.c: 423: clear_LCD();
  3639  00629C  EC32  F02C         	call	_clear_LCD	;wreg free
  3640                           
  3641                           ;main.c: 424: tiempo_parpadeo_off = 3;
  3642  0062A0  0E03               	movlw	3
  3643  0062A2  0100               	movlb	0	; () banked
  3644  0062A4  6FDE               	movwf	_tiempo_parpadeo_off& (0+255),b
  3645  0062A6  0E00               	movlw	0
  3646  0062A8  6FDF               	movwf	(_tiempo_parpadeo_off+1)& (0+255),b
  3647  0062AA  0E00               	movlw	0
  3648  0062AC  6FE0               	movwf	(_tiempo_parpadeo_off+2)& (0+255),b
  3649  0062AE  0E00               	movlw	0
  3650  0062B0  6FE1               	movwf	(_tiempo_parpadeo_off+3)& (0+255),b
  3651                           
  3652                           ; BSR set to: 0
  3653                           ;main.c: 425: casos_parpadeo=0;
  3654  0062B2  0E00               	movlw	0
  3655  0062B4                     L8:
  3656  0062B4  0101               	movlb	1	; () banked
  3657  0062B6  6F1C               	movwf	_casos_parpadeo& (0+255),b
  3658  0062B8  0E00               	movlw	0
  3659  0062BA  6F1D               	movwf	(_casos_parpadeo+1)& (0+255),b
  3660  0062BC  0E00               	movlw	0
  3661  0062BE  6F1E               	movwf	(_casos_parpadeo+2)& (0+255),b
  3662  0062C0  0E00               	movlw	0
  3663  0062C2  6F1F               	movwf	(_casos_parpadeo+3)& (0+255),b
  3664  0062C4  D023               	goto	l4573
  3665  0062C6                     l4571:
  3666                           
  3667                           ; BSR set to: 0
  3668  0062C6  C11C  F05B         	movff	_casos_parpadeo,??_parpadeoLed
  3669  0062CA  C11D  F05C         	movff	_casos_parpadeo+1,??_parpadeoLed+1
  3670  0062CE  C11E  F05D         	movff	_casos_parpadeo+2,??_parpadeoLed+2
  3671  0062D2  C11F  F05E         	movff	_casos_parpadeo+3,??_parpadeoLed+3
  3672                           
  3673                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  3674                           ; Switch size 1, requested type "simple"
  3675                           ; Number of cases is 1, Range of values is 0 to 0
  3676                           ; switch strategies available:
  3677                           ; Name         Instructions Cycles
  3678                           ; simple_byte            4     3 (average)
  3679                           ;	Chosen strategy is simple_byte
  3680  0062D6  505E               	movf	??_parpadeoLed+3,w,c
  3681  0062D8  0A00               	xorlw	0	; case 0
  3682  0062DA  B4D8               	btfsc	status,2,c
  3683  0062DC  D013               	goto	l5747
  3684  0062DE  D016               	goto	l4573
  3685  0062E0                     l5745:
  3686                           
  3687                           ; BSR set to: 0
  3688                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3689                           ; Switch size 1, requested type "simple"
  3690                           ; Number of cases is 1, Range of values is 0 to 0
  3691                           ; switch strategies available:
  3692                           ; Name         Instructions Cycles
  3693                           ; simple_byte            4     3 (average)
  3694                           ;	Chosen strategy is simple_byte
  3695  0062E0  505C               	movf	??_parpadeoLed+1,w,c
  3696  0062E2  0A00               	xorlw	0	; case 0
  3697  0062E4  A4D8               	btfss	status,2,c
  3698  0062E6  D012               	goto	l4573
  3699                           
  3700                           ; BSR set to: 0
  3701                           ; Switch size 1, requested type "simple"
  3702                           ; Number of cases is 4, Range of values is 0 to 3
  3703                           ; switch strategies available:
  3704                           ; Name         Instructions Cycles
  3705                           ; simple_byte           13     7 (average)
  3706                           ;	Chosen strategy is simple_byte
  3707  0062E8  505B               	movf	??_parpadeoLed,w,c
  3708  0062EA  0A00               	xorlw	0	; case 0
  3709  0062EC  B4D8               	btfsc	status,2,c
  3710  0062EE  D76F               	goto	l4525
  3711  0062F0  0A01               	xorlw	1	; case 1
  3712  0062F2  B4D8               	btfsc	status,2,c
  3713  0062F4  D78D               	goto	l4539
  3714  0062F6  0A03               	xorlw	3	; case 2
  3715  0062F8  B4D8               	btfsc	status,2,c
  3716  0062FA  D79E               	goto	l4549
  3717  0062FC  0A01               	xorlw	1	; case 3
  3718  0062FE  B4D8               	btfsc	status,2,c
  3719  006300  D7C6               	goto	l4561
  3720  006302  D004               	goto	l4573
  3721  006304                     l5747:
  3722                           
  3723                           ; BSR set to: 0
  3724                           ; Switch size 1, requested type "simple"
  3725                           ; Number of cases is 1, Range of values is 0 to 0
  3726                           ; switch strategies available:
  3727                           ; Name         Instructions Cycles
  3728                           ; simple_byte            4     3 (average)
  3729                           ;	Chosen strategy is simple_byte
  3730  006304  505D               	movf	??_parpadeoLed+2,w,c
  3731  006306  0A00               	xorlw	0	; case 0
  3732  006308  B4D8               	btfsc	status,2,c
  3733  00630A  D7EA               	goto	l5745
  3734  00630C                     l4573:
  3735                           
  3736                           ;main.c: 429: };main.c: 430: if(tiempo_ventana_peso==0){
  3737  00630C  0100               	movlb	0	; () banked
  3738  00630E  51E6               	movf	_tiempo_ventana_peso& (0+255),w,b
  3739  006310  11E7               	iorwf	(_tiempo_ventana_peso+1)& (0+255),w,b
  3740  006312  11E8               	iorwf	(_tiempo_ventana_peso+2)& (0+255),w,b
  3741  006314  11E9               	iorwf	(_tiempo_ventana_peso+3)& (0+255),w,b
  3742  006316  A4D8               	btfss	status,2,c
  3743  006318  0012               	return	
  3744                           
  3745                           ; BSR set to: 0
  3746                           ;main.c: 431: activador_tiempo_ventana_peso=0;
  3747  00631A  0E00               	movlw	0
  3748  00631C  6F64               	movwf	_activador_tiempo_ventana_peso& (0+255),b
  3749  00631E  0E00               	movlw	0
  3750  006320  6F65               	movwf	(_activador_tiempo_ventana_peso+1)& (0+255),b
  3751  006322  0E00               	movlw	0
  3752  006324  6F66               	movwf	(_activador_tiempo_ventana_peso+2)& (0+255),b
  3753  006326  0E00               	movlw	0
  3754  006328  6F67               	movwf	(_activador_tiempo_ventana_peso+3)& (0+255),b
  3755                           
  3756                           ; BSR set to: 0
  3757                           ;main.c: 432: LATDbits.LD1=0;
  3758  00632A  928C               	bcf	3980,1,c	;volatile
  3759                           
  3760                           ; BSR set to: 0
  3761                           ;main.c: 433: LATDbits.LD0=0;
  3762  00632C  908C               	bcf	3980,0,c	;volatile
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;main.c: 434: clear_LCD();
  3766  00632E  EC32  F02C         	call	_clear_LCD	;wreg free
  3767                           
  3768                           ;main.c: 435: casosMenu=4;
  3769  006332  0E04               	movlw	4
  3770  006334  0100               	movlb	0	; () banked
  3771  006336  6F68               	movwf	_casosMenu& (0+255),b
  3772  006338  0E00               	movlw	0
  3773  00633A  6F69               	movwf	(_casosMenu+1)& (0+255),b
  3774  00633C  0E00               	movlw	0
  3775  00633E  6F6A               	movwf	(_casosMenu+2)& (0+255),b
  3776  006340  0E00               	movlw	0
  3777  006342  6F6B               	movwf	(_casosMenu+3)& (0+255),b
  3778                           
  3779                           ; BSR set to: 0
  3780  006344  0012               	return		;funcret
  3781  006346                     __end_of_parpadeoLed:
  3782                           	opt callstack 0
  3783                           
  3784 ;; *************** function _descomposicion *****************
  3785 ;; Defined at:
  3786 ;;		line 439 in file "main.c"
  3787 ;; Parameters:    Size  Location     Type
  3788 ;;		None
  3789 ;; Auto vars:     Size  Location     Type
  3790 ;;		None
  3791 ;; Return value:  Size  Location     Type
  3792 ;;                  1    wreg      void 
  3793 ;; Registers used:
  3794 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3795 ;; Tracked objects:
  3796 ;;		On entry : 0/0
  3797 ;;		On exit  : 0/0
  3798 ;;		Unchanged: 0/0
  3799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3800 ;;      Params:         0       0       0       0       0       0       0       0       0
  3801 ;;      Locals:        12       0       0       0       0       0       0       0       0
  3802 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3803 ;;      Totals:        12       0       0       0       0       0       0       0       0
  3804 ;;Total ram usage:       12 bytes
  3805 ;; Hardware stack levels used:    1
  3806 ;; Hardware stack levels required when called:    5
  3807 ;; This function calls:
  3808 ;;		___aldiv
  3809 ;;		___almod
  3810 ;;		___fladd
  3811 ;;		___fltol
  3812 ;;		___xxtofl
  3813 ;;		_char2LCD
  3814 ;;		_msg2LCD
  3815 ;;		_readADC
  3816 ;;		_set_CURSOR
  3817 ;; This function is called by:
  3818 ;;		_mefMenu
  3819 ;;		_parpadeoLed
  3820 ;; This function uses a non-reentrant model
  3821 ;;
  3822                           
  3823                           	psect	text6
  3824  0065CE                     __ptext6:
  3825                           	opt callstack 0
  3826  0065CE                     _descomposicion:
  3827                           	opt callstack 23
  3828                           
  3829                           ;main.c: 440: set_CURSOR(0xB);
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;incstack = 0
  3833  0065CE  0E0B               	movlw	11
  3834  0065D0  EC6B  F02C         	call	_set_CURSOR
  3835                           
  3836                           ;main.c: 441: cen_kg = (readADC() % 1000) / 100;
  3837  0065D4  0E64               	movlw	100
  3838  0065D6  6E45               	movwf	___aldiv@divisor,c
  3839  0065D8  0E00               	movlw	0
  3840  0065DA  6E46               	movwf	___aldiv@divisor+1,c
  3841  0065DC  0E00               	movlw	0
  3842  0065DE  6E47               	movwf	___aldiv@divisor+2,c
  3843  0065E0  0E00               	movlw	0
  3844  0065E2  6E48               	movwf	___aldiv@divisor+3,c
  3845  0065E4  0EE8               	movlw	232
  3846  0065E6  6E3B               	movwf	___almod@divisor,c
  3847  0065E8  0E03               	movlw	3
  3848  0065EA  6E3C               	movwf	___almod@divisor+1,c
  3849  0065EC  0E00               	movlw	0
  3850  0065EE  6E3D               	movwf	___almod@divisor+2,c
  3851  0065F0  0E00               	movlw	0
  3852  0065F2  6E3E               	movwf	___almod@divisor+3,c
  3853  0065F4  EC0B  F02D         	call	_readADC	;wreg free
  3854  0065F8  C033  F037         	movff	?_readADC,___almod@dividend
  3855  0065FC  C034  F038         	movff	?_readADC+1,___almod@dividend+1
  3856  006600  C035  F039         	movff	?_readADC+2,___almod@dividend+2
  3857  006604  C036  F03A         	movff	?_readADC+3,___almod@dividend+3
  3858  006608  EC5D  F02D         	call	___almod	;wreg free
  3859  00660C  C037  F041         	movff	?___almod,___aldiv@dividend
  3860  006610  C038  F042         	movff	?___almod+1,___aldiv@dividend+1
  3861  006614  C039  F043         	movff	?___almod+2,___aldiv@dividend+2
  3862  006618  C03A  F044         	movff	?___almod+3,___aldiv@dividend+3
  3863  00661C  EC68  F02E         	call	___aldiv	;wreg free
  3864  006620  C041  F04F         	movff	?___aldiv,_descomposicion$2616
  3865  006624  C042  F050         	movff	?___aldiv+1,_descomposicion$2616+1
  3866  006628  C043  F051         	movff	?___aldiv+2,_descomposicion$2616+2
  3867  00662C  C044  F052         	movff	?___aldiv+3,_descomposicion$2616+3
  3868                           
  3869                           ;main.c: 441: cen_kg = (readADC() % 1000) / 100;
  3870  006630  C04F  F007         	movff	_descomposicion$2616,___xxtofl@val
  3871  006634  C050  F008         	movff	_descomposicion$2616+1,___xxtofl@val+1
  3872  006638  C051  F009         	movff	_descomposicion$2616+2,___xxtofl@val+2
  3873  00663C  C052  F00A         	movff	_descomposicion$2616+3,___xxtofl@val+3
  3874  006640  0E01               	movlw	1
  3875  006642  ECCE  F02E         	call	___xxtofl
  3876  006646  C007  F10C         	movff	?___xxtofl,_cen_kg
  3877  00664A  C008  F10D         	movff	?___xxtofl+1,_cen_kg+1
  3878  00664E  C009  F10E         	movff	?___xxtofl+2,_cen_kg+2
  3879  006652  C00A  F10F         	movff	?___xxtofl+3,_cen_kg+3
  3880                           
  3881                           ;main.c: 442: dec_kg = ((readADC() % 1000) % 100) / 10;
  3882  006656  0EE8               	movlw	232
  3883  006658  6E3B               	movwf	___almod@divisor,c
  3884  00665A  0E03               	movlw	3
  3885  00665C  6E3C               	movwf	___almod@divisor+1,c
  3886  00665E  0E00               	movlw	0
  3887  006660  6E3D               	movwf	___almod@divisor+2,c
  3888  006662  0E00               	movlw	0
  3889  006664  6E3E               	movwf	___almod@divisor+3,c
  3890  006666  EC0B  F02D         	call	_readADC	;wreg free
  3891  00666A  C033  F037         	movff	?_readADC,___almod@dividend
  3892  00666E  C034  F038         	movff	?_readADC+1,___almod@dividend+1
  3893  006672  C035  F039         	movff	?_readADC+2,___almod@dividend+2
  3894  006676  C036  F03A         	movff	?_readADC+3,___almod@dividend+3
  3895  00667A  EC5D  F02D         	call	___almod	;wreg free
  3896  00667E  C037  F057         	movff	?___almod,_descomposicion$2617
  3897  006682  C038  F058         	movff	?___almod+1,_descomposicion$2617+1
  3898  006686  C039  F059         	movff	?___almod+2,_descomposicion$2617+2
  3899  00668A  C03A  F05A         	movff	?___almod+3,_descomposicion$2617+3
  3900                           
  3901                           ;main.c: 442: dec_kg = ((readADC() % 1000) % 100) / 10;
  3902  00668E  0E0A               	movlw	10
  3903  006690  6E45               	movwf	___aldiv@divisor,c
  3904  006692  0E00               	movlw	0
  3905  006694  6E46               	movwf	___aldiv@divisor+1,c
  3906  006696  0E00               	movlw	0
  3907  006698  6E47               	movwf	___aldiv@divisor+2,c
  3908  00669A  0E00               	movlw	0
  3909  00669C  6E48               	movwf	___aldiv@divisor+3,c
  3910  00669E  0E64               	movlw	100
  3911  0066A0  6E3B               	movwf	___almod@divisor,c
  3912  0066A2  0E00               	movlw	0
  3913  0066A4  6E3C               	movwf	___almod@divisor+1,c
  3914  0066A6  0E00               	movlw	0
  3915  0066A8  6E3D               	movwf	___almod@divisor+2,c
  3916  0066AA  0E00               	movlw	0
  3917  0066AC  6E3E               	movwf	___almod@divisor+3,c
  3918  0066AE  C057  F037         	movff	_descomposicion$2617,___almod@dividend
  3919  0066B2  C058  F038         	movff	_descomposicion$2617+1,___almod@dividend+1
  3920  0066B6  C059  F039         	movff	_descomposicion$2617+2,___almod@dividend+2
  3921  0066BA  C05A  F03A         	movff	_descomposicion$2617+3,___almod@dividend+3
  3922  0066BE  EC5D  F02D         	call	___almod	;wreg free
  3923  0066C2  C037  F041         	movff	?___almod,___aldiv@dividend
  3924  0066C6  C038  F042         	movff	?___almod+1,___aldiv@dividend+1
  3925  0066CA  C039  F043         	movff	?___almod+2,___aldiv@dividend+2
  3926  0066CE  C03A  F044         	movff	?___almod+3,___aldiv@dividend+3
  3927  0066D2  EC68  F02E         	call	___aldiv	;wreg free
  3928  0066D6  C041  F007         	movff	?___aldiv,___xxtofl@val
  3929  0066DA  C042  F008         	movff	?___aldiv+1,___xxtofl@val+1
  3930  0066DE  C043  F009         	movff	?___aldiv+2,___xxtofl@val+2
  3931  0066E2  C044  F00A         	movff	?___aldiv+3,___xxtofl@val+3
  3932  0066E6  0E01               	movlw	1
  3933  0066E8  ECCE  F02E         	call	___xxtofl
  3934  0066EC  C007  F108         	movff	?___xxtofl,_dec_kg
  3935  0066F0  C008  F109         	movff	?___xxtofl+1,_dec_kg+1
  3936  0066F4  C009  F10A         	movff	?___xxtofl+2,_dec_kg+2
  3937  0066F8  C00A  F10B         	movff	?___xxtofl+3,_dec_kg+3
  3938                           
  3939                           ;main.c: 443: uni_kg = ((readADC() % 1000) % 100) % 10;
  3940  0066FC  0EE8               	movlw	232
  3941  0066FE  6E3B               	movwf	___almod@divisor,c
  3942  006700  0E03               	movlw	3
  3943  006702  6E3C               	movwf	___almod@divisor+1,c
  3944  006704  0E00               	movlw	0
  3945  006706  6E3D               	movwf	___almod@divisor+2,c
  3946  006708  0E00               	movlw	0
  3947  00670A  6E3E               	movwf	___almod@divisor+3,c
  3948  00670C  EC0B  F02D         	call	_readADC	;wreg free
  3949  006710  C033  F037         	movff	?_readADC,___almod@dividend
  3950  006714  C034  F038         	movff	?_readADC+1,___almod@dividend+1
  3951  006718  C035  F039         	movff	?_readADC+2,___almod@dividend+2
  3952  00671C  C036  F03A         	movff	?_readADC+3,___almod@dividend+3
  3953  006720  EC5D  F02D         	call	___almod	;wreg free
  3954  006724  C037  F057         	movff	?___almod,_descomposicion$2617
  3955  006728  C038  F058         	movff	?___almod+1,_descomposicion$2617+1
  3956  00672C  C039  F059         	movff	?___almod+2,_descomposicion$2617+2
  3957  006730  C03A  F05A         	movff	?___almod+3,_descomposicion$2617+3
  3958                           
  3959                           ;main.c: 443: uni_kg = ((readADC() % 1000) % 100) % 10;
  3960  006734  0E64               	movlw	100
  3961  006736  6E3B               	movwf	___almod@divisor,c
  3962  006738  0E00               	movlw	0
  3963  00673A  6E3C               	movwf	___almod@divisor+1,c
  3964  00673C  0E00               	movlw	0
  3965  00673E  6E3D               	movwf	___almod@divisor+2,c
  3966  006740  0E00               	movlw	0
  3967  006742  6E3E               	movwf	___almod@divisor+3,c
  3968  006744  C057  F037         	movff	_descomposicion$2617,___almod@dividend
  3969  006748  C058  F038         	movff	_descomposicion$2617+1,___almod@dividend+1
  3970  00674C  C059  F039         	movff	_descomposicion$2617+2,___almod@dividend+2
  3971  006750  C05A  F03A         	movff	_descomposicion$2617+3,___almod@dividend+3
  3972  006754  EC5D  F02D         	call	___almod	;wreg free
  3973  006758  C037  F053         	movff	?___almod,_descomposicion$2618
  3974  00675C  C038  F054         	movff	?___almod+1,_descomposicion$2618+1
  3975  006760  C039  F055         	movff	?___almod+2,_descomposicion$2618+2
  3976  006764  C03A  F056         	movff	?___almod+3,_descomposicion$2618+3
  3977                           
  3978                           ;main.c: 443: uni_kg = ((readADC() % 1000) % 100) % 10;
  3979  006768  0E0A               	movlw	10
  3980  00676A  6E3B               	movwf	___almod@divisor,c
  3981  00676C  0E00               	movlw	0
  3982  00676E  6E3C               	movwf	___almod@divisor+1,c
  3983  006770  0E00               	movlw	0
  3984  006772  6E3D               	movwf	___almod@divisor+2,c
  3985  006774  0E00               	movlw	0
  3986  006776  6E3E               	movwf	___almod@divisor+3,c
  3987  006778  C053  F037         	movff	_descomposicion$2618,___almod@dividend
  3988  00677C  C054  F038         	movff	_descomposicion$2618+1,___almod@dividend+1
  3989  006780  C055  F039         	movff	_descomposicion$2618+2,___almod@dividend+2
  3990  006784  C056  F03A         	movff	_descomposicion$2618+3,___almod@dividend+3
  3991  006788  EC5D  F02D         	call	___almod	;wreg free
  3992  00678C  C037  F007         	movff	?___almod,___xxtofl@val
  3993  006790  C038  F008         	movff	?___almod+1,___xxtofl@val+1
  3994  006794  C039  F009         	movff	?___almod+2,___xxtofl@val+2
  3995  006798  C03A  F00A         	movff	?___almod+3,___xxtofl@val+3
  3996  00679C  0E01               	movlw	1
  3997  00679E  ECCE  F02E         	call	___xxtofl
  3998  0067A2  C007  F104         	movff	?___xxtofl,_uni_kg
  3999  0067A6  C008  F105         	movff	?___xxtofl+1,_uni_kg+1
  4000  0067AA  C009  F106         	movff	?___xxtofl+2,_uni_kg+2
  4001  0067AE  C00A  F107         	movff	?___xxtofl+3,_uni_kg+3
  4002                           
  4003                           ;main.c: 446: char2LCD(cen_kg + 48);
  4004  0067B2  0E00               	movlw	0
  4005  0067B4  6E05               	movwf	___fladd@a,c
  4006  0067B6  0E00               	movlw	0
  4007  0067B8  6E06               	movwf	___fladd@a+1,c
  4008  0067BA  0E40               	movlw	64
  4009  0067BC  6E07               	movwf	___fladd@a+2,c
  4010  0067BE  0E42               	movlw	66
  4011  0067C0  6E08               	movwf	___fladd@a+3,c
  4012  0067C2  C10C  F001         	movff	_cen_kg,___fladd@b
  4013  0067C6  C10D  F002         	movff	_cen_kg+1,___fladd@b+1
  4014  0067CA  C10E  F003         	movff	_cen_kg+2,___fladd@b+2
  4015  0067CE  C10F  F004         	movff	_cen_kg+3,___fladd@b+3
  4016  0067D2  EC3D  F034         	call	___fladd	;wreg free
  4017  0067D6  C001  F011         	movff	?___fladd,___fltol@f1
  4018  0067DA  C002  F012         	movff	?___fladd+1,___fltol@f1+1
  4019  0067DE  C003  F013         	movff	?___fladd+2,___fltol@f1+2
  4020  0067E2  C004  F014         	movff	?___fladd+3,___fltol@f1+3
  4021  0067E6  EC0B  F02E         	call	___fltol	;wreg free
  4022  0067EA  5011               	movf	?___fltol,w,c
  4023  0067EC  EC4E  F02C         	call	_char2LCD
  4024                           
  4025                           ;main.c: 447: char2LCD(dec_kg + 48);
  4026  0067F0  0E00               	movlw	0
  4027  0067F2  6E05               	movwf	___fladd@a,c
  4028  0067F4  0E00               	movlw	0
  4029  0067F6  6E06               	movwf	___fladd@a+1,c
  4030  0067F8  0E40               	movlw	64
  4031  0067FA  6E07               	movwf	___fladd@a+2,c
  4032  0067FC  0E42               	movlw	66
  4033  0067FE  6E08               	movwf	___fladd@a+3,c
  4034  006800  C108  F001         	movff	_dec_kg,___fladd@b
  4035  006804  C109  F002         	movff	_dec_kg+1,___fladd@b+1
  4036  006808  C10A  F003         	movff	_dec_kg+2,___fladd@b+2
  4037  00680C  C10B  F004         	movff	_dec_kg+3,___fladd@b+3
  4038  006810  EC3D  F034         	call	___fladd	;wreg free
  4039  006814  C001  F011         	movff	?___fladd,___fltol@f1
  4040  006818  C002  F012         	movff	?___fladd+1,___fltol@f1+1
  4041  00681C  C003  F013         	movff	?___fladd+2,___fltol@f1+2
  4042  006820  C004  F014         	movff	?___fladd+3,___fltol@f1+3
  4043  006824  EC0B  F02E         	call	___fltol	;wreg free
  4044  006828  5011               	movf	?___fltol,w,c
  4045  00682A  EC4E  F02C         	call	_char2LCD
  4046                           
  4047                           ;main.c: 448: char2LCD(uni_kg + 48);
  4048  00682E  0E00               	movlw	0
  4049  006830  6E05               	movwf	___fladd@a,c
  4050  006832  0E00               	movlw	0
  4051  006834  6E06               	movwf	___fladd@a+1,c
  4052  006836  0E40               	movlw	64
  4053  006838  6E07               	movwf	___fladd@a+2,c
  4054  00683A  0E42               	movlw	66
  4055  00683C  6E08               	movwf	___fladd@a+3,c
  4056  00683E  C104  F001         	movff	_uni_kg,___fladd@b
  4057  006842  C105  F002         	movff	_uni_kg+1,___fladd@b+1
  4058  006846  C106  F003         	movff	_uni_kg+2,___fladd@b+2
  4059  00684A  C107  F004         	movff	_uni_kg+3,___fladd@b+3
  4060  00684E  EC3D  F034         	call	___fladd	;wreg free
  4061  006852  C001  F011         	movff	?___fladd,___fltol@f1
  4062  006856  C002  F012         	movff	?___fladd+1,___fltol@f1+1
  4063  00685A  C003  F013         	movff	?___fladd+2,___fltol@f1+2
  4064  00685E  C004  F014         	movff	?___fladd+3,___fltol@f1+3
  4065  006862  EC0B  F02E         	call	___fltol	;wreg free
  4066  006866  5011               	movf	?___fltol,w,c
  4067  006868  EC4E  F02C         	call	_char2LCD
  4068                           
  4069                           ;main.c: 450: msg2LCD("Kg");
  4070  00686C  0E7B               	movlw	low STR_13
  4071  00686E  6E03               	movwf	msg2LCD@datos,c
  4072  006870  0E20               	movlw	high STR_13
  4073  006872  6E04               	movwf	msg2LCD@datos+1,c
  4074  006874  ECAC  F02C         	call	_msg2LCD	;wreg free
  4075  006878  0012               	return		;funcret
  4076  00687A                     __end_of_descomposicion:
  4077                           	opt callstack 0
  4078                           
  4079 ;; *************** function _set_CURSOR *****************
  4080 ;; Defined at:
  4081 ;;		line 64 in file "lcd.c"
  4082 ;; Parameters:    Size  Location     Type
  4083 ;;  posi            1    wreg     unsigned char 
  4084 ;; Auto vars:     Size  Location     Type
  4085 ;;  posi            1    2[COMRAM] unsigned char 
  4086 ;;  i               4    3[COMRAM] unsigned long 
  4087 ;; Return value:  Size  Location     Type
  4088 ;;                  1    wreg      void 
  4089 ;; Registers used:
  4090 ;;		wreg, status,2, status,0, cstack
  4091 ;; Tracked objects:
  4092 ;;		On entry : 0/0
  4093 ;;		On exit  : 0/0
  4094 ;;		Unchanged: 0/0
  4095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4096 ;;      Params:         0       0       0       0       0       0       0       0       0
  4097 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4098 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4099 ;;      Totals:         5       0       0       0       0       0       0       0       0
  4100 ;;Total ram usage:        5 bytes
  4101 ;; Hardware stack levels used:    1
  4102 ;; Hardware stack levels required when called:    4
  4103 ;; This function calls:
  4104 ;;		_write_CMD
  4105 ;; This function is called by:
  4106 ;;		_mefMenu
  4107 ;;		_descomposicion
  4108 ;;		_demo_shield2_1
  4109 ;; This function uses a non-reentrant model
  4110 ;;
  4111                           
  4112                           	psect	text7
  4113  0058D6                     __ptext7:
  4114                           	opt callstack 0
  4115  0058D6                     _set_CURSOR:
  4116                           	opt callstack 25
  4117                           
  4118                           ;incstack = 0
  4119                           ;set_CURSOR@posi stored from wreg
  4120  0058D6  6E03               	movwf	set_CURSOR@posi,c
  4121                           
  4122                           ;lcd.c: 65: posi |= 0x80;
  4123  0058D8  8E03               	bsf	set_CURSOR@posi,7,c
  4124                           
  4125                           ;lcd.c: 66: write_CMD(posi);
  4126  0058DA  5003               	movf	set_CURSOR@posi,w,c
  4127  0058DC  EC65  F02B         	call	_write_CMD
  4128                           
  4129                           ;lcd.c: 68: for (unsigned long i = 0; i < 10000; i++);
  4130  0058E0  0E00               	movlw	0
  4131  0058E2  6E04               	movwf	set_CURSOR@i,c
  4132  0058E4  0E00               	movlw	0
  4133  0058E6  6E05               	movwf	set_CURSOR@i+1,c
  4134  0058E8  0E00               	movlw	0
  4135  0058EA  6E06               	movwf	set_CURSOR@i+2,c
  4136  0058EC  0E00               	movlw	0
  4137  0058EE  6E07               	movwf	set_CURSOR@i+3,c
  4138  0058F0                     l4075:
  4139  0058F0  0E01               	movlw	1
  4140  0058F2  2604               	addwf	set_CURSOR@i,f,c
  4141  0058F4  0E00               	movlw	0
  4142  0058F6  2205               	addwfc	set_CURSOR@i+1,f,c
  4143  0058F8  2206               	addwfc	set_CURSOR@i+2,f,c
  4144  0058FA  2207               	addwfc	set_CURSOR@i+3,f,c
  4145  0058FC  5007               	movf	set_CURSOR@i+3,w,c
  4146  0058FE  1006               	iorwf	set_CURSOR@i+2,w,c
  4147  005900  E107               	bnz	u3270
  4148  005902  0E10               	movlw	16
  4149  005904  5C04               	subwf	set_CURSOR@i,w,c
  4150  005906  0E27               	movlw	39
  4151  005908  5805               	subwfb	set_CURSOR@i+1,w,c
  4152  00590A  B0D8               	btfsc	status,0,c
  4153  00590C  0012               	return	
  4154  00590E  D7F0               	goto	l4075
  4155  005910                     u3270:
  4156  005910  0012               	return		;funcret
  4157  005912                     __end_of_set_CURSOR:
  4158                           	opt callstack 0
  4159                           
  4160 ;; *************** function _readADC *****************
  4161 ;; Defined at:
  4162 ;;		line 363 in file "main.c"
  4163 ;; Parameters:    Size  Location     Type
  4164 ;;		None
  4165 ;; Auto vars:     Size  Location     Type
  4166 ;;		None
  4167 ;; Return value:  Size  Location     Type
  4168 ;;                  4   50[COMRAM] long 
  4169 ;; Registers used:
  4170 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4171 ;; Tracked objects:
  4172 ;;		On entry : 0/0
  4173 ;;		On exit  : 0/0
  4174 ;;		Unchanged: 0/0
  4175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4176 ;;      Params:         4       0       0       0       0       0       0       0       0
  4177 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4178 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4179 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4180 ;;Total ram usage:        4 bytes
  4181 ;; Hardware stack levels used:    1
  4182 ;; Hardware stack levels required when called:    3
  4183 ;; This function calls:
  4184 ;;		___fldiv
  4185 ;;		___flmul
  4186 ;;		___fltol
  4187 ;;		___xxtofl
  4188 ;;		_obtener_ADC10
  4189 ;; This function is called by:
  4190 ;;		_descomposicion
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           	psect	text8
  4195  005A16                     __ptext8:
  4196                           	opt callstack 0
  4197  005A16                     _readADC:
  4198                           	opt callstack 24
  4199                           
  4200                           ;main.c: 364: guarda_ADC = obtener_ADC10();
  4201                           
  4202                           ;incstack = 0
  4203  005A16  EC89  F02C         	call	_obtener_ADC10	;wreg free
  4204  005A1A  C001  F007         	movff	?_obtener_ADC10,___xxtofl@val
  4205  005A1E  C002  F008         	movff	?_obtener_ADC10+1,___xxtofl@val+1
  4206  005A22  6A09               	clrf	___xxtofl@val+2,c
  4207  005A24  6A0A               	clrf	___xxtofl@val+3,c
  4208  005A26  0E00               	movlw	0
  4209  005A28  ECCE  F02E         	call	___xxtofl
  4210  005A2C  C007  F118         	movff	?___xxtofl,_guarda_ADC
  4211  005A30  C008  F119         	movff	?___xxtofl+1,_guarda_ADC+1
  4212  005A34  C009  F11A         	movff	?___xxtofl+2,_guarda_ADC+2
  4213  005A38  C00A  F11B         	movff	?___xxtofl+3,_guarda_ADC+3
  4214                           
  4215                           ;main.c: 365: kilos = (guarda_ADC * 999.9) / 1023;
  4216  005A3C  0E9A               	movlw	154
  4217  005A3E  6E05               	movwf	___flmul@a,c
  4218  005A40  0EF9               	movlw	249
  4219  005A42  6E06               	movwf	___flmul@a+1,c
  4220  005A44  0E79               	movlw	121
  4221  005A46  6E07               	movwf	___flmul@a+2,c
  4222  005A48  0E44               	movlw	68
  4223  005A4A  6E08               	movwf	___flmul@a+3,c
  4224  005A4C  C118  F001         	movff	_guarda_ADC,___flmul@b
  4225  005A50  C119  F002         	movff	_guarda_ADC+1,___flmul@b+1
  4226  005A54  C11A  F003         	movff	_guarda_ADC+2,___flmul@b+2
  4227  005A58  C11B  F004         	movff	_guarda_ADC+3,___flmul@b+3
  4228  005A5C  ECC3  F035         	call	___flmul	;wreg free
  4229  005A60  C001  F01A         	movff	?___flmul,___fldiv@b
  4230  005A64  C002  F01B         	movff	?___flmul+1,___fldiv@b+1
  4231  005A68  C003  F01C         	movff	?___flmul+2,___fldiv@b+2
  4232  005A6C  C004  F01D         	movff	?___flmul+3,___fldiv@b+3
  4233  005A70  0E00               	movlw	0
  4234  005A72  6E1E               	movwf	___fldiv@a,c
  4235  005A74  0EC0               	movlw	192
  4236  005A76  6E1F               	movwf	___fldiv@a+1,c
  4237  005A78  0E7F               	movlw	127
  4238  005A7A  6E20               	movwf	___fldiv@a+2,c
  4239  005A7C  0E44               	movlw	68
  4240  005A7E  6E21               	movwf	___fldiv@a+3,c
  4241  005A80  ECA3  F031         	call	___fldiv	;wreg free
  4242  005A84  C01A  F114         	movff	?___fldiv,_kilos
  4243  005A88  C01B  F115         	movff	?___fldiv+1,_kilos+1
  4244  005A8C  C01C  F116         	movff	?___fldiv+2,_kilos+2
  4245  005A90  C01D  F117         	movff	?___fldiv+3,_kilos+3
  4246                           
  4247                           ;main.c: 369: return kilos;
  4248  005A94  C114  F011         	movff	_kilos,___fltol@f1
  4249  005A98  C115  F012         	movff	_kilos+1,___fltol@f1+1
  4250  005A9C  C116  F013         	movff	_kilos+2,___fltol@f1+2
  4251  005AA0  C117  F014         	movff	_kilos+3,___fltol@f1+3
  4252  005AA4  EC0B  F02E         	call	___fltol	;wreg free
  4253  005AA8  C011  F033         	movff	?___fltol,?_readADC
  4254  005AAC  C012  F034         	movff	?___fltol+1,?_readADC+1
  4255  005AB0  C013  F035         	movff	?___fltol+2,?_readADC+2
  4256  005AB4  C014  F036         	movff	?___fltol+3,?_readADC+3
  4257  005AB8  0012               	return		;funcret
  4258  005ABA                     __end_of_readADC:
  4259                           	opt callstack 0
  4260                           
  4261 ;; *************** function _obtener_ADC10 *****************
  4262 ;; Defined at:
  4263 ;;		line 154 in file "Tecnica1.c"
  4264 ;; Parameters:    Size  Location     Type
  4265 ;;		None
  4266 ;; Auto vars:     Size  Location     Type
  4267 ;;  ad_res          2    4[COMRAM] unsigned int 
  4268 ;;  GuardoTrisa     1    3[COMRAM] unsigned char 
  4269 ;;  GuardoPorta     1    2[COMRAM] unsigned char 
  4270 ;; Return value:  Size  Location     Type
  4271 ;;                  2    0[COMRAM] unsigned int 
  4272 ;; Registers used:
  4273 ;;		wreg, status,2, status,0
  4274 ;; Tracked objects:
  4275 ;;		On entry : 0/0
  4276 ;;		On exit  : 0/0
  4277 ;;		Unchanged: 0/0
  4278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4279 ;;      Params:         2       0       0       0       0       0       0       0       0
  4280 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4281 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4282 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4283 ;;Total ram usage:        6 bytes
  4284 ;; Hardware stack levels used:    1
  4285 ;; Hardware stack levels required when called:    2
  4286 ;; This function calls:
  4287 ;;		Nothing
  4288 ;; This function is called by:
  4289 ;;		_readADC
  4290 ;; This function uses a non-reentrant model
  4291 ;;
  4292                           
  4293                           	psect	text9
  4294  005912                     __ptext9:
  4295                           	opt callstack 0
  4296  005912                     _obtener_ADC10:
  4297                           	opt callstack 24
  4298                           
  4299                           ;Tecnica1.c: 155: unsigned char GuardoPorta, GuardoTrisa;;Tecnica1.c: 156: unsigned int 
      +                          ad_res;;Tecnica1.c: 157: GuardoPorta = PORTA;
  4300                           
  4301                           ;incstack = 0
  4302  005912  CF80 F003          	movff	3968,obtener_ADC10@GuardoPorta	;volatile
  4303                           
  4304                           ;Tecnica1.c: 158: GuardoTrisa = TRISA;
  4305  005916  CF92 F004          	movff	3986,obtener_ADC10@GuardoTrisa	;volatile
  4306                           
  4307                           ;Tecnica1.c: 160: TRISAbits.RA0 = 1;
  4308  00591A  8092               	bsf	3986,0,c	;volatile
  4309                           
  4310                           ;Tecnica1.c: 161: ADCON1 = 0x0E;
  4311  00591C  0E0E               	movlw	14
  4312  00591E  6EC1               	movwf	4033,c	;volatile
  4313                           
  4314                           ;Tecnica1.c: 163: ADCON2 = 0xAD;
  4315  005920  0EAD               	movlw	173
  4316  005922  6EC0               	movwf	4032,c	;volatile
  4317                           
  4318                           ;Tecnica1.c: 164: ADCON0bits.ADON = 1;
  4319  005924  80C2               	bsf	4034,0,c	;volatile
  4320                           
  4321                           ;Tecnica1.c: 165: ADCON0bits.GO = 1;
  4322  005926  82C2               	bsf	4034,1,c	;volatile
  4323  005928                     l616:
  4324  005928  B2C2               	btfsc	4034,1,c	;volatile
  4325  00592A  D7FE               	goto	l616
  4326                           
  4327                           ;Tecnica1.c: 169: ADCON0bits.ADON = 0;
  4328  00592C  90C2               	bcf	4034,0,c	;volatile
  4329                           
  4330                           ;Tecnica1.c: 170: ADCON1 = 0x0F;
  4331  00592E  0E0F               	movlw	15
  4332  005930  6EC1               	movwf	4033,c	;volatile
  4333                           
  4334                           ;Tecnica1.c: 171: LATA = GuardoPorta;
  4335  005932  C003  FF89         	movff	obtener_ADC10@GuardoPorta,3977	;volatile
  4336                           
  4337                           ;Tecnica1.c: 172: TRISA = GuardoTrisa;
  4338  005936  C004  FF92         	movff	obtener_ADC10@GuardoTrisa,3986	;volatile
  4339                           
  4340                           ;Tecnica1.c: 177: ad_res = ADRESH;
  4341  00593A  CFC4 F005          	movff	4036,obtener_ADC10@ad_res	;volatile
  4342  00593E  6A06               	clrf	obtener_ADC10@ad_res+1,c
  4343                           
  4344                           ;Tecnica1.c: 178: ad_res <<= 8;
  4345  005940  5005               	movf	obtener_ADC10@ad_res,w,c
  4346  005942  6E06               	movwf	obtener_ADC10@ad_res+1,c
  4347  005944  6A05               	clrf	obtener_ADC10@ad_res,c
  4348                           
  4349                           ;Tecnica1.c: 179: ad_res += ADRESL;
  4350  005946  50C3               	movf	4035,w,c	;volatile
  4351  005948  2605               	addwf	obtener_ADC10@ad_res,f,c
  4352  00594A  0E00               	movlw	0
  4353  00594C  2206               	addwfc	obtener_ADC10@ad_res+1,f,c
  4354                           
  4355                           ;Tecnica1.c: 180: return ad_res;
  4356  00594E  C005  F001         	movff	obtener_ADC10@ad_res,?_obtener_ADC10
  4357  005952  C006  F002         	movff	obtener_ADC10@ad_res+1,?_obtener_ADC10+1
  4358  005956  0012               	return		;funcret
  4359  005958                     __end_of_obtener_ADC10:
  4360                           	opt callstack 0
  4361                           
  4362 ;; *************** function ___xxtofl *****************
  4363 ;; Defined at:
  4364 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\xxtofl.c"
  4365 ;; Parameters:    Size  Location     Type
  4366 ;;  sign            1    wreg     unsigned char 
  4367 ;;  val             4    6[COMRAM] long 
  4368 ;; Auto vars:     Size  Location     Type
  4369 ;;  sign            1   14[COMRAM] unsigned char 
  4370 ;;  arg             4   16[COMRAM] unsigned long 
  4371 ;;  exp             1   15[COMRAM] unsigned char 
  4372 ;; Return value:  Size  Location     Type
  4373 ;;                  4    6[COMRAM] unsigned char 
  4374 ;; Registers used:
  4375 ;;		wreg, status,2, status,0
  4376 ;; Tracked objects:
  4377 ;;		On entry : 0/0
  4378 ;;		On exit  : 0/0
  4379 ;;		Unchanged: 0/0
  4380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4381 ;;      Params:         4       0       0       0       0       0       0       0       0
  4382 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4383 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4384 ;;      Totals:        14       0       0       0       0       0       0       0       0
  4385 ;;Total ram usage:       14 bytes
  4386 ;; Hardware stack levels used:    1
  4387 ;; Hardware stack levels required when called:    2
  4388 ;; This function calls:
  4389 ;;		Nothing
  4390 ;; This function is called by:
  4391 ;;		_cobrePrecio
  4392 ;;		_aluminioPrecio
  4393 ;;		_broncePrecio
  4394 ;;		_plomoPrecio
  4395 ;;		_readADC
  4396 ;;		_descomposicion
  4397 ;; This function uses a non-reentrant model
  4398 ;;
  4399                           
  4400                           	psect	text10
  4401  005D9C                     __ptext10:
  4402                           	opt callstack 0
  4403  005D9C                     ___xxtofl:
  4404                           	opt callstack 24
  4405                           
  4406                           ;incstack = 0
  4407                           ;___xxtofl@sign stored from wreg
  4408  005D9C  6E0F               	movwf	___xxtofl@sign,c
  4409  005D9E  500F               	movf	___xxtofl@sign,w,c
  4410  005DA0  A4D8               	btfss	status,2,c
  4411  005DA2  AE0A               	btfss	___xxtofl@val+3,7,c
  4412  005DA4  D01A               	goto	l1515
  4413  005DA6  C007  F00B         	movff	___xxtofl@val,??___xxtofl
  4414  005DAA  C008  F00C         	movff	___xxtofl@val+1,??___xxtofl+1
  4415  005DAE  C009  F00D         	movff	___xxtofl@val+2,??___xxtofl+2
  4416  005DB2  C00A  F00E         	movff	___xxtofl@val+3,??___xxtofl+3
  4417  005DB6  1E0B               	comf	??___xxtofl,f,c
  4418  005DB8  1E0C               	comf	??___xxtofl+1,f,c
  4419  005DBA  1E0D               	comf	??___xxtofl+2,f,c
  4420  005DBC  1E0E               	comf	??___xxtofl+3,f,c
  4421  005DBE  2A0B               	incf	??___xxtofl,f,c
  4422  005DC0  0E00               	movlw	0
  4423  005DC2  220C               	addwfc	??___xxtofl+1,f,c
  4424  005DC4  220D               	addwfc	??___xxtofl+2,f,c
  4425  005DC6  220E               	addwfc	??___xxtofl+3,f,c
  4426  005DC8  C00B  F011         	movff	??___xxtofl,___xxtofl@arg
  4427  005DCC  C00C  F012         	movff	??___xxtofl+1,___xxtofl@arg+1
  4428  005DD0  C00D  F013         	movff	??___xxtofl+2,___xxtofl@arg+2
  4429  005DD4  C00E  F014         	movff	??___xxtofl+3,___xxtofl@arg+3
  4430  005DD8  D008               	goto	l4025
  4431  005DDA                     l1515:
  4432  005DDA  C007  F011         	movff	___xxtofl@val,___xxtofl@arg
  4433  005DDE  C008  F012         	movff	___xxtofl@val+1,___xxtofl@arg+1
  4434  005DE2  C009  F013         	movff	___xxtofl@val+2,___xxtofl@arg+2
  4435  005DE6  C00A  F014         	movff	___xxtofl@val+3,___xxtofl@arg+3
  4436  005DEA                     l4025:
  4437  005DEA  5007               	movf	___xxtofl@val,w,c
  4438  005DEC  1008               	iorwf	___xxtofl@val+1,w,c
  4439  005DEE  1009               	iorwf	___xxtofl@val+2,w,c
  4440  005DF0  100A               	iorwf	___xxtofl@val+3,w,c
  4441  005DF2  A4D8               	btfss	status,2,c
  4442  005DF4  D009               	goto	l4031
  4443  005DF6  0E00               	movlw	0
  4444  005DF8  6E07               	movwf	?___xxtofl,c
  4445  005DFA  0E00               	movlw	0
  4446  005DFC  6E08               	movwf	?___xxtofl+1,c
  4447  005DFE  0E00               	movlw	0
  4448  005E00  6E09               	movwf	?___xxtofl+2,c
  4449  005E02  0E00               	movlw	0
  4450  005E04  6E0A               	movwf	?___xxtofl+3,c
  4451  005E06  0012               	return	
  4452  005E08                     l4031:
  4453  005E08  0E96               	movlw	150
  4454  005E0A  6E10               	movwf	___xxtofl@exp,c
  4455  005E0C  D006               	goto	l4035
  4456  005E0E                     l4033:
  4457  005E0E  2A10               	incf	___xxtofl@exp,f,c
  4458  005E10  90D8               	bcf	status,0,c
  4459  005E12  3214               	rrcf	___xxtofl@arg+3,f,c
  4460  005E14  3213               	rrcf	___xxtofl@arg+2,f,c
  4461  005E16  3212               	rrcf	___xxtofl@arg+1,f,c
  4462  005E18  3211               	rrcf	___xxtofl@arg,f,c
  4463  005E1A                     l4035:
  4464  005E1A  0E00               	movlw	0
  4465  005E1C  1411               	andwf	___xxtofl@arg,w,c
  4466  005E1E  6E0B               	movwf	??___xxtofl& (0+255),c
  4467  005E20  0E00               	movlw	0
  4468  005E22  1412               	andwf	___xxtofl@arg+1,w,c
  4469  005E24  6E0C               	movwf	(??___xxtofl+1)& (0+255),c
  4470  005E26  0E00               	movlw	0
  4471  005E28  1413               	andwf	___xxtofl@arg+2,w,c
  4472  005E2A  6E0D               	movwf	(??___xxtofl+2)& (0+255),c
  4473  005E2C  0EFE               	movlw	254
  4474  005E2E  1414               	andwf	___xxtofl@arg+3,w,c
  4475  005E30  6E0E               	movwf	(??___xxtofl+3)& (0+255),c
  4476  005E32  500B               	movf	??___xxtofl,w,c
  4477  005E34  100C               	iorwf	??___xxtofl+1,w,c
  4478  005E36  100D               	iorwf	??___xxtofl+2,w,c
  4479  005E38  100E               	iorwf	??___xxtofl+3,w,c
  4480  005E3A  B4D8               	btfsc	status,2,c
  4481  005E3C  D00D               	goto	l1522
  4482  005E3E  D7E7               	goto	l4033
  4483  005E40                     l4037:
  4484  005E40  2A10               	incf	___xxtofl@exp,f,c
  4485  005E42  0E01               	movlw	1
  4486  005E44  2611               	addwf	___xxtofl@arg,f,c
  4487  005E46  0E00               	movlw	0
  4488  005E48  2212               	addwfc	___xxtofl@arg+1,f,c
  4489  005E4A  2213               	addwfc	___xxtofl@arg+2,f,c
  4490  005E4C  2214               	addwfc	___xxtofl@arg+3,f,c
  4491  005E4E  90D8               	bcf	status,0,c
  4492  005E50  3214               	rrcf	___xxtofl@arg+3,f,c
  4493  005E52  3213               	rrcf	___xxtofl@arg+2,f,c
  4494  005E54  3212               	rrcf	___xxtofl@arg+1,f,c
  4495  005E56  3211               	rrcf	___xxtofl@arg,f,c
  4496  005E58                     l1522:
  4497  005E58  0E00               	movlw	0
  4498  005E5A  1411               	andwf	___xxtofl@arg,w,c
  4499  005E5C  6E0B               	movwf	??___xxtofl& (0+255),c
  4500  005E5E  0E00               	movlw	0
  4501  005E60  1412               	andwf	___xxtofl@arg+1,w,c
  4502  005E62  6E0C               	movwf	(??___xxtofl+1)& (0+255),c
  4503  005E64  0E00               	movlw	0
  4504  005E66  1413               	andwf	___xxtofl@arg+2,w,c
  4505  005E68  6E0D               	movwf	(??___xxtofl+2)& (0+255),c
  4506  005E6A  0EFF               	movlw	255
  4507  005E6C  1414               	andwf	___xxtofl@arg+3,w,c
  4508  005E6E  6E0E               	movwf	(??___xxtofl+3)& (0+255),c
  4509  005E70  500B               	movf	??___xxtofl,w,c
  4510  005E72  100C               	iorwf	??___xxtofl+1,w,c
  4511  005E74  100D               	iorwf	??___xxtofl+2,w,c
  4512  005E76  100E               	iorwf	??___xxtofl+3,w,c
  4513  005E78  B4D8               	btfsc	status,2,c
  4514  005E7A  D007               	goto	l4045
  4515  005E7C  D7E1               	goto	l4037
  4516  005E7E                     l4043:
  4517  005E7E  0610               	decf	___xxtofl@exp,f,c
  4518  005E80  90D8               	bcf	status,0,c
  4519  005E82  3611               	rlcf	___xxtofl@arg,f,c
  4520  005E84  3612               	rlcf	___xxtofl@arg+1,f,c
  4521  005E86  3613               	rlcf	___xxtofl@arg+2,f,c
  4522  005E88  3614               	rlcf	___xxtofl@arg+3,f,c
  4523  005E8A                     l4045:
  4524  005E8A  BE13               	btfsc	___xxtofl@arg+2,7,c
  4525  005E8C  D003               	goto	u3230
  4526  005E8E  0E02               	movlw	2
  4527  005E90  6010               	cpfslt	___xxtofl@exp,c
  4528  005E92  D7F5               	goto	l4043
  4529  005E94                     u3230:
  4530  005E94  A010               	btfss	___xxtofl@exp,0,c
  4531  005E96  9E13               	bcf	___xxtofl@arg+2,7,c
  4532  005E98  90D8               	bcf	status,0,c
  4533  005E9A  3210               	rrcf	___xxtofl@exp,f,c
  4534  005E9C  C010  F00B         	movff	___xxtofl@exp,??___xxtofl
  4535  005EA0  6A0C               	clrf	(??___xxtofl+1)& (0+255),c
  4536  005EA2  6A0D               	clrf	(??___xxtofl+2)& (0+255),c
  4537  005EA4  6A0E               	clrf	(??___xxtofl+3)& (0+255),c
  4538  005EA6  C00B  F00E         	movff	??___xxtofl,??___xxtofl+3
  4539  005EAA  6A0D               	clrf	??___xxtofl+2,c
  4540  005EAC  6A0C               	clrf	??___xxtofl+1,c
  4541  005EAE  6A0B               	clrf	??___xxtofl,c
  4542  005EB0  500B               	movf	??___xxtofl,w,c
  4543  005EB2  1211               	iorwf	___xxtofl@arg,f,c
  4544  005EB4  500C               	movf	??___xxtofl+1,w,c
  4545  005EB6  1212               	iorwf	___xxtofl@arg+1,f,c
  4546  005EB8  500D               	movf	??___xxtofl+2,w,c
  4547  005EBA  1213               	iorwf	___xxtofl@arg+2,f,c
  4548  005EBC  500E               	movf	??___xxtofl+3,w,c
  4549  005EBE  1214               	iorwf	___xxtofl@arg+3,f,c
  4550  005EC0  500F               	movf	___xxtofl@sign,w,c
  4551  005EC2  A4D8               	btfss	status,2,c
  4552  005EC4  AE0A               	btfss	___xxtofl@val+3,7,c
  4553  005EC6  D001               	goto	l4061
  4554  005EC8  8E14               	bsf	___xxtofl@arg+3,7,c
  4555  005ECA                     l4061:
  4556  005ECA  C011  F007         	movff	___xxtofl@arg,?___xxtofl
  4557  005ECE  C012  F008         	movff	___xxtofl@arg+1,?___xxtofl+1
  4558  005ED2  C013  F009         	movff	___xxtofl@arg+2,?___xxtofl+2
  4559  005ED6  C014  F00A         	movff	___xxtofl@arg+3,?___xxtofl+3
  4560  005EDA  0012               	return		;funcret
  4561  005EDC                     __end_of___xxtofl:
  4562                           	opt callstack 0
  4563                           
  4564 ;; *************** function ___fltol *****************
  4565 ;; Defined at:
  4566 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\fltol.c"
  4567 ;; Parameters:    Size  Location     Type
  4568 ;;  f1              4   16[COMRAM] unsigned char 
  4569 ;; Auto vars:     Size  Location     Type
  4570 ;;  exp1            1   25[COMRAM] unsigned char 
  4571 ;;  sign1           1   24[COMRAM] unsigned char 
  4572 ;; Return value:  Size  Location     Type
  4573 ;;                  4   16[COMRAM] long 
  4574 ;; Registers used:
  4575 ;;		wreg, status,2, status,0
  4576 ;; Tracked objects:
  4577 ;;		On entry : 0/0
  4578 ;;		On exit  : 0/0
  4579 ;;		Unchanged: 0/0
  4580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4581 ;;      Params:         4       0       0       0       0       0       0       0       0
  4582 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4583 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4584 ;;      Totals:        10       0       0       0       0       0       0       0       0
  4585 ;;Total ram usage:       10 bytes
  4586 ;; Hardware stack levels used:    1
  4587 ;; Hardware stack levels required when called:    2
  4588 ;; This function calls:
  4589 ;;		Nothing
  4590 ;; This function is called by:
  4591 ;;		_cobrePrecio
  4592 ;;		_aluminioPrecio
  4593 ;;		_broncePrecio
  4594 ;;		_plomoPrecio
  4595 ;;		_readADC
  4596 ;;		_descomposicion
  4597 ;; This function uses a non-reentrant model
  4598 ;;
  4599                           
  4600                           	psect	text11
  4601  005C16                     __ptext11:
  4602                           	opt callstack 0
  4603  005C16                     ___fltol:
  4604                           	opt callstack 24
  4605                           
  4606                           ;incstack = 0
  4607  005C16  3413               	rlcf	___fltol@f1+2,w,c
  4608  005C18  3414               	rlcf	___fltol@f1+3,w,c
  4609  005C1A  6E1A               	movwf	___fltol@exp1,c
  4610  005C1C  501A               	movf	___fltol@exp1,w,c
  4611  005C1E  A4D8               	btfss	status,2,c
  4612  005C20  D009               	goto	l3981
  4613  005C22                     u3100:
  4614  005C22  0E00               	movlw	0
  4615  005C24  6E11               	movwf	?___fltol,c
  4616  005C26  0E00               	movlw	0
  4617  005C28  6E12               	movwf	?___fltol+1,c
  4618  005C2A  0E00               	movlw	0
  4619  005C2C  6E13               	movwf	?___fltol+2,c
  4620  005C2E  0E00               	movlw	0
  4621  005C30  6E14               	movwf	?___fltol+3,c
  4622  005C32  0012               	return	
  4623  005C34                     l3981:
  4624  005C34  C011  F015         	movff	___fltol@f1,??___fltol
  4625  005C38  C012  F016         	movff	___fltol@f1+1,??___fltol+1
  4626  005C3C  C013  F017         	movff	___fltol@f1+2,??___fltol+2
  4627  005C40  C014  F018         	movff	___fltol@f1+3,??___fltol+3
  4628  005C44  0E20               	movlw	32
  4629  005C46  D005               	goto	u3110
  4630  005C48                     u3115:
  4631  005C48  90D8               	bcf	status,0,c
  4632  005C4A  3218               	rrcf	??___fltol+3,f,c
  4633  005C4C  3217               	rrcf	??___fltol+2,f,c
  4634  005C4E  3216               	rrcf	??___fltol+1,f,c
  4635  005C50  3215               	rrcf	??___fltol,f,c
  4636  005C52                     u3110:
  4637  005C52  2EE8               	decfsz	wreg,f,c
  4638  005C54  D7F9               	goto	u3115
  4639  005C56  5015               	movf	??___fltol,w,c
  4640  005C58  6E19               	movwf	___fltol@sign1,c
  4641  005C5A  8E13               	bsf	___fltol@f1+2,7,c
  4642  005C5C  0EFF               	movlw	255
  4643  005C5E  1611               	andwf	___fltol@f1,f,c
  4644  005C60  0EFF               	movlw	255
  4645  005C62  1612               	andwf	___fltol@f1+1,f,c
  4646  005C64  0EFF               	movlw	255
  4647  005C66  1613               	andwf	___fltol@f1+2,f,c
  4648  005C68  0E00               	movlw	0
  4649  005C6A  1614               	andwf	___fltol@f1+3,f,c
  4650  005C6C  0E96               	movlw	150
  4651  005C6E  5E1A               	subwf	___fltol@exp1,f,c
  4652  005C70  AE1A               	btfss	___fltol@exp1,7,c
  4653  005C72  D00D               	goto	l4001
  4654  005C74  501A               	movf	___fltol@exp1,w,c
  4655  005C76  0A80               	xorlw	128
  4656  005C78  0F97               	addlw	151
  4657  005C7A  A0D8               	btfss	status,0,c
  4658  005C7C  D7D2               	goto	u3100
  4659  005C7E                     l3997:
  4660  005C7E  90D8               	bcf	status,0,c
  4661  005C80  3214               	rrcf	___fltol@f1+3,f,c
  4662  005C82  3213               	rrcf	___fltol@f1+2,f,c
  4663  005C84  3212               	rrcf	___fltol@f1+1,f,c
  4664  005C86  3211               	rrcf	___fltol@f1,f,c
  4665  005C88  3E1A               	incfsz	___fltol@exp1,f,c
  4666  005C8A  D7F9               	goto	l3997
  4667  005C8C  D00D               	goto	u3150
  4668  005C8E                     l4001:
  4669  005C8E  0E1F               	movlw	31
  4670  005C90  641A               	cpfsgt	___fltol@exp1,c
  4671  005C92  D007               	goto	l4009
  4672  005C94  D7C6               	goto	u3100
  4673  005C96                     l4007:
  4674  005C96  90D8               	bcf	status,0,c
  4675  005C98  3611               	rlcf	___fltol@f1,f,c
  4676  005C9A  3612               	rlcf	___fltol@f1+1,f,c
  4677  005C9C  3613               	rlcf	___fltol@f1+2,f,c
  4678  005C9E  3614               	rlcf	___fltol@f1+3,f,c
  4679  005CA0  061A               	decf	___fltol@exp1,f,c
  4680  005CA2                     l4009:
  4681  005CA2  501A               	movf	___fltol@exp1,w,c
  4682  005CA4  A4D8               	btfss	status,2,c
  4683  005CA6  D7F7               	goto	l4007
  4684  005CA8                     u3150:
  4685  005CA8  5019               	movf	___fltol@sign1,w,c
  4686  005CAA  B4D8               	btfsc	status,2,c
  4687  005CAC  D008               	goto	l4015
  4688  005CAE  1E14               	comf	___fltol@f1+3,f,c
  4689  005CB0  1E13               	comf	___fltol@f1+2,f,c
  4690  005CB2  1E12               	comf	___fltol@f1+1,f,c
  4691  005CB4  6C11               	negf	___fltol@f1,c
  4692  005CB6  0E00               	movlw	0
  4693  005CB8  2212               	addwfc	___fltol@f1+1,f,c
  4694  005CBA  2213               	addwfc	___fltol@f1+2,f,c
  4695  005CBC  2214               	addwfc	___fltol@f1+3,f,c
  4696  005CBE                     l4015:
  4697  005CBE  C011  F011         	movff	___fltol@f1,?___fltol
  4698  005CC2  C012  F012         	movff	___fltol@f1+1,?___fltol+1
  4699  005CC6  C013  F013         	movff	___fltol@f1+2,?___fltol+2
  4700  005CCA  C014  F014         	movff	___fltol@f1+3,?___fltol+3
  4701  005CCE  0012               	return		;funcret
  4702  005CD0                     __end_of___fltol:
  4703                           	opt callstack 0
  4704                           
  4705 ;; *************** function ___flmul *****************
  4706 ;; Defined at:
  4707 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\sprcmul.c"
  4708 ;; Parameters:    Size  Location     Type
  4709 ;;  b               4    0[COMRAM] long 
  4710 ;;  a               4    4[COMRAM] long 
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;  prod            4   19[COMRAM] struct .
  4713 ;;  grs             4   13[COMRAM] unsigned long 
  4714 ;;  temp            2   23[COMRAM] struct .
  4715 ;;  bexp            1   18[COMRAM] unsigned char 
  4716 ;;  aexp            1   17[COMRAM] unsigned char 
  4717 ;;  sign            1   12[COMRAM] unsigned char 
  4718 ;; Return value:  Size  Location     Type
  4719 ;;                  4    0[COMRAM] unsigned char 
  4720 ;; Registers used:
  4721 ;;		wreg, status,2, status,0, prodl, prodh
  4722 ;; Tracked objects:
  4723 ;;		On entry : 0/0
  4724 ;;		On exit  : 0/0
  4725 ;;		Unchanged: 0/0
  4726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4727 ;;      Params:         8       0       0       0       0       0       0       0       0
  4728 ;;      Locals:        13       0       0       0       0       0       0       0       0
  4729 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4730 ;;      Totals:        25       0       0       0       0       0       0       0       0
  4731 ;;Total ram usage:       25 bytes
  4732 ;; Hardware stack levels used:    1
  4733 ;; Hardware stack levels required when called:    2
  4734 ;; This function calls:
  4735 ;;		Nothing
  4736 ;; This function is called by:
  4737 ;;		_cobrePrecio
  4738 ;;		_aluminioPrecio
  4739 ;;		_broncePrecio
  4740 ;;		_plomoPrecio
  4741 ;;		_readADC
  4742 ;; This function uses a non-reentrant model
  4743 ;;
  4744                           
  4745                           	psect	text12
  4746  006B86                     __ptext12:
  4747                           	opt callstack 0
  4748  006B86                     ___flmul:
  4749                           	opt callstack 24
  4750                           
  4751                           ;incstack = 0
  4752  006B86  5004               	movf	___flmul@b+3,w,c
  4753  006B88  0B80               	andlw	128
  4754  006B8A  6E0D               	movwf	___flmul@sign,c
  4755  006B8C  5004               	movf	___flmul@b+3,w,c
  4756  006B8E  2404               	addwf	___flmul@b+3,w,c
  4757  006B90  6E13               	movwf	___flmul@bexp,c
  4758  006B92  BE03               	btfsc	___flmul@b+2,7,c
  4759  006B94  8013               	bsf	___flmul@bexp,0,c
  4760  006B96  5013               	movf	___flmul@bexp,w,c
  4761  006B98  B4D8               	btfsc	status,2,c
  4762  006B9A  D00D               	goto	l3859
  4763  006B9C  2813               	incf	___flmul@bexp,w,c
  4764  006B9E  A4D8               	btfss	status,2,c
  4765  006BA0  D008               	goto	l3857
  4766  006BA2  0E00               	movlw	0
  4767  006BA4  6E01               	movwf	___flmul@b,c
  4768  006BA6  0E00               	movlw	0
  4769  006BA8  6E02               	movwf	___flmul@b+1,c
  4770  006BAA  0E00               	movlw	0
  4771  006BAC  6E03               	movwf	___flmul@b+2,c
  4772  006BAE  0E00               	movlw	0
  4773  006BB0  6E04               	movwf	___flmul@b+3,c
  4774  006BB2                     l3857:
  4775  006BB2  8E03               	bsf	___flmul@b+2,7,c
  4776  006BB4  D008               	goto	l3861
  4777  006BB6                     l3859:
  4778  006BB6  0E00               	movlw	0
  4779  006BB8  6E01               	movwf	___flmul@b,c
  4780  006BBA  0E00               	movlw	0
  4781  006BBC  6E02               	movwf	___flmul@b+1,c
  4782  006BBE  0E00               	movlw	0
  4783  006BC0  6E03               	movwf	___flmul@b+2,c
  4784  006BC2  0E00               	movlw	0
  4785  006BC4  6E04               	movwf	___flmul@b+3,c
  4786  006BC6                     l3861:
  4787  006BC6  5008               	movf	___flmul@a+3,w,c
  4788  006BC8  0B80               	andlw	128
  4789  006BCA  1A0D               	xorwf	___flmul@sign,f,c
  4790  006BCC  5008               	movf	___flmul@a+3,w,c
  4791  006BCE  2408               	addwf	___flmul@a+3,w,c
  4792  006BD0  6E12               	movwf	___flmul@aexp,c
  4793  006BD2  BE07               	btfsc	___flmul@a+2,7,c
  4794  006BD4  8012               	bsf	___flmul@aexp,0,c
  4795  006BD6  5012               	movf	___flmul@aexp,w,c
  4796  006BD8  B4D8               	btfsc	status,2,c
  4797  006BDA  D00D               	goto	l3877
  4798  006BDC  2812               	incf	___flmul@aexp,w,c
  4799  006BDE  A4D8               	btfss	status,2,c
  4800  006BE0  D008               	goto	l3875
  4801  006BE2  0E00               	movlw	0
  4802  006BE4  6E05               	movwf	___flmul@a,c
  4803  006BE6  0E00               	movlw	0
  4804  006BE8  6E06               	movwf	___flmul@a+1,c
  4805  006BEA  0E00               	movlw	0
  4806  006BEC  6E07               	movwf	___flmul@a+2,c
  4807  006BEE  0E00               	movlw	0
  4808  006BF0  6E08               	movwf	___flmul@a+3,c
  4809  006BF2                     l3875:
  4810  006BF2  8E07               	bsf	___flmul@a+2,7,c
  4811  006BF4  D008               	goto	l1474
  4812  006BF6                     l3877:
  4813  006BF6  0E00               	movlw	0
  4814  006BF8  6E05               	movwf	___flmul@a,c
  4815  006BFA  0E00               	movlw	0
  4816  006BFC  6E06               	movwf	___flmul@a+1,c
  4817  006BFE  0E00               	movlw	0
  4818  006C00  6E07               	movwf	___flmul@a+2,c
  4819  006C02  0E00               	movlw	0
  4820  006C04  6E08               	movwf	___flmul@a+3,c
  4821  006C06                     l1474:
  4822  006C06  5012               	movf	___flmul@aexp,w,c
  4823  006C08  B4D8               	btfsc	status,2,c
  4824  006C0A  D003               	goto	u2980
  4825  006C0C  5013               	movf	___flmul@bexp,w,c
  4826  006C0E  A4D8               	btfss	status,2,c
  4827  006C10  D009               	goto	l3885
  4828  006C12                     u2980:
  4829  006C12  0E00               	movlw	0
  4830  006C14  6E01               	movwf	?___flmul,c
  4831  006C16  0E00               	movlw	0
  4832  006C18  6E02               	movwf	?___flmul+1,c
  4833  006C1A  0E00               	movlw	0
  4834  006C1C  6E03               	movwf	?___flmul+2,c
  4835  006C1E  0E00               	movlw	0
  4836  006C20  6E04               	movwf	?___flmul+3,c
  4837  006C22  0012               	return	
  4838  006C24                     l3885:
  4839  006C24  5007               	movf	___flmul@a+2,w,c
  4840  006C26  0201               	mulwf	___flmul@b,c
  4841  006C28  CFF3 F018          	movff	prodl,___flmul@temp
  4842  006C2C  CFF4 F019          	movff	prodh,___flmul@temp+1
  4843  006C30  5018               	movf	___flmul@temp,w,c
  4844  006C32  6E0E               	movwf	___flmul@grs,c
  4845  006C34  6A0F               	clrf	___flmul@grs+1,c
  4846  006C36  6A10               	clrf	___flmul@grs+2,c
  4847  006C38  6A11               	clrf	___flmul@grs+3,c
  4848  006C3A  5019               	movf	___flmul@temp+1,w,c
  4849  006C3C  6E14               	movwf	___flmul@prod,c
  4850  006C3E  6A15               	clrf	___flmul@prod+1,c
  4851  006C40  6A16               	clrf	___flmul@prod+2,c
  4852  006C42  6A17               	clrf	___flmul@prod+3,c
  4853  006C44  5006               	movf	___flmul@a+1,w,c
  4854  006C46  0202               	mulwf	___flmul@b+1,c
  4855  006C48  CFF3 F018          	movff	prodl,___flmul@temp
  4856  006C4C  CFF4 F019          	movff	prodh,___flmul@temp+1
  4857  006C50  5018               	movf	___flmul@temp,w,c
  4858  006C52  260E               	addwf	___flmul@grs,f,c
  4859  006C54  0E00               	movlw	0
  4860  006C56  220F               	addwfc	___flmul@grs+1,f,c
  4861  006C58  2210               	addwfc	___flmul@grs+2,f,c
  4862  006C5A  2211               	addwfc	___flmul@grs+3,f,c
  4863  006C5C  5019               	movf	___flmul@temp+1,w,c
  4864  006C5E  2614               	addwf	___flmul@prod,f,c
  4865  006C60  0E00               	movlw	0
  4866  006C62  2215               	addwfc	___flmul@prod+1,f,c
  4867  006C64  2216               	addwfc	___flmul@prod+2,f,c
  4868  006C66  2217               	addwfc	___flmul@prod+3,f,c
  4869  006C68  5005               	movf	___flmul@a,w,c
  4870  006C6A  0203               	mulwf	___flmul@b+2,c
  4871  006C6C  CFF3 F018          	movff	prodl,___flmul@temp
  4872  006C70  CFF4 F019          	movff	prodh,___flmul@temp+1
  4873  006C74  5018               	movf	___flmul@temp,w,c
  4874  006C76  260E               	addwf	___flmul@grs,f,c
  4875  006C78  0E00               	movlw	0
  4876  006C7A  220F               	addwfc	___flmul@grs+1,f,c
  4877  006C7C  2210               	addwfc	___flmul@grs+2,f,c
  4878  006C7E  2211               	addwfc	___flmul@grs+3,f,c
  4879  006C80  5019               	movf	___flmul@temp+1,w,c
  4880  006C82  2614               	addwf	___flmul@prod,f,c
  4881  006C84  0E00               	movlw	0
  4882  006C86  2215               	addwfc	___flmul@prod+1,f,c
  4883  006C88  2216               	addwfc	___flmul@prod+2,f,c
  4884  006C8A  2217               	addwfc	___flmul@prod+3,f,c
  4885  006C8C  C010  F011         	movff	___flmul@grs+2,___flmul@grs+3
  4886  006C90  C00F  F010         	movff	___flmul@grs+1,___flmul@grs+2
  4887  006C94  C00E  F00F         	movff	___flmul@grs,___flmul@grs+1
  4888  006C98  6A0E               	clrf	___flmul@grs,c
  4889  006C9A  5005               	movf	___flmul@a,w,c
  4890  006C9C  0202               	mulwf	___flmul@b+1,c
  4891  006C9E  CFF3 F018          	movff	prodl,___flmul@temp
  4892  006CA2  CFF4 F019          	movff	prodh,___flmul@temp+1
  4893  006CA6  5018               	movf	___flmul@temp,w,c
  4894  006CA8  260E               	addwf	___flmul@grs,f,c
  4895  006CAA  5019               	movf	___flmul@temp+1,w,c
  4896  006CAC  220F               	addwfc	___flmul@grs+1,f,c
  4897  006CAE  0E00               	movlw	0
  4898  006CB0  2210               	addwfc	___flmul@grs+2,f,c
  4899  006CB2  0E00               	movlw	0
  4900  006CB4  2211               	addwfc	___flmul@grs+3,f,c
  4901  006CB6  5006               	movf	___flmul@a+1,w,c
  4902  006CB8  0201               	mulwf	___flmul@b,c
  4903  006CBA  CFF3 F018          	movff	prodl,___flmul@temp
  4904  006CBE  CFF4 F019          	movff	prodh,___flmul@temp+1
  4905  006CC2  5018               	movf	___flmul@temp,w,c
  4906  006CC4  260E               	addwf	___flmul@grs,f,c
  4907  006CC6  5019               	movf	___flmul@temp+1,w,c
  4908  006CC8  220F               	addwfc	___flmul@grs+1,f,c
  4909  006CCA  0E00               	movlw	0
  4910  006CCC  2210               	addwfc	___flmul@grs+2,f,c
  4911  006CCE  0E00               	movlw	0
  4912  006CD0  2211               	addwfc	___flmul@grs+3,f,c
  4913  006CD2  C010  F011         	movff	___flmul@grs+2,___flmul@grs+3
  4914  006CD6  C00F  F010         	movff	___flmul@grs+1,___flmul@grs+2
  4915  006CDA  C00E  F00F         	movff	___flmul@grs,___flmul@grs+1
  4916  006CDE  6A0E               	clrf	___flmul@grs,c
  4917  006CE0  5005               	movf	___flmul@a,w,c
  4918  006CE2  0201               	mulwf	___flmul@b,c
  4919  006CE4  CFF3 F018          	movff	prodl,___flmul@temp
  4920  006CE8  CFF4 F019          	movff	prodh,___flmul@temp+1
  4921  006CEC  5018               	movf	___flmul@temp,w,c
  4922  006CEE  260E               	addwf	___flmul@grs,f,c
  4923  006CF0  5019               	movf	___flmul@temp+1,w,c
  4924  006CF2  220F               	addwfc	___flmul@grs+1,f,c
  4925  006CF4  0E00               	movlw	0
  4926  006CF6  2210               	addwfc	___flmul@grs+2,f,c
  4927  006CF8  0E00               	movlw	0
  4928  006CFA  2211               	addwfc	___flmul@grs+3,f,c
  4929  006CFC  5007               	movf	___flmul@a+2,w,c
  4930  006CFE  0202               	mulwf	___flmul@b+1,c
  4931  006D00  CFF3 F018          	movff	prodl,___flmul@temp
  4932  006D04  CFF4 F019          	movff	prodh,___flmul@temp+1
  4933  006D08  5018               	movf	___flmul@temp,w,c
  4934  006D0A  2614               	addwf	___flmul@prod,f,c
  4935  006D0C  5019               	movf	___flmul@temp+1,w,c
  4936  006D0E  2215               	addwfc	___flmul@prod+1,f,c
  4937  006D10  0E00               	movlw	0
  4938  006D12  2216               	addwfc	___flmul@prod+2,f,c
  4939  006D14  0E00               	movlw	0
  4940  006D16  2217               	addwfc	___flmul@prod+3,f,c
  4941  006D18  5006               	movf	___flmul@a+1,w,c
  4942  006D1A  0203               	mulwf	___flmul@b+2,c
  4943  006D1C  CFF3 F018          	movff	prodl,___flmul@temp
  4944  006D20  CFF4 F019          	movff	prodh,___flmul@temp+1
  4945  006D24  5018               	movf	___flmul@temp,w,c
  4946  006D26  2614               	addwf	___flmul@prod,f,c
  4947  006D28  5019               	movf	___flmul@temp+1,w,c
  4948  006D2A  2215               	addwfc	___flmul@prod+1,f,c
  4949  006D2C  0E00               	movlw	0
  4950  006D2E  2216               	addwfc	___flmul@prod+2,f,c
  4951  006D30  0E00               	movlw	0
  4952  006D32  2217               	addwfc	___flmul@prod+3,f,c
  4953  006D34  5007               	movf	___flmul@a+2,w,c
  4954  006D36  0203               	mulwf	___flmul@b+2,c
  4955  006D38  CFF3 F018          	movff	prodl,___flmul@temp
  4956  006D3C  CFF4 F019          	movff	prodh,___flmul@temp+1
  4957  006D40  5018               	movf	___flmul@temp,w,c
  4958  006D42  6E09               	movwf	??___flmul& (0+255),c
  4959  006D44  5019               	movf	___flmul@temp+1,w,c
  4960  006D46  6E0A               	movwf	(??___flmul+1)& (0+255),c
  4961  006D48  6A0B               	clrf	(??___flmul+2)& (0+255),c
  4962  006D4A  6A0C               	clrf	(??___flmul+3)& (0+255),c
  4963  006D4C  C00B  F00C         	movff	??___flmul+2,??___flmul+3
  4964  006D50  C00A  F00B         	movff	??___flmul+1,??___flmul+2
  4965  006D54  C009  F00A         	movff	??___flmul,??___flmul+1
  4966  006D58  6A09               	clrf	??___flmul,c
  4967  006D5A  5009               	movf	??___flmul,w,c
  4968  006D5C  2614               	addwf	___flmul@prod,f,c
  4969  006D5E  500A               	movf	??___flmul+1,w,c
  4970  006D60  2215               	addwfc	___flmul@prod+1,f,c
  4971  006D62  500B               	movf	??___flmul+2,w,c
  4972  006D64  2216               	addwfc	___flmul@prod+2,f,c
  4973  006D66  500C               	movf	??___flmul+3,w,c
  4974  006D68  2217               	addwfc	___flmul@prod+3,f,c
  4975  006D6A  C00E  F009         	movff	___flmul@grs,??___flmul
  4976  006D6E  C00F  F00A         	movff	___flmul@grs+1,??___flmul+1
  4977  006D72  C010  F00B         	movff	___flmul@grs+2,??___flmul+2
  4978  006D76  C011  F00C         	movff	___flmul@grs+3,??___flmul+3
  4979  006D7A  0E19               	movlw	25
  4980  006D7C  D005               	goto	u2990
  4981  006D7E                     u2995:
  4982  006D7E  90D8               	bcf	status,0,c
  4983  006D80  320C               	rrcf	??___flmul+3,f,c
  4984  006D82  320B               	rrcf	??___flmul+2,f,c
  4985  006D84  320A               	rrcf	??___flmul+1,f,c
  4986  006D86  3209               	rrcf	??___flmul,f,c
  4987  006D88                     u2990:
  4988  006D88  2EE8               	decfsz	wreg,f,c
  4989  006D8A  D7F9               	goto	u2995
  4990  006D8C  5009               	movf	??___flmul,w,c
  4991  006D8E  2614               	addwf	___flmul@prod,f,c
  4992  006D90  500A               	movf	??___flmul+1,w,c
  4993  006D92  2215               	addwfc	___flmul@prod+1,f,c
  4994  006D94  500B               	movf	??___flmul+2,w,c
  4995  006D96  2216               	addwfc	___flmul@prod+2,f,c
  4996  006D98  500C               	movf	??___flmul+3,w,c
  4997  006D9A  2217               	addwfc	___flmul@prod+3,f,c
  4998  006D9C  C010  F011         	movff	___flmul@grs+2,___flmul@grs+3
  4999  006DA0  C00F  F010         	movff	___flmul@grs+1,___flmul@grs+2
  5000  006DA4  C00E  F00F         	movff	___flmul@grs,___flmul@grs+1
  5001  006DA8  6A0E               	clrf	___flmul@grs,c
  5002  006DAA  5012               	movf	___flmul@aexp,w,c
  5003  006DAC  C013  F009         	movff	___flmul@bexp,??___flmul
  5004  006DB0  6A0A               	clrf	(??___flmul+1)& (0+255),c
  5005  006DB2  2609               	addwf	??___flmul,f,c
  5006  006DB4  0E00               	movlw	0
  5007  006DB6  220A               	addwfc	??___flmul+1,f,c
  5008  006DB8  0E82               	movlw	130
  5009  006DBA  2409               	addwf	??___flmul,w,c
  5010  006DBC  6E18               	movwf	___flmul@temp,c
  5011  006DBE  0EFF               	movlw	255
  5012  006DC0  200A               	addwfc	??___flmul+1,w,c
  5013  006DC2  6E19               	movwf	___flmul@temp+1,c
  5014  006DC4  D00F               	goto	l3933
  5015  006DC6                     l3927:
  5016  006DC6  90D8               	bcf	status,0,c
  5017  006DC8  3614               	rlcf	___flmul@prod,f,c
  5018  006DCA  3615               	rlcf	___flmul@prod+1,f,c
  5019  006DCC  3616               	rlcf	___flmul@prod+2,f,c
  5020  006DCE  3617               	rlcf	___flmul@prod+3,f,c
  5021  006DD0  BE11               	btfsc	___flmul@grs+3,7,c
  5022  006DD2  8014               	bsf	___flmul@prod,0,c
  5023  006DD4  90D8               	bcf	status,0,c
  5024  006DD6  360E               	rlcf	___flmul@grs,f,c
  5025  006DD8  360F               	rlcf	___flmul@grs+1,f,c
  5026  006DDA  3610               	rlcf	___flmul@grs+2,f,c
  5027  006DDC  3611               	rlcf	___flmul@grs+3,f,c
  5028  006DDE  0618               	decf	___flmul@temp,f,c
  5029  006DE0  A0D8               	btfss	status,0,c
  5030  006DE2  0619               	decf	___flmul@temp+1,f,c
  5031  006DE4                     l3933:
  5032  006DE4  AE16               	btfss	___flmul@prod+2,7,c
  5033  006DE6  D7EF               	goto	l3927
  5034  006DE8  0E00               	movlw	0
  5035  006DEA  6E12               	movwf	___flmul@aexp,c
  5036  006DEC  AE11               	btfss	___flmul@grs+3,7,c
  5037  006DEE  D017               	goto	l1483
  5038  006DF0  0EFF               	movlw	255
  5039  006DF2  140E               	andwf	___flmul@grs,w,c
  5040  006DF4  6E09               	movwf	??___flmul& (0+255),c
  5041  006DF6  0EFF               	movlw	255
  5042  006DF8  140F               	andwf	___flmul@grs+1,w,c
  5043  006DFA  6E0A               	movwf	(??___flmul+1)& (0+255),c
  5044  006DFC  0EFF               	movlw	255
  5045  006DFE  1410               	andwf	___flmul@grs+2,w,c
  5046  006E00  6E0B               	movwf	(??___flmul+2)& (0+255),c
  5047  006E02  0E7F               	movlw	127
  5048  006E04  1411               	andwf	___flmul@grs+3,w,c
  5049  006E06  6E0C               	movwf	(??___flmul+3)& (0+255),c
  5050  006E08  5009               	movf	??___flmul,w,c
  5051  006E0A  100A               	iorwf	??___flmul+1,w,c
  5052  006E0C  100B               	iorwf	??___flmul+2,w,c
  5053  006E0E  100C               	iorwf	??___flmul+3,w,c
  5054  006E10  B4D8               	btfsc	status,2,c
  5055  006E12  D003               	goto	l1484
  5056  006E14                     u3030:
  5057  006E14  0E01               	movlw	1
  5058  006E16  6E12               	movwf	___flmul@aexp,c
  5059  006E18  D002               	goto	l1483
  5060  006E1A                     l1484:
  5061  006E1A  B014               	btfsc	___flmul@prod,0,c
  5062  006E1C  D7FB               	goto	u3030
  5063  006E1E                     l1483:
  5064  006E1E  5012               	movf	___flmul@aexp,w,c
  5065  006E20  B4D8               	btfsc	status,2,c
  5066  006E22  D01F               	goto	l3953
  5067  006E24  0E01               	movlw	1
  5068  006E26  2614               	addwf	___flmul@prod,f,c
  5069  006E28  0E00               	movlw	0
  5070  006E2A  2215               	addwfc	___flmul@prod+1,f,c
  5071  006E2C  2216               	addwfc	___flmul@prod+2,f,c
  5072  006E2E  2217               	addwfc	___flmul@prod+3,f,c
  5073  006E30  A017               	btfss	___flmul@prod+3,0,c
  5074  006E32  D017               	goto	l3953
  5075  006E34  C014  F009         	movff	___flmul@prod,??___flmul
  5076  006E38  C015  F00A         	movff	___flmul@prod+1,??___flmul+1
  5077  006E3C  C016  F00B         	movff	___flmul@prod+2,??___flmul+2
  5078  006E40  C017  F00C         	movff	___flmul@prod+3,??___flmul+3
  5079  006E44  340C               	rlcf	??___flmul+3,w,c
  5080  006E46  320C               	rrcf	??___flmul+3,f,c
  5081  006E48  320B               	rrcf	??___flmul+2,f,c
  5082  006E4A  320A               	rrcf	??___flmul+1,f,c
  5083  006E4C  3209               	rrcf	??___flmul,f,c
  5084  006E4E  C009  F014         	movff	??___flmul,___flmul@prod
  5085  006E52  C00A  F015         	movff	??___flmul+1,___flmul@prod+1
  5086  006E56  C00B  F016         	movff	??___flmul+2,___flmul@prod+2
  5087  006E5A  C00C  F017         	movff	??___flmul+3,___flmul@prod+3
  5088  006E5E  4A18               	infsnz	___flmul@temp,f,c
  5089  006E60  2A19               	incf	___flmul@temp+1,f,c
  5090  006E62                     l3953:
  5091  006E62  BE19               	btfsc	___flmul@temp+1,7,c
  5092  006E64  D00D               	goto	l3957
  5093  006E66  5019               	movf	___flmul@temp+1,w,c
  5094  006E68  E103               	bnz	u3070
  5095  006E6A  2818               	incf	___flmul@temp,w,c
  5096  006E6C  A0D8               	btfss	status,0,c
  5097  006E6E  D008               	goto	l3957
  5098  006E70                     u3070:
  5099  006E70  0E00               	movlw	0
  5100  006E72  6E14               	movwf	___flmul@prod,c
  5101  006E74  0E00               	movlw	0
  5102  006E76  6E15               	movwf	___flmul@prod+1,c
  5103  006E78  0E80               	movlw	128
  5104  006E7A  6E16               	movwf	___flmul@prod+2,c
  5105  006E7C  0E7F               	movlw	127
  5106  006E7E  D020               	goto	L9
  5107  006E80                     l3957:
  5108  006E80  BE19               	btfsc	___flmul@temp+1,7,c
  5109  006E82  D005               	goto	u3080
  5110  006E84  5019               	movf	___flmul@temp+1,w,c
  5111  006E86  E10E               	bnz	l1491
  5112  006E88  0418               	decf	___flmul@temp,w,c
  5113  006E8A  B0D8               	btfsc	status,0,c
  5114  006E8C  D00B               	goto	l1491
  5115  006E8E                     u3080:
  5116  006E8E  0E00               	movlw	0
  5117  006E90  6E14               	movwf	___flmul@prod,c
  5118  006E92  0E00               	movlw	0
  5119  006E94  6E15               	movwf	___flmul@prod+1,c
  5120  006E96  0E00               	movlw	0
  5121  006E98  6E16               	movwf	___flmul@prod+2,c
  5122  006E9A  0E00               	movlw	0
  5123  006E9C  6E17               	movwf	___flmul@prod+3,c
  5124  006E9E  0E00               	movlw	0
  5125  006EA0  6E0D               	movwf	___flmul@sign,c
  5126  006EA2  D00F               	goto	l3969
  5127  006EA4                     l1491:
  5128  006EA4  C018  F013         	movff	___flmul@temp,___flmul@bexp
  5129  006EA8  0EFF               	movlw	255
  5130  006EAA  1614               	andwf	___flmul@prod,f,c
  5131  006EAC  0EFF               	movlw	255
  5132  006EAE  1615               	andwf	___flmul@prod+1,f,c
  5133  006EB0  0E7F               	movlw	127
  5134  006EB2  1616               	andwf	___flmul@prod+2,f,c
  5135  006EB4  0E00               	movlw	0
  5136  006EB6  1617               	andwf	___flmul@prod+3,f,c
  5137  006EB8  B013               	btfsc	___flmul@bexp,0,c
  5138  006EBA  8E16               	bsf	___flmul@prod+2,7,c
  5139  006EBC  90D8               	bcf	status,0,c
  5140  006EBE  3013               	rrcf	___flmul@bexp,w,c
  5141  006EC0                     L9:
  5142  006EC0  6E17               	movwf	___flmul@prod+3,c
  5143  006EC2                     l3969:
  5144  006EC2  500D               	movf	___flmul@sign,w,c
  5145  006EC4  1217               	iorwf	___flmul@prod+3,f,c
  5146  006EC6  C014  F001         	movff	___flmul@prod,?___flmul
  5147  006ECA  C015  F002         	movff	___flmul@prod+1,?___flmul+1
  5148  006ECE  C016  F003         	movff	___flmul@prod+2,?___flmul+2
  5149  006ED2  C017  F004         	movff	___flmul@prod+3,?___flmul+3
  5150  006ED6  0012               	return		;funcret
  5151  006ED8                     __end_of___flmul:
  5152                           	opt callstack 0
  5153                           
  5154 ;; *************** function ___fldiv *****************
  5155 ;; Defined at:
  5156 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\sprcdiv.c"
  5157 ;; Parameters:    Size  Location     Type
  5158 ;;  b               4   25[COMRAM] unsigned char 
  5159 ;;  a               4   29[COMRAM] unsigned char 
  5160 ;; Auto vars:     Size  Location     Type
  5161 ;;  grs             4   44[COMRAM] unsigned long 
  5162 ;;  rem             4   37[COMRAM] unsigned long 
  5163 ;;  new_exp         2   42[COMRAM] int 
  5164 ;;  aexp            1   49[COMRAM] unsigned char 
  5165 ;;  bexp            1   48[COMRAM] unsigned char 
  5166 ;;  sign            1   41[COMRAM] unsigned char 
  5167 ;; Return value:  Size  Location     Type
  5168 ;;                  4   25[COMRAM] unsigned char 
  5169 ;; Registers used:
  5170 ;;		wreg, status,2, status,0
  5171 ;; Tracked objects:
  5172 ;;		On entry : 0/0
  5173 ;;		On exit  : 0/0
  5174 ;;		Unchanged: 0/0
  5175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5176 ;;      Params:         8       0       0       0       0       0       0       0       0
  5177 ;;      Locals:        13       0       0       0       0       0       0       0       0
  5178 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5179 ;;      Totals:        25       0       0       0       0       0       0       0       0
  5180 ;;Total ram usage:       25 bytes
  5181 ;; Hardware stack levels used:    1
  5182 ;; Hardware stack levels required when called:    2
  5183 ;; This function calls:
  5184 ;;		Nothing
  5185 ;; This function is called by:
  5186 ;;		_readADC
  5187 ;; This function uses a non-reentrant model
  5188 ;;
  5189                           
  5190                           	psect	text13
  5191  006346                     __ptext13:
  5192                           	opt callstack 0
  5193  006346                     ___fldiv:
  5194                           	opt callstack 24
  5195                           
  5196                           ;incstack = 0
  5197  006346  501D               	movf	___fldiv@b+3,w,c
  5198  006348  0B80               	andlw	128
  5199  00634A  6E2A               	movwf	___fldiv@sign,c
  5200  00634C  501D               	movf	___fldiv@b+3,w,c
  5201  00634E  241D               	addwf	___fldiv@b+3,w,c
  5202  006350  6E31               	movwf	___fldiv@bexp,c
  5203  006352  BE1C               	btfsc	___fldiv@b+2,7,c
  5204  006354  8031               	bsf	___fldiv@bexp,0,c
  5205  006356  5031               	movf	___fldiv@bexp,w,c
  5206  006358  B4D8               	btfsc	status,2,c
  5207  00635A  D00D               	goto	l3723
  5208  00635C  2831               	incf	___fldiv@bexp,w,c
  5209  00635E  A4D8               	btfss	status,2,c
  5210  006360  D008               	goto	l3719
  5211  006362  0E00               	movlw	0
  5212  006364  6E1A               	movwf	___fldiv@b,c
  5213  006366  0E00               	movlw	0
  5214  006368  6E1B               	movwf	___fldiv@b+1,c
  5215  00636A  0E00               	movlw	0
  5216  00636C  6E1C               	movwf	___fldiv@b+2,c
  5217  00636E  0E00               	movlw	0
  5218  006370  6E1D               	movwf	___fldiv@b+3,c
  5219  006372                     l3719:
  5220  006372  8E1C               	bsf	___fldiv@b+2,7,c
  5221  006374  D006               	goto	L10
  5222  006376                     l3723:
  5223  006376  0E00               	movlw	0
  5224  006378  6E1A               	movwf	___fldiv@b,c
  5225  00637A  0E00               	movlw	0
  5226  00637C  6E1B               	movwf	___fldiv@b+1,c
  5227  00637E  0E00               	movlw	0
  5228  006380  6E1C               	movwf	___fldiv@b+2,c
  5229  006382                     L10:
  5230  006382  0E00               	movlw	0
  5231  006384  6E1D               	movwf	___fldiv@b+3,c
  5232  006386  5021               	movf	___fldiv@a+3,w,c
  5233  006388  0B80               	andlw	128
  5234  00638A  1A2A               	xorwf	___fldiv@sign,f,c
  5235  00638C  5021               	movf	___fldiv@a+3,w,c
  5236  00638E  2421               	addwf	___fldiv@a+3,w,c
  5237  006390  6E32               	movwf	___fldiv@aexp,c
  5238  006392  BE20               	btfsc	___fldiv@a+2,7,c
  5239  006394  8032               	bsf	___fldiv@aexp,0,c
  5240  006396  5032               	movf	___fldiv@aexp,w,c
  5241  006398  B4D8               	btfsc	status,2,c
  5242  00639A  D00D               	goto	l3743
  5243  00639C  2832               	incf	___fldiv@aexp,w,c
  5244  00639E  A4D8               	btfss	status,2,c
  5245  0063A0  D008               	goto	l3739
  5246  0063A2  0E00               	movlw	0
  5247  0063A4  6E1E               	movwf	___fldiv@a,c
  5248  0063A6  0E00               	movlw	0
  5249  0063A8  6E1F               	movwf	___fldiv@a+1,c
  5250  0063AA  0E00               	movlw	0
  5251  0063AC  6E20               	movwf	___fldiv@a+2,c
  5252  0063AE  0E00               	movlw	0
  5253  0063B0  6E21               	movwf	___fldiv@a+3,c
  5254  0063B2                     l3739:
  5255  0063B2  8E20               	bsf	___fldiv@a+2,7,c
  5256  0063B4  D006               	goto	L11
  5257  0063B6                     l3743:
  5258  0063B6  0E00               	movlw	0
  5259  0063B8  6E1E               	movwf	___fldiv@a,c
  5260  0063BA  0E00               	movlw	0
  5261  0063BC  6E1F               	movwf	___fldiv@a+1,c
  5262  0063BE  0E00               	movlw	0
  5263  0063C0  6E20               	movwf	___fldiv@a+2,c
  5264  0063C2                     L11:
  5265  0063C2  0E00               	movlw	0
  5266  0063C4  6E21               	movwf	___fldiv@a+3,c
  5267  0063C6  501E               	movf	___fldiv@a,w,c
  5268  0063C8  101F               	iorwf	___fldiv@a+1,w,c
  5269  0063CA  1020               	iorwf	___fldiv@a+2,w,c
  5270  0063CC  1021               	iorwf	___fldiv@a+3,w,c
  5271  0063CE  A4D8               	btfss	status,2,c
  5272  0063D0  D017               	goto	l3757
  5273  0063D2  0E00               	movlw	0
  5274  0063D4  6E1A               	movwf	___fldiv@b,c
  5275  0063D6  0E00               	movlw	0
  5276  0063D8  6E1B               	movwf	___fldiv@b+1,c
  5277  0063DA  0E00               	movlw	0
  5278  0063DC  6E1C               	movwf	___fldiv@b+2,c
  5279  0063DE  0E00               	movlw	0
  5280  0063E0  6E1D               	movwf	___fldiv@b+3,c
  5281  0063E2  0E80               	movlw	128
  5282  0063E4  121C               	iorwf	___fldiv@b+2,f,c
  5283  0063E6  0E7F               	movlw	127
  5284  0063E8  121D               	iorwf	___fldiv@b+3,f,c
  5285  0063EA                     l3751:
  5286  0063EA  502A               	movf	___fldiv@sign,w,c
  5287  0063EC  121D               	iorwf	___fldiv@b+3,f,c
  5288  0063EE  C01A  F01A         	movff	___fldiv@b,?___fldiv
  5289  0063F2  C01B  F01B         	movff	___fldiv@b+1,?___fldiv+1
  5290  0063F6  C01C  F01C         	movff	___fldiv@b+2,?___fldiv+2
  5291  0063FA  C01D  F01D         	movff	___fldiv@b+3,?___fldiv+3
  5292  0063FE  0012               	return	
  5293  006400                     l3757:
  5294  006400  5031               	movf	___fldiv@bexp,w,c
  5295  006402  A4D8               	btfss	status,2,c
  5296  006404  D009               	goto	l3765
  5297  006406  0E00               	movlw	0
  5298  006408  6E1A               	movwf	?___fldiv,c
  5299  00640A  0E00               	movlw	0
  5300  00640C  6E1B               	movwf	?___fldiv+1,c
  5301  00640E  0E00               	movlw	0
  5302  006410  6E1C               	movwf	?___fldiv+2,c
  5303  006412  0E00               	movlw	0
  5304  006414  6E1D               	movwf	?___fldiv+3,c
  5305  006416  0012               	return	
  5306  006418                     l3765:
  5307  006418  5032               	movf	___fldiv@aexp,w,c
  5308  00641A  C031  F022         	movff	___fldiv@bexp,??___fldiv
  5309  00641E  6A23               	clrf	(??___fldiv+1)& (0+255),c
  5310  006420  5E22               	subwf	??___fldiv,f,c
  5311  006422  0E00               	movlw	0
  5312  006424  5A23               	subwfb	??___fldiv+1,f,c
  5313  006426  0E7F               	movlw	127
  5314  006428  2422               	addwf	??___fldiv,w,c
  5315  00642A  6E2B               	movwf	___fldiv@new_exp,c
  5316  00642C  0E00               	movlw	0
  5317  00642E  2023               	addwfc	??___fldiv+1,w,c
  5318  006430  6E2C               	movwf	___fldiv@new_exp+1,c
  5319  006432  C01A  F026         	movff	___fldiv@b,___fldiv@rem
  5320  006436  C01B  F027         	movff	___fldiv@b+1,___fldiv@rem+1
  5321  00643A  C01C  F028         	movff	___fldiv@b+2,___fldiv@rem+2
  5322  00643E  C01D  F029         	movff	___fldiv@b+3,___fldiv@rem+3
  5323  006442  0E00               	movlw	0
  5324  006444  6E1A               	movwf	___fldiv@b,c
  5325  006446  0E00               	movlw	0
  5326  006448  6E1B               	movwf	___fldiv@b+1,c
  5327  00644A  0E00               	movlw	0
  5328  00644C  6E1C               	movwf	___fldiv@b+2,c
  5329  00644E  0E00               	movlw	0
  5330  006450  6E1D               	movwf	___fldiv@b+3,c
  5331  006452  0E00               	movlw	0
  5332  006454  6E2D               	movwf	___fldiv@grs,c
  5333  006456  0E00               	movlw	0
  5334  006458  6E2E               	movwf	___fldiv@grs+1,c
  5335  00645A  0E00               	movlw	0
  5336  00645C  6E2F               	movwf	___fldiv@grs+2,c
  5337  00645E  0E00               	movlw	0
  5338  006460  6E30               	movwf	___fldiv@grs+3,c
  5339  006462  0E00               	movlw	0
  5340  006464  6E32               	movwf	___fldiv@aexp,c
  5341  006466  D028               	goto	l1444
  5342  006468                     l3775:
  5343  006468  5032               	movf	___fldiv@aexp,w,c
  5344  00646A  B4D8               	btfsc	status,2,c
  5345  00646C  D011               	goto	l3783
  5346  00646E  90D8               	bcf	status,0,c
  5347  006470  3626               	rlcf	___fldiv@rem,f,c
  5348  006472  3627               	rlcf	___fldiv@rem+1,f,c
  5349  006474  3628               	rlcf	___fldiv@rem+2,f,c
  5350  006476  3629               	rlcf	___fldiv@rem+3,f,c
  5351  006478  90D8               	bcf	status,0,c
  5352  00647A  361A               	rlcf	___fldiv@b,f,c
  5353  00647C  361B               	rlcf	___fldiv@b+1,f,c
  5354  00647E  361C               	rlcf	___fldiv@b+2,f,c
  5355  006480  361D               	rlcf	___fldiv@b+3,f,c
  5356  006482  BE30               	btfsc	___fldiv@grs+3,7,c
  5357  006484  801A               	bsf	___fldiv@b,0,c
  5358  006486  90D8               	bcf	status,0,c
  5359  006488  362D               	rlcf	___fldiv@grs,f,c
  5360  00648A  362E               	rlcf	___fldiv@grs+1,f,c
  5361  00648C  362F               	rlcf	___fldiv@grs+2,f,c
  5362  00648E  3630               	rlcf	___fldiv@grs+3,f,c
  5363  006490                     l3783:
  5364  006490  501E               	movf	___fldiv@a,w,c
  5365  006492  5C26               	subwf	___fldiv@rem,w,c
  5366  006494  501F               	movf	___fldiv@a+1,w,c
  5367  006496  5827               	subwfb	___fldiv@rem+1,w,c
  5368  006498  5020               	movf	___fldiv@a+2,w,c
  5369  00649A  5828               	subwfb	___fldiv@rem+2,w,c
  5370  00649C  5021               	movf	___fldiv@a+3,w,c
  5371  00649E  5829               	subwfb	___fldiv@rem+3,w,c
  5372  0064A0  A0D8               	btfss	status,0,c
  5373  0064A2  D009               	goto	l3789
  5374  0064A4  8C30               	bsf	___fldiv@grs+3,6,c
  5375  0064A6  501E               	movf	___fldiv@a,w,c
  5376  0064A8  5E26               	subwf	___fldiv@rem,f,c
  5377  0064AA  501F               	movf	___fldiv@a+1,w,c
  5378  0064AC  5A27               	subwfb	___fldiv@rem+1,f,c
  5379  0064AE  5020               	movf	___fldiv@a+2,w,c
  5380  0064B0  5A28               	subwfb	___fldiv@rem+2,f,c
  5381  0064B2  5021               	movf	___fldiv@a+3,w,c
  5382  0064B4  5A29               	subwfb	___fldiv@rem+3,f,c
  5383  0064B6                     l3789:
  5384  0064B6  2A32               	incf	___fldiv@aexp,f,c
  5385  0064B8                     l1444:
  5386  0064B8  0E19               	movlw	25
  5387  0064BA  6432               	cpfsgt	___fldiv@aexp,c
  5388  0064BC  D7D5               	goto	l3775
  5389  0064BE  5026               	movf	___fldiv@rem,w,c
  5390  0064C0  1027               	iorwf	___fldiv@rem+1,w,c
  5391  0064C2  1028               	iorwf	___fldiv@rem+2,w,c
  5392  0064C4  1029               	iorwf	___fldiv@rem+3,w,c
  5393  0064C6  B4D8               	btfsc	status,2,c
  5394  0064C8  D011               	goto	l3801
  5395  0064CA  802D               	bsf	___fldiv@grs,0,c
  5396  0064CC  D00F               	goto	l3801
  5397  0064CE                     l3795:
  5398  0064CE  90D8               	bcf	status,0,c
  5399  0064D0  361A               	rlcf	___fldiv@b,f,c
  5400  0064D2  361B               	rlcf	___fldiv@b+1,f,c
  5401  0064D4  361C               	rlcf	___fldiv@b+2,f,c
  5402  0064D6  361D               	rlcf	___fldiv@b+3,f,c
  5403  0064D8  BE30               	btfsc	___fldiv@grs+3,7,c
  5404  0064DA  801A               	bsf	___fldiv@b,0,c
  5405  0064DC  90D8               	bcf	status,0,c
  5406  0064DE  362D               	rlcf	___fldiv@grs,f,c
  5407  0064E0  362E               	rlcf	___fldiv@grs+1,f,c
  5408  0064E2  362F               	rlcf	___fldiv@grs+2,f,c
  5409  0064E4  3630               	rlcf	___fldiv@grs+3,f,c
  5410  0064E6  062B               	decf	___fldiv@new_exp,f,c
  5411  0064E8  A0D8               	btfss	status,0,c
  5412  0064EA  062C               	decf	___fldiv@new_exp+1,f,c
  5413  0064EC                     l3801:
  5414  0064EC  AE1C               	btfss	___fldiv@b+2,7,c
  5415  0064EE  D7EF               	goto	l3795
  5416  0064F0  0E00               	movlw	0
  5417  0064F2  6E32               	movwf	___fldiv@aexp,c
  5418  0064F4  AE30               	btfss	___fldiv@grs+3,7,c
  5419  0064F6  D017               	goto	l1455
  5420  0064F8  0EFF               	movlw	255
  5421  0064FA  142D               	andwf	___fldiv@grs,w,c
  5422  0064FC  6E22               	movwf	??___fldiv& (0+255),c
  5423  0064FE  0EFF               	movlw	255
  5424  006500  142E               	andwf	___fldiv@grs+1,w,c
  5425  006502  6E23               	movwf	(??___fldiv+1)& (0+255),c
  5426  006504  0EFF               	movlw	255
  5427  006506  142F               	andwf	___fldiv@grs+2,w,c
  5428  006508  6E24               	movwf	(??___fldiv+2)& (0+255),c
  5429  00650A  0E7F               	movlw	127
  5430  00650C  1430               	andwf	___fldiv@grs+3,w,c
  5431  00650E  6E25               	movwf	(??___fldiv+3)& (0+255),c
  5432  006510  5022               	movf	??___fldiv,w,c
  5433  006512  1023               	iorwf	??___fldiv+1,w,c
  5434  006514  1024               	iorwf	??___fldiv+2,w,c
  5435  006516  1025               	iorwf	??___fldiv+3,w,c
  5436  006518  B4D8               	btfsc	status,2,c
  5437  00651A  D003               	goto	l1456
  5438  00651C                     u2840:
  5439  00651C  0E01               	movlw	1
  5440  00651E  6E32               	movwf	___fldiv@aexp,c
  5441  006520  D002               	goto	l1455
  5442  006522                     l1456:
  5443  006522  B01A               	btfsc	___fldiv@b,0,c
  5444  006524  D7FB               	goto	u2840
  5445  006526                     l1455:
  5446  006526  5032               	movf	___fldiv@aexp,w,c
  5447  006528  B4D8               	btfsc	status,2,c
  5448  00652A  D01F               	goto	l3821
  5449  00652C  0E01               	movlw	1
  5450  00652E  261A               	addwf	___fldiv@b,f,c
  5451  006530  0E00               	movlw	0
  5452  006532  221B               	addwfc	___fldiv@b+1,f,c
  5453  006534  221C               	addwfc	___fldiv@b+2,f,c
  5454  006536  221D               	addwfc	___fldiv@b+3,f,c
  5455  006538  A01D               	btfss	___fldiv@b+3,0,c
  5456  00653A  D017               	goto	l3821
  5457  00653C  C01A  F022         	movff	___fldiv@b,??___fldiv
  5458  006540  C01B  F023         	movff	___fldiv@b+1,??___fldiv+1
  5459  006544  C01C  F024         	movff	___fldiv@b+2,??___fldiv+2
  5460  006548  C01D  F025         	movff	___fldiv@b+3,??___fldiv+3
  5461  00654C  3425               	rlcf	??___fldiv+3,w,c
  5462  00654E  3225               	rrcf	??___fldiv+3,f,c
  5463  006550  3224               	rrcf	??___fldiv+2,f,c
  5464  006552  3223               	rrcf	??___fldiv+1,f,c
  5465  006554  3222               	rrcf	??___fldiv,f,c
  5466  006556  C022  F01A         	movff	??___fldiv,___fldiv@b
  5467  00655A  C023  F01B         	movff	??___fldiv+1,___fldiv@b+1
  5468  00655E  C024  F01C         	movff	??___fldiv+2,___fldiv@b+2
  5469  006562  C025  F01D         	movff	??___fldiv+3,___fldiv@b+3
  5470  006566  4A2B               	infsnz	___fldiv@new_exp,f,c
  5471  006568  2A2C               	incf	___fldiv@new_exp+1,f,c
  5472  00656A                     l3821:
  5473  00656A  BE2C               	btfsc	___fldiv@new_exp+1,7,c
  5474  00656C  D010               	goto	l3825
  5475  00656E  502C               	movf	___fldiv@new_exp+1,w,c
  5476  006570  E103               	bnz	u2880
  5477  006572  282B               	incf	___fldiv@new_exp,w,c
  5478  006574  A0D8               	btfss	status,0,c
  5479  006576  D00B               	goto	l3825
  5480  006578                     u2880:
  5481  006578  0E00               	movlw	0
  5482  00657A  6E2C               	movwf	___fldiv@new_exp+1,c
  5483  00657C  682B               	setf	___fldiv@new_exp,c
  5484  00657E  0E00               	movlw	0
  5485  006580  6E1A               	movwf	___fldiv@b,c
  5486  006582  0E00               	movlw	0
  5487  006584  6E1B               	movwf	___fldiv@b+1,c
  5488  006586  0E00               	movlw	0
  5489  006588  6E1C               	movwf	___fldiv@b+2,c
  5490  00658A  0E00               	movlw	0
  5491  00658C  6E1D               	movwf	___fldiv@b+3,c
  5492  00658E                     l3825:
  5493  00658E  BE2C               	btfsc	___fldiv@new_exp+1,7,c
  5494  006590  D005               	goto	u2890
  5495  006592  502C               	movf	___fldiv@new_exp+1,w,c
  5496  006594  E111               	bnz	l3829
  5497  006596  042B               	decf	___fldiv@new_exp,w,c
  5498  006598  B0D8               	btfsc	status,0,c
  5499  00659A  D00E               	goto	l3829
  5500  00659C                     u2890:
  5501  00659C  0E00               	movlw	0
  5502  00659E  6E2C               	movwf	___fldiv@new_exp+1,c
  5503  0065A0  0E00               	movlw	0
  5504  0065A2  6E2B               	movwf	___fldiv@new_exp,c
  5505  0065A4  0E00               	movlw	0
  5506  0065A6  6E1A               	movwf	___fldiv@b,c
  5507  0065A8  0E00               	movlw	0
  5508  0065AA  6E1B               	movwf	___fldiv@b+1,c
  5509  0065AC  0E00               	movlw	0
  5510  0065AE  6E1C               	movwf	___fldiv@b+2,c
  5511  0065B0  0E00               	movlw	0
  5512  0065B2  6E1D               	movwf	___fldiv@b+3,c
  5513  0065B4  0E00               	movlw	0
  5514  0065B6  6E2A               	movwf	___fldiv@sign,c
  5515  0065B8                     l3829:
  5516  0065B8  C02B  F031         	movff	___fldiv@new_exp,___fldiv@bexp
  5517  0065BC  A031               	btfss	___fldiv@bexp,0,c
  5518  0065BE  D002               	goto	l3835
  5519  0065C0  8E1C               	bsf	___fldiv@b+2,7,c
  5520  0065C2  D001               	goto	l3837
  5521  0065C4                     l3835:
  5522  0065C4  9E1C               	bcf	___fldiv@b+2,7,c
  5523  0065C6                     l3837:
  5524  0065C6  90D8               	bcf	status,0,c
  5525  0065C8  3031               	rrcf	___fldiv@bexp,w,c
  5526  0065CA  6E1D               	movwf	___fldiv@b+3,c
  5527  0065CC  D70E               	goto	l3751
  5528  0065CE                     __end_of___fldiv:
  5529                           	opt callstack 0
  5530                           
  5531 ;; *************** function _msg2LCD *****************
  5532 ;; Defined at:
  5533 ;;		line 27 in file "lcd.c"
  5534 ;; Parameters:    Size  Location     Type
  5535 ;;  datos           2    2[COMRAM] PTR const unsigned char 
  5536 ;;		 -> STR_21(28), STR_20(5), STR_19(5), STR_18(5), 
  5537 ;;		 -> STR_15(5), STR_14(13), STR_13(3), STR_12(3), 
  5538 ;;		 -> STR_11(2), STR_10(4), STR_9(2), STR_8(4), 
  5539 ;;		 -> STR_7(4), STR_6(2), STR_5(4), STR_4(4), 
  5540 ;;		 -> STR_3(4), STR_2(2), STR_1(4), 
  5541 ;; Auto vars:     Size  Location     Type
  5542 ;;  i               4    4[COMRAM] unsigned long 
  5543 ;; Return value:  Size  Location     Type
  5544 ;;                  1    wreg      void 
  5545 ;; Registers used:
  5546 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5547 ;; Tracked objects:
  5548 ;;		On entry : 0/0
  5549 ;;		On exit  : 0/0
  5550 ;;		Unchanged: 0/0
  5551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5552 ;;      Params:         2       0       0       0       0       0       0       0       0
  5553 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5554 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5555 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5556 ;;Total ram usage:        6 bytes
  5557 ;; Hardware stack levels used:    1
  5558 ;; Hardware stack levels required when called:    4
  5559 ;; This function calls:
  5560 ;;		_write_DATA
  5561 ;; This function is called by:
  5562 ;;		_mefMenu
  5563 ;;		_descomposicion
  5564 ;;		_demo_shield2_1_INI
  5565 ;;		_demo_shield2_1
  5566 ;; This function uses a non-reentrant model
  5567 ;;
  5568                           
  5569                           	psect	text14
  5570  005958                     __ptext14:
  5571                           	opt callstack 0
  5572  005958                     _msg2LCD:
  5573                           	opt callstack 23
  5574                           
  5575                           ;lcd.c: 29: while (*datos != 0) {
  5576                           
  5577                           ;incstack = 0
  5578  005958  D021               	goto	l4091
  5579  00595A                     l4079:
  5580                           
  5581                           ;lcd.c: 30: write_DATA(*datos);
  5582  00595A  C003  FFF6         	movff	msg2LCD@datos,tblptrl
  5583  00595E  C004  FFF7         	movff	msg2LCD@datos+1,tblptrh
  5584  005962                     	if	0	;tblptru may be non-zero
  5585  005962                     	endif
  5586  005962                     	if	0	;tblptru may be non-zero
  5587  005962                     	endif
  5588  005962  0008               	tblrd		*
  5589  005964  50F5               	movf	tablat,w,c
  5590  005966  EC04  F010         	call	_write_DATA
  5591                           
  5592                           ;lcd.c: 32: for (unsigned long i = 0; i < 1000; i++);
  5593  00596A  0E00               	movlw	0
  5594  00596C  6E05               	movwf	msg2LCD@i,c
  5595  00596E  0E00               	movlw	0
  5596  005970  6E06               	movwf	msg2LCD@i+1,c
  5597  005972  0E00               	movlw	0
  5598  005974  6E07               	movwf	msg2LCD@i+2,c
  5599  005976  0E00               	movlw	0
  5600  005978  6E08               	movwf	msg2LCD@i+3,c
  5601  00597A                     l4087:
  5602  00597A  0E01               	movlw	1
  5603  00597C  2605               	addwf	msg2LCD@i,f,c
  5604  00597E  0E00               	movlw	0
  5605  005980  2206               	addwfc	msg2LCD@i+1,f,c
  5606  005982  2207               	addwfc	msg2LCD@i+2,f,c
  5607  005984  2208               	addwfc	msg2LCD@i+3,f,c
  5608  005986  5008               	movf	msg2LCD@i+3,w,c
  5609  005988  1007               	iorwf	msg2LCD@i+2,w,c
  5610  00598A  E106               	bnz	u3280
  5611  00598C  0EE8               	movlw	232
  5612  00598E  5C05               	subwf	msg2LCD@i,w,c
  5613  005990  0E03               	movlw	3
  5614  005992  5806               	subwfb	msg2LCD@i+1,w,c
  5615  005994  A0D8               	btfss	status,0,c
  5616  005996  D7F1               	goto	l4087
  5617  005998                     u3280:
  5618                           
  5619                           ;lcd.c: 33: datos++;
  5620  005998  4A03               	infsnz	msg2LCD@datos,f,c
  5621  00599A  2A04               	incf	msg2LCD@datos+1,f,c
  5622  00599C                     l4091:
  5623  00599C  C003  FFF6         	movff	msg2LCD@datos,tblptrl
  5624  0059A0  C004  FFF7         	movff	msg2LCD@datos+1,tblptrh
  5625  0059A4                     	if	0	;tblptru may be non-zero
  5626  0059A4                     	endif
  5627  0059A4                     	if	0	;tblptru may be non-zero
  5628  0059A4                     	endif
  5629  0059A4  0008               	tblrd		*
  5630  0059A6  50F5               	movf	tablat,w,c
  5631  0059A8  0900               	iorlw	0
  5632  0059AA  B4D8               	btfsc	status,2,c
  5633  0059AC  0012               	return	
  5634  0059AE  D7D5               	goto	l4079
  5635  0059B0                     __end_of_msg2LCD:
  5636                           	opt callstack 0
  5637                           
  5638 ;; *************** function _char2LCD *****************
  5639 ;; Defined at:
  5640 ;;		line 39 in file "lcd.c"
  5641 ;; Parameters:    Size  Location     Type
  5642 ;;  dato            1    wreg     unsigned char 
  5643 ;; Auto vars:     Size  Location     Type
  5644 ;;  dato            1    2[COMRAM] unsigned char 
  5645 ;;  i               4    3[COMRAM] unsigned long 
  5646 ;; Return value:  Size  Location     Type
  5647 ;;                  1    wreg      void 
  5648 ;; Registers used:
  5649 ;;		wreg, status,2, status,0, cstack
  5650 ;; Tracked objects:
  5651 ;;		On entry : 0/0
  5652 ;;		On exit  : 0/0
  5653 ;;		Unchanged: 0/0
  5654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5655 ;;      Params:         0       0       0       0       0       0       0       0       0
  5656 ;;      Locals:         5       0       0       0       0       0       0       0       0
  5657 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5658 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5659 ;;Total ram usage:        5 bytes
  5660 ;; Hardware stack levels used:    1
  5661 ;; Hardware stack levels required when called:    4
  5662 ;; This function calls:
  5663 ;;		_write_DATA
  5664 ;; This function is called by:
  5665 ;;		_mefMenu
  5666 ;;		_descomposicion
  5667 ;;		_demo_shield2_1
  5668 ;; This function uses a non-reentrant model
  5669 ;;
  5670                           
  5671                           	psect	text15
  5672  00589C                     __ptext15:
  5673                           	opt callstack 0
  5674  00589C                     _char2LCD:
  5675                           	opt callstack 23
  5676                           
  5677                           ;incstack = 0
  5678                           ;char2LCD@dato stored from wreg
  5679  00589C  6E03               	movwf	char2LCD@dato,c
  5680                           
  5681                           ;lcd.c: 41: write_DATA(dato);
  5682  00589E  5003               	movf	char2LCD@dato,w,c
  5683  0058A0  EC04  F010         	call	_write_DATA
  5684                           
  5685                           ;lcd.c: 43: for (unsigned long i = 0; i < 1000; i++);
  5686  0058A4  0E00               	movlw	0
  5687  0058A6  6E04               	movwf	char2LCD@i,c
  5688  0058A8  0E00               	movlw	0
  5689  0058AA  6E05               	movwf	char2LCD@i+1,c
  5690  0058AC  0E00               	movlw	0
  5691  0058AE  6E06               	movwf	char2LCD@i+2,c
  5692  0058B0  0E00               	movlw	0
  5693  0058B2  6E07               	movwf	char2LCD@i+3,c
  5694  0058B4                     l4101:
  5695  0058B4  0E01               	movlw	1
  5696  0058B6  2604               	addwf	char2LCD@i,f,c
  5697  0058B8  0E00               	movlw	0
  5698  0058BA  2205               	addwfc	char2LCD@i+1,f,c
  5699  0058BC  2206               	addwfc	char2LCD@i+2,f,c
  5700  0058BE  2207               	addwfc	char2LCD@i+3,f,c
  5701  0058C0  5007               	movf	char2LCD@i+3,w,c
  5702  0058C2  1006               	iorwf	char2LCD@i+2,w,c
  5703  0058C4  E107               	bnz	u3300
  5704  0058C6  0EE8               	movlw	232
  5705  0058C8  5C04               	subwf	char2LCD@i,w,c
  5706  0058CA  0E03               	movlw	3
  5707  0058CC  5805               	subwfb	char2LCD@i+1,w,c
  5708  0058CE  B0D8               	btfsc	status,0,c
  5709  0058D0  0012               	return	
  5710  0058D2  D7F0               	goto	l4101
  5711  0058D4                     u3300:
  5712  0058D4  0012               	return		;funcret
  5713  0058D6                     __end_of_char2LCD:
  5714                           	opt callstack 0
  5715                           
  5716 ;; *************** function _write_DATA *****************
  5717 ;; Defined at:
  5718 ;;		line 120 in file "lcd.c"
  5719 ;; Parameters:    Size  Location     Type
  5720 ;;  dato            1    wreg     unsigned char 
  5721 ;; Auto vars:     Size  Location     Type
  5722 ;;  dato            1    1[COMRAM] unsigned char 
  5723 ;; Return value:  Size  Location     Type
  5724 ;;                  1    wreg      void 
  5725 ;; Registers used:
  5726 ;;		wreg, status,2, status,0, cstack
  5727 ;; Tracked objects:
  5728 ;;		On entry : 0/0
  5729 ;;		On exit  : 0/0
  5730 ;;		Unchanged: 0/0
  5731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5732 ;;      Params:         0       0       0       0       0       0       0       0       0
  5733 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5734 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5735 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5736 ;;Total ram usage:        1 bytes
  5737 ;; Hardware stack levels used:    1
  5738 ;; Hardware stack levels required when called:    3
  5739 ;; This function calls:
  5740 ;;		_write_LCD
  5741 ;; This function is called by:
  5742 ;;		_msg2LCD
  5743 ;;		_char2LCD
  5744 ;; This function uses a non-reentrant model
  5745 ;;
  5746                           
  5747                           	psect	text16
  5748  002008                     __ptext16:
  5749                           	opt callstack 0
  5750  002008                     _write_DATA:
  5751                           	opt callstack 23
  5752                           
  5753                           ;incstack = 0
  5754                           ;write_DATA@dato stored from wreg
  5755  002008  6E02               	movwf	write_DATA@dato,c
  5756                           
  5757                           ;lcd.c: 122: PORTEbits.RE1 = 0x1;
  5758  00200A  8284               	bsf	3972,1,c	;volatile
  5759                           
  5760                           ;lcd.c: 123: PORTEbits.RE0 = 0x0;
  5761  00200C  9084               	bcf	3972,0,c	;volatile
  5762                           
  5763                           ;lcd.c: 124: write_LCD(dato);
  5764  00200E  5002               	movf	write_DATA@dato,w,c
  5765  002010  ECA2  F02B         	call	_write_LCD
  5766  002014  0012               	return		;funcret
  5767  002016                     __end_of_write_DATA:
  5768                           	opt callstack 0
  5769                           
  5770 ;; *************** function ___fladd *****************
  5771 ;; Defined at:
  5772 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\sprcadd.c"
  5773 ;; Parameters:    Size  Location     Type
  5774 ;;  b               4    0[COMRAM] void 
  5775 ;;  a               4    4[COMRAM] void 
  5776 ;; Auto vars:     Size  Location     Type
  5777 ;;  grs             1   15[COMRAM] unsigned char 
  5778 ;;  bexp            1   14[COMRAM] unsigned char 
  5779 ;;  aexp            1   13[COMRAM] unsigned char 
  5780 ;;  signs           1   12[COMRAM] unsigned char 
  5781 ;; Return value:  Size  Location     Type
  5782 ;;                  4    0[COMRAM] unsigned char 
  5783 ;; Registers used:
  5784 ;;		wreg, status,2, status,0
  5785 ;; Tracked objects:
  5786 ;;		On entry : 0/0
  5787 ;;		On exit  : 0/0
  5788 ;;		Unchanged: 0/0
  5789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5790 ;;      Params:         8       0       0       0       0       0       0       0       0
  5791 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5792 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5793 ;;      Totals:        16       0       0       0       0       0       0       0       0
  5794 ;;Total ram usage:       16 bytes
  5795 ;; Hardware stack levels used:    1
  5796 ;; Hardware stack levels required when called:    2
  5797 ;; This function calls:
  5798 ;;		Nothing
  5799 ;; This function is called by:
  5800 ;;		_descomposicion
  5801 ;; This function uses a non-reentrant model
  5802 ;;
  5803                           
  5804                           	psect	text17
  5805  00687A                     __ptext17:
  5806                           	opt callstack 0
  5807  00687A                     ___fladd:
  5808                           	opt callstack 25
  5809                           
  5810                           ;incstack = 0
  5811  00687A  5004               	movf	___fladd@b+3,w,c
  5812  00687C  0B80               	andlw	128
  5813  00687E  6E0D               	movwf	___fladd@signs,c
  5814  006880  5004               	movf	___fladd@b+3,w,c
  5815  006882  2404               	addwf	___fladd@b+3,w,c
  5816  006884  6E0F               	movwf	___fladd@bexp,c
  5817  006886  BE03               	btfsc	___fladd@b+2,7,c
  5818  006888  800F               	bsf	___fladd@bexp,0,c
  5819  00688A  500F               	movf	___fladd@bexp,w,c
  5820  00688C  B4D8               	btfsc	status,2,c
  5821  00688E  D00D               	goto	l4207
  5822  006890  280F               	incf	___fladd@bexp,w,c
  5823  006892  A4D8               	btfss	status,2,c
  5824  006894  D008               	goto	l4203
  5825  006896  0E00               	movlw	0
  5826  006898  6E01               	movwf	___fladd@b,c
  5827  00689A  0E00               	movlw	0
  5828  00689C  6E02               	movwf	___fladd@b+1,c
  5829  00689E  0E00               	movlw	0
  5830  0068A0  6E03               	movwf	___fladd@b+2,c
  5831  0068A2  0E00               	movlw	0
  5832  0068A4  6E04               	movwf	___fladd@b+3,c
  5833  0068A6                     l4203:
  5834  0068A6  8E03               	bsf	___fladd@b+2,7,c
  5835  0068A8  D006               	goto	L12
  5836  0068AA                     l4207:
  5837  0068AA  0E00               	movlw	0
  5838  0068AC  6E01               	movwf	___fladd@b,c
  5839  0068AE  0E00               	movlw	0
  5840  0068B0  6E02               	movwf	___fladd@b+1,c
  5841  0068B2  0E00               	movlw	0
  5842  0068B4  6E03               	movwf	___fladd@b+2,c
  5843  0068B6                     L12:
  5844  0068B6  0E00               	movlw	0
  5845  0068B8  6E04               	movwf	___fladd@b+3,c
  5846  0068BA  5008               	movf	___fladd@a+3,w,c
  5847  0068BC  0B80               	andlw	128
  5848  0068BE  6E0E               	movwf	___fladd@aexp,c
  5849  0068C0  500D               	movf	___fladd@signs,w,c
  5850  0068C2  180E               	xorwf	___fladd@aexp,w,c
  5851  0068C4  A4D8               	btfss	status,2,c
  5852  0068C6  8C0D               	bsf	___fladd@signs,6,c
  5853  0068C8  5008               	movf	___fladd@a+3,w,c
  5854  0068CA  2408               	addwf	___fladd@a+3,w,c
  5855  0068CC  6E0E               	movwf	___fladd@aexp,c
  5856  0068CE  BE07               	btfsc	___fladd@a+2,7,c
  5857  0068D0  800E               	bsf	___fladd@aexp,0,c
  5858  0068D2  500E               	movf	___fladd@aexp,w,c
  5859  0068D4  B4D8               	btfsc	status,2,c
  5860  0068D6  D00D               	goto	l4231
  5861  0068D8  280E               	incf	___fladd@aexp,w,c
  5862  0068DA  A4D8               	btfss	status,2,c
  5863  0068DC  D008               	goto	l4227
  5864  0068DE  0E00               	movlw	0
  5865  0068E0  6E05               	movwf	___fladd@a,c
  5866  0068E2  0E00               	movlw	0
  5867  0068E4  6E06               	movwf	___fladd@a+1,c
  5868  0068E6  0E00               	movlw	0
  5869  0068E8  6E07               	movwf	___fladd@a+2,c
  5870  0068EA  0E00               	movlw	0
  5871  0068EC  6E08               	movwf	___fladd@a+3,c
  5872  0068EE                     l4227:
  5873  0068EE  8E07               	bsf	___fladd@a+2,7,c
  5874  0068F0  D006               	goto	L13
  5875  0068F2                     l4231:
  5876  0068F2  0E00               	movlw	0
  5877  0068F4  6E05               	movwf	___fladd@a,c
  5878  0068F6  0E00               	movlw	0
  5879  0068F8  6E06               	movwf	___fladd@a+1,c
  5880  0068FA  0E00               	movlw	0
  5881  0068FC  6E07               	movwf	___fladd@a+2,c
  5882  0068FE                     L13:
  5883  0068FE  0E00               	movlw	0
  5884  006900  6E08               	movwf	___fladd@a+3,c
  5885  006902  500F               	movf	___fladd@bexp,w,c
  5886  006904  5C0E               	subwf	___fladd@aexp,w,c
  5887  006906  B0D8               	btfsc	status,0,c
  5888  006908  D022               	goto	l4269
  5889  00690A  AC0D               	btfss	___fladd@signs,6,c
  5890  00690C  D002               	goto	l4239
  5891  00690E  0E80               	movlw	128
  5892  006910  1A0D               	xorwf	___fladd@signs,f,c
  5893  006912                     l4239:
  5894  006912  C00F  F010         	movff	___fladd@bexp,___fladd@grs
  5895  006916  C00E  F00F         	movff	___fladd@aexp,___fladd@bexp
  5896  00691A  C010  F00E         	movff	___fladd@grs,___fladd@aexp
  5897  00691E  C001  F010         	movff	___fladd@b,___fladd@grs
  5898  006922  C005  F001         	movff	___fladd@a,___fladd@b
  5899  006926  C010  F005         	movff	___fladd@grs,___fladd@a
  5900  00692A  C002  F010         	movff	___fladd@b+1,___fladd@grs
  5901  00692E  C006  F002         	movff	___fladd@a+1,___fladd@b+1
  5902  006932  C010  F006         	movff	___fladd@grs,___fladd@a+1
  5903  006936  C003  F010         	movff	___fladd@b+2,___fladd@grs
  5904  00693A  C007  F003         	movff	___fladd@a+2,___fladd@b+2
  5905  00693E  C010  F007         	movff	___fladd@grs,___fladd@a+2
  5906  006942  C004  F010         	movff	___fladd@b+3,___fladd@grs
  5907  006946  C008  F004         	movff	___fladd@a+3,___fladd@b+3
  5908  00694A  C010  F008         	movff	___fladd@grs,___fladd@a+3
  5909  00694E                     l4269:
  5910  00694E  0E00               	movlw	0
  5911  006950  6E10               	movwf	___fladd@grs,c
  5912  006952  500F               	movf	___fladd@bexp,w,c
  5913  006954  C00E  F009         	movff	___fladd@aexp,??___fladd
  5914  006958  6A0A               	clrf	(??___fladd+1)& (0+255),c
  5915  00695A  5E09               	subwf	??___fladd,f,c
  5916  00695C  0E00               	movlw	0
  5917  00695E  5A0A               	subwfb	??___fladd+1,f,c
  5918  006960  BE0A               	btfsc	??___fladd+1,7,c
  5919  006962  D02C               	goto	l1389
  5920  006964  500A               	movf	??___fladd+1,w,c
  5921  006966  E104               	bnz	u3520
  5922  006968  0E1A               	movlw	26
  5923  00696A  5C09               	subwf	??___fladd,w,c
  5924  00696C  A0D8               	btfss	status,0,c
  5925  00696E  D026               	goto	l1389
  5926  006970                     u3520:
  5927  006970  5001               	movf	___fladd@b,w,c
  5928  006972  1002               	iorwf	___fladd@b+1,w,c
  5929  006974  1003               	iorwf	___fladd@b+2,w,c
  5930  006976  1004               	iorwf	___fladd@b+3,w,c
  5931  006978  B4D8               	btfsc	status,2,c
  5932  00697A  D002               	goto	u3530
  5933  00697C  0E01               	movlw	1
  5934  00697E  D001               	goto	u3540
  5935  006980                     u3530:
  5936  006980  0E00               	movlw	0
  5937  006982                     u3540:
  5938  006982  6E10               	movwf	___fladd@grs,c
  5939  006984  0E00               	movlw	0
  5940  006986  6E01               	movwf	___fladd@b,c
  5941  006988  0E00               	movlw	0
  5942  00698A  6E02               	movwf	___fladd@b+1,c
  5943  00698C  0E00               	movlw	0
  5944  00698E  6E03               	movwf	___fladd@b+2,c
  5945  006990  0E00               	movlw	0
  5946  006992  6E04               	movwf	___fladd@b+3,c
  5947  006994  C00E  F00F         	movff	___fladd@aexp,___fladd@bexp
  5948  006998  D015               	goto	u3570
  5949  00699A                     l1390:
  5950  00699A  A010               	btfss	___fladd@grs,0,c
  5951  00699C  D005               	goto	l4281
  5952  00699E  90D8               	bcf	status,0,c
  5953  0069A0  3010               	rrcf	___fladd@grs,w,c
  5954  0069A2  0901               	iorlw	1
  5955  0069A4  6E10               	movwf	___fladd@grs,c
  5956  0069A6  D002               	goto	l4283
  5957  0069A8                     l4281:
  5958  0069A8  90D8               	bcf	status,0,c
  5959  0069AA  3210               	rrcf	___fladd@grs,f,c
  5960  0069AC                     l4283:
  5961  0069AC  B001               	btfsc	___fladd@b,0,c
  5962  0069AE  8E10               	bsf	___fladd@grs,7,c
  5963  0069B0  3404               	rlcf	___fladd@b+3,w,c
  5964  0069B2  3204               	rrcf	___fladd@b+3,f,c
  5965  0069B4  3203               	rrcf	___fladd@b+2,f,c
  5966  0069B6  3202               	rrcf	___fladd@b+1,f,c
  5967  0069B8  3201               	rrcf	___fladd@b,f,c
  5968  0069BA  2A0F               	incf	___fladd@bexp,f,c
  5969  0069BC                     l1389:
  5970  0069BC  500E               	movf	___fladd@aexp,w,c
  5971  0069BE  5C0F               	subwf	___fladd@bexp,w,c
  5972  0069C0  A0D8               	btfss	status,0,c
  5973  0069C2  D7EB               	goto	l1390
  5974  0069C4                     u3570:
  5975  0069C4  BC0D               	btfsc	___fladd@signs,6,c
  5976  0069C6  D028               	goto	l4315
  5977  0069C8  500F               	movf	___fladd@bexp,w,c
  5978  0069CA  A4D8               	btfss	status,2,c
  5979  0069CC  D009               	goto	l4297
  5980  0069CE  0E00               	movlw	0
  5981  0069D0  6E01               	movwf	?___fladd,c
  5982  0069D2  0E00               	movlw	0
  5983  0069D4  6E02               	movwf	?___fladd+1,c
  5984  0069D6  0E00               	movlw	0
  5985  0069D8  6E03               	movwf	?___fladd+2,c
  5986  0069DA  0E00               	movlw	0
  5987  0069DC  6E04               	movwf	?___fladd+3,c
  5988  0069DE  0012               	return	
  5989  0069E0                     l4297:
  5990  0069E0  5005               	movf	___fladd@a,w,c
  5991  0069E2  2601               	addwf	___fladd@b,f,c
  5992  0069E4  5006               	movf	___fladd@a+1,w,c
  5993  0069E6  2202               	addwfc	___fladd@b+1,f,c
  5994  0069E8  5007               	movf	___fladd@a+2,w,c
  5995  0069EA  2203               	addwfc	___fladd@b+2,f,c
  5996  0069EC  5008               	movf	___fladd@a+3,w,c
  5997  0069EE  2204               	addwfc	___fladd@b+3,f,c
  5998  0069F0  A004               	btfss	___fladd@b+3,0,c
  5999  0069F2  D071               	goto	u3700
  6000  0069F4  A010               	btfss	___fladd@grs,0,c
  6001  0069F6  D005               	goto	l4305
  6002  0069F8  90D8               	bcf	status,0,c
  6003  0069FA  3010               	rrcf	___fladd@grs,w,c
  6004  0069FC  0901               	iorlw	1
  6005  0069FE  6E10               	movwf	___fladd@grs,c
  6006  006A00  D002               	goto	l4307
  6007  006A02                     l4305:
  6008  006A02  90D8               	bcf	status,0,c
  6009  006A04  3210               	rrcf	___fladd@grs,f,c
  6010  006A06                     l4307:
  6011  006A06  B001               	btfsc	___fladd@b,0,c
  6012  006A08  8E10               	bsf	___fladd@grs,7,c
  6013  006A0A  3404               	rlcf	___fladd@b+3,w,c
  6014  006A0C  3204               	rrcf	___fladd@b+3,f,c
  6015  006A0E  3203               	rrcf	___fladd@b+2,f,c
  6016  006A10  3202               	rrcf	___fladd@b+1,f,c
  6017  006A12  3201               	rrcf	___fladd@b,f,c
  6018  006A14  2A0F               	incf	___fladd@bexp,f,c
  6019  006A16  D05F               	goto	u3700
  6020  006A18                     l4315:
  6021  006A18  5005               	movf	___fladd@a,w,c
  6022  006A1A  5C01               	subwf	___fladd@b,w,c
  6023  006A1C  5006               	movf	___fladd@a+1,w,c
  6024  006A1E  5802               	subwfb	___fladd@b+1,w,c
  6025  006A20  5007               	movf	___fladd@a+2,w,c
  6026  006A22  5803               	subwfb	___fladd@b+2,w,c
  6027  006A24  5004               	movf	___fladd@b+3,w,c
  6028  006A26  0A80               	xorlw	128
  6029  006A28  6E09               	movwf	??___fladd& (0+255),c
  6030  006A2A  5008               	movf	___fladd@a+3,w,c
  6031  006A2C  0A80               	xorlw	128
  6032  006A2E  5809               	subwfb	??___fladd& (0+255),w,c
  6033  006A30  B0D8               	btfsc	status,0,c
  6034  006A32  D025               	goto	l4325
  6035  006A34  5001               	movf	___fladd@b,w,c
  6036  006A36  5C05               	subwf	___fladd@a,w,c
  6037  006A38  6E09               	movwf	??___fladd& (0+255),c
  6038  006A3A  5002               	movf	___fladd@b+1,w,c
  6039  006A3C  5806               	subwfb	___fladd@a+1,w,c
  6040  006A3E  6E0A               	movwf	(??___fladd+1)& (0+255),c
  6041  006A40  5003               	movf	___fladd@b+2,w,c
  6042  006A42  5807               	subwfb	___fladd@a+2,w,c
  6043  006A44  6E0B               	movwf	(??___fladd+2)& (0+255),c
  6044  006A46  5004               	movf	___fladd@b+3,w,c
  6045  006A48  5808               	subwfb	___fladd@a+3,w,c
  6046  006A4A  6E0C               	movwf	(??___fladd+3)& (0+255),c
  6047  006A4C  0EFF               	movlw	255
  6048  006A4E  2409               	addwf	??___fladd,w,c
  6049  006A50  6E01               	movwf	___fladd@b,c
  6050  006A52  0EFF               	movlw	255
  6051  006A54  200A               	addwfc	??___fladd+1,w,c
  6052  006A56  6E02               	movwf	___fladd@b+1,c
  6053  006A58  0EFF               	movlw	255
  6054  006A5A  200B               	addwfc	??___fladd+2,w,c
  6055  006A5C  6E03               	movwf	___fladd@b+2,c
  6056  006A5E  0EFF               	movlw	255
  6057  006A60  200C               	addwfc	??___fladd+3,w,c
  6058  006A62  6E04               	movwf	___fladd@b+3,c
  6059  006A64  0E80               	movlw	128
  6060  006A66  1A0D               	xorwf	___fladd@signs,f,c
  6061  006A68  6C10               	negf	___fladd@grs,c
  6062  006A6A  5010               	movf	___fladd@grs,w,c
  6063  006A6C  A4D8               	btfss	status,2,c
  6064  006A6E  D00F               	goto	l1405
  6065  006A70  0E01               	movlw	1
  6066  006A72  2601               	addwf	___fladd@b,f,c
  6067  006A74  0E00               	movlw	0
  6068  006A76  2202               	addwfc	___fladd@b+1,f,c
  6069  006A78  2203               	addwfc	___fladd@b+2,f,c
  6070  006A7A  2204               	addwfc	___fladd@b+3,f,c
  6071  006A7C  D008               	goto	l1405
  6072  006A7E                     l4325:
  6073  006A7E  5005               	movf	___fladd@a,w,c
  6074  006A80  5E01               	subwf	___fladd@b,f,c
  6075  006A82  5006               	movf	___fladd@a+1,w,c
  6076  006A84  5A02               	subwfb	___fladd@b+1,f,c
  6077  006A86  5007               	movf	___fladd@a+2,w,c
  6078  006A88  5A03               	subwfb	___fladd@b+2,f,c
  6079  006A8A  5008               	movf	___fladd@a+3,w,c
  6080  006A8C  5A04               	subwfb	___fladd@b+3,f,c
  6081  006A8E                     l1405:
  6082  006A8E  5001               	movf	___fladd@b,w,c
  6083  006A90  1002               	iorwf	___fladd@b+1,w,c
  6084  006A92  1003               	iorwf	___fladd@b+2,w,c
  6085  006A94  1004               	iorwf	___fladd@b+3,w,c
  6086  006A96  A4D8               	btfss	status,2,c
  6087  006A98  D01C               	goto	l4349
  6088  006A9A  5010               	movf	___fladd@grs,w,c
  6089  006A9C  A4D8               	btfss	status,2,c
  6090  006A9E  D019               	goto	l4349
  6091  006AA0  0E00               	movlw	0
  6092  006AA2  6E01               	movwf	?___fladd,c
  6093  006AA4  0E00               	movlw	0
  6094  006AA6  6E02               	movwf	?___fladd+1,c
  6095  006AA8  0E00               	movlw	0
  6096  006AAA  6E03               	movwf	?___fladd+2,c
  6097  006AAC  0E00               	movlw	0
  6098  006AAE  6E04               	movwf	?___fladd+3,c
  6099  006AB0  0012               	return	
  6100  006AB2                     l4333:
  6101  006AB2  90D8               	bcf	status,0,c
  6102  006AB4  3601               	rlcf	___fladd@b,f,c
  6103  006AB6  3602               	rlcf	___fladd@b+1,f,c
  6104  006AB8  3603               	rlcf	___fladd@b+2,f,c
  6105  006ABA  3604               	rlcf	___fladd@b+3,f,c
  6106  006ABC  BE10               	btfsc	___fladd@grs,7,c
  6107  006ABE  8001               	bsf	___fladd@b,0,c
  6108  006AC0  A010               	btfss	___fladd@grs,0,c
  6109  006AC2  D002               	goto	l4343
  6110  006AC4  80D8               	bsf	status,0,c
  6111  006AC6  D001               	goto	L14
  6112  006AC8                     l4343:
  6113  006AC8  90D8               	bcf	status,0,c
  6114  006ACA                     L14:
  6115  006ACA  3610               	rlcf	___fladd@grs,f,c
  6116  006ACC  500F               	movf	___fladd@bexp,w,c
  6117  006ACE  A4D8               	btfss	status,2,c
  6118  006AD0  060F               	decf	___fladd@bexp,f,c
  6119  006AD2                     l4349:
  6120  006AD2  AE03               	btfss	___fladd@b+2,7,c
  6121  006AD4  D7EE               	goto	l4333
  6122  006AD6                     u3700:
  6123  006AD6  0E00               	movlw	0
  6124  006AD8  6E0E               	movwf	___fladd@aexp,c
  6125  006ADA  AE10               	btfss	___fladd@grs,7,c
  6126  006ADC  D00B               	goto	l1414
  6127  006ADE  C010  F009         	movff	___fladd@grs,??___fladd
  6128  006AE2  0E7F               	movlw	127
  6129  006AE4  1609               	andwf	??___fladd,f,c
  6130  006AE6  B4D8               	btfsc	status,2,c
  6131  006AE8  D003               	goto	l1415
  6132  006AEA                     u3720:
  6133  006AEA  0E01               	movlw	1
  6134  006AEC  6E0E               	movwf	___fladd@aexp,c
  6135  006AEE  D002               	goto	l1414
  6136  006AF0                     l1415:
  6137  006AF0  B001               	btfsc	___fladd@b,0,c
  6138  006AF2  D7FB               	goto	u3720
  6139  006AF4                     l1414:
  6140  006AF4  500E               	movf	___fladd@aexp,w,c
  6141  006AF6  B4D8               	btfsc	status,2,c
  6142  006AF8  D020               	goto	l4369
  6143  006AFA  0E01               	movlw	1
  6144  006AFC  2601               	addwf	___fladd@b,f,c
  6145  006AFE  0E00               	movlw	0
  6146  006B00  2202               	addwfc	___fladd@b+1,f,c
  6147  006B02  2203               	addwfc	___fladd@b+2,f,c
  6148  006B04  2204               	addwfc	___fladd@b+3,f,c
  6149  006B06  A004               	btfss	___fladd@b+3,0,c
  6150  006B08  D018               	goto	l4369
  6151  006B0A  C001  F009         	movff	___fladd@b,??___fladd
  6152  006B0E  C002  F00A         	movff	___fladd@b+1,??___fladd+1
  6153  006B12  C003  F00B         	movff	___fladd@b+2,??___fladd+2
  6154  006B16  C004  F00C         	movff	___fladd@b+3,??___fladd+3
  6155  006B1A  340C               	rlcf	??___fladd+3,w,c
  6156  006B1C  320C               	rrcf	??___fladd+3,f,c
  6157  006B1E  320B               	rrcf	??___fladd+2,f,c
  6158  006B20  320A               	rrcf	??___fladd+1,f,c
  6159  006B22  3209               	rrcf	??___fladd,f,c
  6160  006B24  C009  F001         	movff	??___fladd,___fladd@b
  6161  006B28  C00A  F002         	movff	??___fladd+1,___fladd@b+1
  6162  006B2C  C00B  F003         	movff	??___fladd+2,___fladd@b+2
  6163  006B30  C00C  F004         	movff	??___fladd+3,___fladd@b+3
  6164  006B34  280F               	incf	___fladd@bexp,w,c
  6165  006B36  A4D8               	btfss	status,2,c
  6166  006B38  2A0F               	incf	___fladd@bexp,f,c
  6167  006B3A                     l4369:
  6168  006B3A  280F               	incf	___fladd@bexp,w,c
  6169  006B3C  B4D8               	btfsc	status,2,c
  6170  006B3E  D003               	goto	u3780
  6171  006B40  500F               	movf	___fladd@bexp,w,c
  6172  006B42  A4D8               	btfss	status,2,c
  6173  006B44  D00D               	goto	l4377
  6174  006B46                     u3780:
  6175  006B46  0E00               	movlw	0
  6176  006B48  6E01               	movwf	___fladd@b,c
  6177  006B4A  0E00               	movlw	0
  6178  006B4C  6E02               	movwf	___fladd@b+1,c
  6179  006B4E  0E00               	movlw	0
  6180  006B50  6E03               	movwf	___fladd@b+2,c
  6181  006B52  0E00               	movlw	0
  6182  006B54  6E04               	movwf	___fladd@b+3,c
  6183  006B56  500F               	movf	___fladd@bexp,w,c
  6184  006B58  A4D8               	btfss	status,2,c
  6185  006B5A  D002               	goto	l4377
  6186  006B5C  0E00               	movlw	0
  6187  006B5E  6E0D               	movwf	___fladd@signs,c
  6188  006B60                     l4377:
  6189  006B60  A00F               	btfss	___fladd@bexp,0,c
  6190  006B62  D002               	goto	l4381
  6191  006B64  8E03               	bsf	___fladd@b+2,7,c
  6192  006B66  D001               	goto	l4383
  6193  006B68                     l4381:
  6194  006B68  9E03               	bcf	___fladd@b+2,7,c
  6195  006B6A                     l4383:
  6196  006B6A  90D8               	bcf	status,0,c
  6197  006B6C  300F               	rrcf	___fladd@bexp,w,c
  6198  006B6E  6E04               	movwf	___fladd@b+3,c
  6199  006B70  BE0D               	btfsc	___fladd@signs,7,c
  6200  006B72  8E04               	bsf	___fladd@b+3,7,c
  6201  006B74  C001  F001         	movff	___fladd@b,?___fladd
  6202  006B78  C002  F002         	movff	___fladd@b+1,?___fladd+1
  6203  006B7C  C003  F003         	movff	___fladd@b+2,?___fladd+2
  6204  006B80  C004  F004         	movff	___fladd@b+3,?___fladd+3
  6205  006B84  0012               	return		;funcret
  6206  006B86                     __end_of___fladd:
  6207                           	opt callstack 0
  6208                           
  6209 ;; *************** function ___almod *****************
  6210 ;; Defined at:
  6211 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\almod.c"
  6212 ;; Parameters:    Size  Location     Type
  6213 ;;  dividend        4   54[COMRAM] long 
  6214 ;;  divisor         4   58[COMRAM] long 
  6215 ;; Auto vars:     Size  Location     Type
  6216 ;;  sign            1   63[COMRAM] unsigned char 
  6217 ;;  counter         1   62[COMRAM] unsigned char 
  6218 ;; Return value:  Size  Location     Type
  6219 ;;                  4   54[COMRAM] long 
  6220 ;; Registers used:
  6221 ;;		wreg, status,2, status,0
  6222 ;; Tracked objects:
  6223 ;;		On entry : 0/0
  6224 ;;		On exit  : 0/0
  6225 ;;		Unchanged: 0/0
  6226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6227 ;;      Params:         8       0       0       0       0       0       0       0       0
  6228 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6229 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6230 ;;      Totals:        10       0       0       0       0       0       0       0       0
  6231 ;;Total ram usage:       10 bytes
  6232 ;; Hardware stack levels used:    1
  6233 ;; Hardware stack levels required when called:    2
  6234 ;; This function calls:
  6235 ;;		Nothing
  6236 ;; This function is called by:
  6237 ;;		_mefMenu
  6238 ;;		_descomposicion
  6239 ;; This function uses a non-reentrant model
  6240 ;;
  6241                           
  6242                           	psect	text18
  6243  005ABA                     __ptext18:
  6244                           	opt callstack 0
  6245  005ABA                     ___almod:
  6246                           	opt callstack 25
  6247                           
  6248                           ;incstack = 0
  6249  005ABA  0E00               	movlw	0
  6250  005ABC  6E40               	movwf	___almod@sign,c
  6251  005ABE  AE3A               	btfss	___almod@dividend+3,7,c
  6252  005AC0  D00A               	goto	l4163
  6253  005AC2  1E3A               	comf	___almod@dividend+3,f,c
  6254  005AC4  1E39               	comf	___almod@dividend+2,f,c
  6255  005AC6  1E38               	comf	___almod@dividend+1,f,c
  6256  005AC8  6C37               	negf	___almod@dividend,c
  6257  005ACA  0E00               	movlw	0
  6258  005ACC  2238               	addwfc	___almod@dividend+1,f,c
  6259  005ACE  2239               	addwfc	___almod@dividend+2,f,c
  6260  005AD0  223A               	addwfc	___almod@dividend+3,f,c
  6261  005AD2  0E01               	movlw	1
  6262  005AD4  6E40               	movwf	___almod@sign,c
  6263  005AD6                     l4163:
  6264  005AD6  AE3E               	btfss	___almod@divisor+3,7,c
  6265  005AD8  D008               	goto	l4167
  6266  005ADA  1E3E               	comf	___almod@divisor+3,f,c
  6267  005ADC  1E3D               	comf	___almod@divisor+2,f,c
  6268  005ADE  1E3C               	comf	___almod@divisor+1,f,c
  6269  005AE0  6C3B               	negf	___almod@divisor,c
  6270  005AE2  0E00               	movlw	0
  6271  005AE4  223C               	addwfc	___almod@divisor+1,f,c
  6272  005AE6  223D               	addwfc	___almod@divisor+2,f,c
  6273  005AE8  223E               	addwfc	___almod@divisor+3,f,c
  6274  005AEA                     l4167:
  6275  005AEA  503B               	movf	___almod@divisor,w,c
  6276  005AEC  103C               	iorwf	___almod@divisor+1,w,c
  6277  005AEE  103D               	iorwf	___almod@divisor+2,w,c
  6278  005AF0  103E               	iorwf	___almod@divisor+3,w,c
  6279  005AF2  B4D8               	btfsc	status,2,c
  6280  005AF4  D024               	goto	l4183
  6281  005AF6  0E01               	movlw	1
  6282  005AF8  6E3F               	movwf	___almod@counter,c
  6283  005AFA  D006               	goto	l4173
  6284  005AFC                     l4171:
  6285  005AFC  90D8               	bcf	status,0,c
  6286  005AFE  363B               	rlcf	___almod@divisor,f,c
  6287  005B00  363C               	rlcf	___almod@divisor+1,f,c
  6288  005B02  363D               	rlcf	___almod@divisor+2,f,c
  6289  005B04  363E               	rlcf	___almod@divisor+3,f,c
  6290  005B06  2A3F               	incf	___almod@counter,f,c
  6291  005B08                     l4173:
  6292  005B08  AE3E               	btfss	___almod@divisor+3,7,c
  6293  005B0A  D7F8               	goto	l4171
  6294  005B0C                     u3400:
  6295  005B0C  503B               	movf	___almod@divisor,w,c
  6296  005B0E  5C37               	subwf	___almod@dividend,w,c
  6297  005B10  503C               	movf	___almod@divisor+1,w,c
  6298  005B12  5838               	subwfb	___almod@dividend+1,w,c
  6299  005B14  503D               	movf	___almod@divisor+2,w,c
  6300  005B16  5839               	subwfb	___almod@dividend+2,w,c
  6301  005B18  503E               	movf	___almod@divisor+3,w,c
  6302  005B1A  583A               	subwfb	___almod@dividend+3,w,c
  6303  005B1C  A0D8               	btfss	status,0,c
  6304  005B1E  D008               	goto	l4179
  6305  005B20  503B               	movf	___almod@divisor,w,c
  6306  005B22  5E37               	subwf	___almod@dividend,f,c
  6307  005B24  503C               	movf	___almod@divisor+1,w,c
  6308  005B26  5A38               	subwfb	___almod@dividend+1,f,c
  6309  005B28  503D               	movf	___almod@divisor+2,w,c
  6310  005B2A  5A39               	subwfb	___almod@dividend+2,f,c
  6311  005B2C  503E               	movf	___almod@divisor+3,w,c
  6312  005B2E  5A3A               	subwfb	___almod@dividend+3,f,c
  6313  005B30                     l4179:
  6314  005B30  90D8               	bcf	status,0,c
  6315  005B32  323E               	rrcf	___almod@divisor+3,f,c
  6316  005B34  323D               	rrcf	___almod@divisor+2,f,c
  6317  005B36  323C               	rrcf	___almod@divisor+1,f,c
  6318  005B38  323B               	rrcf	___almod@divisor,f,c
  6319  005B3A  2E3F               	decfsz	___almod@counter,f,c
  6320  005B3C  D7E7               	goto	u3400
  6321  005B3E                     l4183:
  6322  005B3E  5040               	movf	___almod@sign,w,c
  6323  005B40  B4D8               	btfsc	status,2,c
  6324  005B42  D008               	goto	l4187
  6325  005B44  1E3A               	comf	___almod@dividend+3,f,c
  6326  005B46  1E39               	comf	___almod@dividend+2,f,c
  6327  005B48  1E38               	comf	___almod@dividend+1,f,c
  6328  005B4A  6C37               	negf	___almod@dividend,c
  6329  005B4C  0E00               	movlw	0
  6330  005B4E  2238               	addwfc	___almod@dividend+1,f,c
  6331  005B50  2239               	addwfc	___almod@dividend+2,f,c
  6332  005B52  223A               	addwfc	___almod@dividend+3,f,c
  6333  005B54                     l4187:
  6334  005B54  C037  F037         	movff	___almod@dividend,?___almod
  6335  005B58  C038  F038         	movff	___almod@dividend+1,?___almod+1
  6336  005B5C  C039  F039         	movff	___almod@dividend+2,?___almod+2
  6337  005B60  C03A  F03A         	movff	___almod@dividend+3,?___almod+3
  6338  005B64  0012               	return		;funcret
  6339  005B66                     __end_of___almod:
  6340                           	opt callstack 0
  6341                           
  6342 ;; *************** function ___aldiv *****************
  6343 ;; Defined at:
  6344 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  6345 ;; Parameters:    Size  Location     Type
  6346 ;;  dividend        4   64[COMRAM] long 
  6347 ;;  divisor         4   68[COMRAM] long 
  6348 ;; Auto vars:     Size  Location     Type
  6349 ;;  quotient        4   74[COMRAM] long 
  6350 ;;  sign            1   73[COMRAM] unsigned char 
  6351 ;;  counter         1   72[COMRAM] unsigned char 
  6352 ;; Return value:  Size  Location     Type
  6353 ;;                  4   64[COMRAM] long 
  6354 ;; Registers used:
  6355 ;;		wreg, status,2, status,0
  6356 ;; Tracked objects:
  6357 ;;		On entry : 0/0
  6358 ;;		On exit  : 0/0
  6359 ;;		Unchanged: 0/0
  6360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6361 ;;      Params:         8       0       0       0       0       0       0       0       0
  6362 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6363 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6364 ;;      Totals:        14       0       0       0       0       0       0       0       0
  6365 ;;Total ram usage:       14 bytes
  6366 ;; Hardware stack levels used:    1
  6367 ;; Hardware stack levels required when called:    2
  6368 ;; This function calls:
  6369 ;;		Nothing
  6370 ;; This function is called by:
  6371 ;;		_mefMenu
  6372 ;;		_descomposicion
  6373 ;;		_CalculoDeFrecuencia
  6374 ;; This function uses a non-reentrant model
  6375 ;;
  6376                           
  6377                           	psect	text19
  6378  005CD0                     __ptext19:
  6379                           	opt callstack 0
  6380  005CD0                     ___aldiv:
  6381                           	opt callstack 25
  6382                           
  6383                           ;incstack = 0
  6384  005CD0  0E00               	movlw	0
  6385  005CD2  6E4A               	movwf	___aldiv@sign,c
  6386  005CD4  AE48               	btfss	___aldiv@divisor+3,7,c
  6387  005CD6  D00A               	goto	l4119
  6388  005CD8  1E48               	comf	___aldiv@divisor+3,f,c
  6389  005CDA  1E47               	comf	___aldiv@divisor+2,f,c
  6390  005CDC  1E46               	comf	___aldiv@divisor+1,f,c
  6391  005CDE  6C45               	negf	___aldiv@divisor,c
  6392  005CE0  0E00               	movlw	0
  6393  005CE2  2246               	addwfc	___aldiv@divisor+1,f,c
  6394  005CE4  2247               	addwfc	___aldiv@divisor+2,f,c
  6395  005CE6  2248               	addwfc	___aldiv@divisor+3,f,c
  6396  005CE8  0E01               	movlw	1
  6397  005CEA  6E4A               	movwf	___aldiv@sign,c
  6398  005CEC                     l4119:
  6399  005CEC  AE44               	btfss	___aldiv@dividend+3,7,c
  6400  005CEE  D00A               	goto	l4125
  6401  005CF0  1E44               	comf	___aldiv@dividend+3,f,c
  6402  005CF2  1E43               	comf	___aldiv@dividend+2,f,c
  6403  005CF4  1E42               	comf	___aldiv@dividend+1,f,c
  6404  005CF6  6C41               	negf	___aldiv@dividend,c
  6405  005CF8  0E00               	movlw	0
  6406  005CFA  2242               	addwfc	___aldiv@dividend+1,f,c
  6407  005CFC  2243               	addwfc	___aldiv@dividend+2,f,c
  6408  005CFE  2244               	addwfc	___aldiv@dividend+3,f,c
  6409  005D00  0E01               	movlw	1
  6410  005D02  1A4A               	xorwf	___aldiv@sign,f,c
  6411  005D04                     l4125:
  6412  005D04  0E00               	movlw	0
  6413  005D06  6E4B               	movwf	___aldiv@quotient,c
  6414  005D08  0E00               	movlw	0
  6415  005D0A  6E4C               	movwf	___aldiv@quotient+1,c
  6416  005D0C  0E00               	movlw	0
  6417  005D0E  6E4D               	movwf	___aldiv@quotient+2,c
  6418  005D10  0E00               	movlw	0
  6419  005D12  6E4E               	movwf	___aldiv@quotient+3,c
  6420  005D14  5045               	movf	___aldiv@divisor,w,c
  6421  005D16  1046               	iorwf	___aldiv@divisor+1,w,c
  6422  005D18  1047               	iorwf	___aldiv@divisor+2,w,c
  6423  005D1A  1048               	iorwf	___aldiv@divisor+3,w,c
  6424  005D1C  B4D8               	btfsc	status,2,c
  6425  005D1E  D02A               	goto	l4147
  6426  005D20  0E01               	movlw	1
  6427  005D22  6E49               	movwf	___aldiv@counter,c
  6428  005D24  D006               	goto	l4133
  6429  005D26                     l4131:
  6430  005D26  90D8               	bcf	status,0,c
  6431  005D28  3645               	rlcf	___aldiv@divisor,f,c
  6432  005D2A  3646               	rlcf	___aldiv@divisor+1,f,c
  6433  005D2C  3647               	rlcf	___aldiv@divisor+2,f,c
  6434  005D2E  3648               	rlcf	___aldiv@divisor+3,f,c
  6435  005D30  2A49               	incf	___aldiv@counter,f,c
  6436  005D32                     l4133:
  6437  005D32  AE48               	btfss	___aldiv@divisor+3,7,c
  6438  005D34  D7F8               	goto	l4131
  6439  005D36                     u3340:
  6440  005D36  90D8               	bcf	status,0,c
  6441  005D38  364B               	rlcf	___aldiv@quotient,f,c
  6442  005D3A  364C               	rlcf	___aldiv@quotient+1,f,c
  6443  005D3C  364D               	rlcf	___aldiv@quotient+2,f,c
  6444  005D3E  364E               	rlcf	___aldiv@quotient+3,f,c
  6445  005D40  5045               	movf	___aldiv@divisor,w,c
  6446  005D42  5C41               	subwf	___aldiv@dividend,w,c
  6447  005D44  5046               	movf	___aldiv@divisor+1,w,c
  6448  005D46  5842               	subwfb	___aldiv@dividend+1,w,c
  6449  005D48  5047               	movf	___aldiv@divisor+2,w,c
  6450  005D4A  5843               	subwfb	___aldiv@dividend+2,w,c
  6451  005D4C  5048               	movf	___aldiv@divisor+3,w,c
  6452  005D4E  5844               	subwfb	___aldiv@dividend+3,w,c
  6453  005D50  A0D8               	btfss	status,0,c
  6454  005D52  D009               	goto	l4143
  6455  005D54  5045               	movf	___aldiv@divisor,w,c
  6456  005D56  5E41               	subwf	___aldiv@dividend,f,c
  6457  005D58  5046               	movf	___aldiv@divisor+1,w,c
  6458  005D5A  5A42               	subwfb	___aldiv@dividend+1,f,c
  6459  005D5C  5047               	movf	___aldiv@divisor+2,w,c
  6460  005D5E  5A43               	subwfb	___aldiv@dividend+2,f,c
  6461  005D60  5048               	movf	___aldiv@divisor+3,w,c
  6462  005D62  5A44               	subwfb	___aldiv@dividend+3,f,c
  6463  005D64  804B               	bsf	___aldiv@quotient,0,c
  6464  005D66                     l4143:
  6465  005D66  90D8               	bcf	status,0,c
  6466  005D68  3248               	rrcf	___aldiv@divisor+3,f,c
  6467  005D6A  3247               	rrcf	___aldiv@divisor+2,f,c
  6468  005D6C  3246               	rrcf	___aldiv@divisor+1,f,c
  6469  005D6E  3245               	rrcf	___aldiv@divisor,f,c
  6470  005D70  2E49               	decfsz	___aldiv@counter,f,c
  6471  005D72  D7E1               	goto	u3340
  6472  005D74                     l4147:
  6473  005D74  504A               	movf	___aldiv@sign,w,c
  6474  005D76  B4D8               	btfsc	status,2,c
  6475  005D78  D008               	goto	l4151
  6476  005D7A  1E4E               	comf	___aldiv@quotient+3,f,c
  6477  005D7C  1E4D               	comf	___aldiv@quotient+2,f,c
  6478  005D7E  1E4C               	comf	___aldiv@quotient+1,f,c
  6479  005D80  6C4B               	negf	___aldiv@quotient,c
  6480  005D82  0E00               	movlw	0
  6481  005D84  224C               	addwfc	___aldiv@quotient+1,f,c
  6482  005D86  224D               	addwfc	___aldiv@quotient+2,f,c
  6483  005D88  224E               	addwfc	___aldiv@quotient+3,f,c
  6484  005D8A                     l4151:
  6485  005D8A  C04B  F041         	movff	___aldiv@quotient,?___aldiv
  6486  005D8E  C04C  F042         	movff	___aldiv@quotient+1,?___aldiv+1
  6487  005D92  C04D  F043         	movff	___aldiv@quotient+2,?___aldiv+2
  6488  005D96  C04E  F044         	movff	___aldiv@quotient+3,?___aldiv+3
  6489  005D9A  0012               	return		;funcret
  6490  005D9C                     __end_of___aldiv:
  6491                           	opt callstack 0
  6492                           
  6493 ;; *************** function _clear_LCD *****************
  6494 ;; Defined at:
  6495 ;;		line 48 in file "lcd.c"
  6496 ;; Parameters:    Size  Location     Type
  6497 ;;		None
  6498 ;; Auto vars:     Size  Location     Type
  6499 ;;  i               4    2[COMRAM] unsigned long 
  6500 ;; Return value:  Size  Location     Type
  6501 ;;                  1    wreg      void 
  6502 ;; Registers used:
  6503 ;;		wreg, status,2, status,0, cstack
  6504 ;; Tracked objects:
  6505 ;;		On entry : 0/0
  6506 ;;		On exit  : 0/0
  6507 ;;		Unchanged: 0/0
  6508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6509 ;;      Params:         0       0       0       0       0       0       0       0       0
  6510 ;;      Locals:         4       0       0       0       0       0       0       0       0
  6511 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6512 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6513 ;;Total ram usage:        4 bytes
  6514 ;; Hardware stack levels used:    1
  6515 ;; Hardware stack levels required when called:    4
  6516 ;; This function calls:
  6517 ;;		_write_CMD
  6518 ;; This function is called by:
  6519 ;;		_mefMenu
  6520 ;;		_parpadeoLed
  6521 ;;		_demo_shield2_1_INI
  6522 ;;		_demo_shield2_1
  6523 ;; This function uses a non-reentrant model
  6524 ;;
  6525                           
  6526                           	psect	text20
  6527  005864                     __ptext20:
  6528                           	opt callstack 0
  6529  005864                     _clear_LCD:
  6530                           	opt callstack 24
  6531                           
  6532                           ;lcd.c: 49: write_CMD(0x01);
  6533                           
  6534                           ;incstack = 0
  6535  005864  0E01               	movlw	1
  6536  005866  EC65  F02B         	call	_write_CMD
  6537                           
  6538                           ;lcd.c: 51: for (unsigned long i = 0; i < 1000; i++);
  6539  00586A  0E00               	movlw	0
  6540  00586C  6E03               	movwf	clear_LCD@i,c
  6541  00586E  0E00               	movlw	0
  6542  005870  6E04               	movwf	clear_LCD@i+1,c
  6543  005872  0E00               	movlw	0
  6544  005874  6E05               	movwf	clear_LCD@i+2,c
  6545  005876  0E00               	movlw	0
  6546  005878  6E06               	movwf	clear_LCD@i+3,c
  6547  00587A                     l4401:
  6548  00587A  0E01               	movlw	1
  6549  00587C  2603               	addwf	clear_LCD@i,f,c
  6550  00587E  0E00               	movlw	0
  6551  005880  2204               	addwfc	clear_LCD@i+1,f,c
  6552  005882  2205               	addwfc	clear_LCD@i+2,f,c
  6553  005884  2206               	addwfc	clear_LCD@i+3,f,c
  6554  005886  5006               	movf	clear_LCD@i+3,w,c
  6555  005888  1005               	iorwf	clear_LCD@i+2,w,c
  6556  00588A  E107               	bnz	u3820
  6557  00588C  0EE8               	movlw	232
  6558  00588E  5C03               	subwf	clear_LCD@i,w,c
  6559  005890  0E03               	movlw	3
  6560  005892  5804               	subwfb	clear_LCD@i+1,w,c
  6561  005894  B0D8               	btfsc	status,0,c
  6562  005896  0012               	return	
  6563  005898  D7F0               	goto	l4401
  6564  00589A                     u3820:
  6565  00589A  0012               	return		;funcret
  6566  00589C                     __end_of_clear_LCD:
  6567                           	opt callstack 0
  6568                           
  6569 ;; *************** function _cobrePrecio *****************
  6570 ;; Defined at:
  6571 ;;		line 343 in file "main.c"
  6572 ;; Parameters:    Size  Location     Type
  6573 ;;		None
  6574 ;; Auto vars:     Size  Location     Type
  6575 ;;		None
  6576 ;; Return value:  Size  Location     Type
  6577 ;;                  4    0[COMRAM] long 
  6578 ;; Registers used:
  6579 ;;		wreg, status,2
  6580 ;; Tracked objects:
  6581 ;;		On entry : 0/0
  6582 ;;		On exit  : 0/0
  6583 ;;		Unchanged: 0/0
  6584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6585 ;;      Params:         4       0       0       0       0       0       0       0       0
  6586 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6587 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6588 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6589 ;;Total ram usage:        4 bytes
  6590 ;; Hardware stack levels used:    1
  6591 ;; Hardware stack levels required when called:    2
  6592 ;; This function calls:
  6593 ;;		Nothing
  6594 ;; This function is called by:
  6595 ;;		_mefMenu
  6596 ;; This function uses a non-reentrant model
  6597 ;;
  6598                           
  6599                           	psect	text21
  6600  0057CC                     __ptext21:
  6601                           	opt callstack 0
  6602  0057CC                     _cobrePrecio:
  6603                           	opt callstack 27
  6604                           
  6605                           ;main.c: 344: cobre_hoy = cobre * dolar_hoy;
  6606                           
  6607                           ;incstack = 0
  6608  0057CC  0EFB               	movlw	251
  6609  0057CE  0100               	movlb	0	; () banked
  6610  0057D0  6F78               	movwf	_cobre_hoy& (0+255),b
  6611  0057D2  0E03               	movlw	3
  6612  0057D4  6F79               	movwf	(_cobre_hoy+1)& (0+255),b
  6613  0057D6  0E00               	movlw	0
  6614  0057D8  6F7A               	movwf	(_cobre_hoy+2)& (0+255),b
  6615  0057DA  0E00               	movlw	0
  6616  0057DC  6F7B               	movwf	(_cobre_hoy+3)& (0+255),b
  6617                           
  6618                           ; BSR set to: 0
  6619                           ;main.c: 345: return cobre_hoy;
  6620  0057DE  0EFB               	movlw	251
  6621  0057E0  6E01               	movwf	?_cobrePrecio,c
  6622  0057E2  0E03               	movlw	3
  6623  0057E4  6E02               	movwf	?_cobrePrecio+1,c
  6624  0057E6  0E00               	movlw	0
  6625  0057E8  6E03               	movwf	?_cobrePrecio+2,c
  6626  0057EA  0E00               	movlw	0
  6627  0057EC  6E04               	movwf	?_cobrePrecio+3,c
  6628                           
  6629                           ; BSR set to: 0
  6630  0057EE  0012               	return		;funcret
  6631  0057F0                     __end_of_cobrePrecio:
  6632                           	opt callstack 0
  6633                           
  6634 ;; *************** function _broncePrecio *****************
  6635 ;; Defined at:
  6636 ;;		line 353 in file "main.c"
  6637 ;; Parameters:    Size  Location     Type
  6638 ;;		None
  6639 ;; Auto vars:     Size  Location     Type
  6640 ;;		None
  6641 ;; Return value:  Size  Location     Type
  6642 ;;                  4    0[COMRAM] long 
  6643 ;; Registers used:
  6644 ;;		wreg, status,2
  6645 ;; Tracked objects:
  6646 ;;		On entry : 0/0
  6647 ;;		On exit  : 0/0
  6648 ;;		Unchanged: 0/0
  6649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6650 ;;      Params:         4       0       0       0       0       0       0       0       0
  6651 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6652 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6653 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6654 ;;Total ram usage:        4 bytes
  6655 ;; Hardware stack levels used:    1
  6656 ;; Hardware stack levels required when called:    2
  6657 ;; This function calls:
  6658 ;;		Nothing
  6659 ;; This function is called by:
  6660 ;;		_mefMenu
  6661 ;; This function uses a non-reentrant model
  6662 ;;
  6663                           
  6664                           	psect	text22
  6665  0057A8                     __ptext22:
  6666                           	opt callstack 0
  6667  0057A8                     _broncePrecio:
  6668                           	opt callstack 27
  6669                           
  6670                           ;main.c: 354: bronce_hoy = bronce * dolar_hoy;
  6671                           
  6672                           ; BSR set to: 0
  6673                           ;incstack = 0
  6674  0057A8  0E23               	movlw	35
  6675  0057AA  0100               	movlb	0	; () banked
  6676  0057AC  6F70               	movwf	_bronce_hoy& (0+255),b
  6677  0057AE  0E03               	movlw	3
  6678  0057B0  6F71               	movwf	(_bronce_hoy+1)& (0+255),b
  6679  0057B2  0E00               	movlw	0
  6680  0057B4  6F72               	movwf	(_bronce_hoy+2)& (0+255),b
  6681  0057B6  0E00               	movlw	0
  6682  0057B8  6F73               	movwf	(_bronce_hoy+3)& (0+255),b
  6683                           
  6684                           ; BSR set to: 0
  6685                           ;main.c: 355: return bronce_hoy;
  6686  0057BA  0E23               	movlw	35
  6687  0057BC  6E01               	movwf	?_broncePrecio,c
  6688  0057BE  0E03               	movlw	3
  6689  0057C0  6E02               	movwf	?_broncePrecio+1,c
  6690  0057C2  0E00               	movlw	0
  6691  0057C4  6E03               	movwf	?_broncePrecio+2,c
  6692  0057C6  0E00               	movlw	0
  6693  0057C8  6E04               	movwf	?_broncePrecio+3,c
  6694                           
  6695                           ; BSR set to: 0
  6696  0057CA  0012               	return		;funcret
  6697  0057CC                     __end_of_broncePrecio:
  6698                           	opt callstack 0
  6699                           
  6700 ;; *************** function _aluminioPrecio *****************
  6701 ;; Defined at:
  6702 ;;		line 348 in file "main.c"
  6703 ;; Parameters:    Size  Location     Type
  6704 ;;		None
  6705 ;; Auto vars:     Size  Location     Type
  6706 ;;		None
  6707 ;; Return value:  Size  Location     Type
  6708 ;;                  4    0[COMRAM] long 
  6709 ;; Registers used:
  6710 ;;		wreg, status,2
  6711 ;; Tracked objects:
  6712 ;;		On entry : 0/0
  6713 ;;		On exit  : 0/0
  6714 ;;		Unchanged: 0/0
  6715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6716 ;;      Params:         4       0       0       0       0       0       0       0       0
  6717 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6718 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6719 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6720 ;;Total ram usage:        4 bytes
  6721 ;; Hardware stack levels used:    1
  6722 ;; Hardware stack levels required when called:    2
  6723 ;; This function calls:
  6724 ;;		Nothing
  6725 ;; This function is called by:
  6726 ;;		_mefMenu
  6727 ;; This function uses a non-reentrant model
  6728 ;;
  6729                           
  6730                           	psect	text23
  6731  005784                     __ptext23:
  6732                           	opt callstack 0
  6733  005784                     _aluminioPrecio:
  6734                           	opt callstack 27
  6735                           
  6736                           ;main.c: 349: aluminio_hoy = aluminio * dolar_hoy;
  6737                           
  6738                           ; BSR set to: 0
  6739                           ;incstack = 0
  6740  005784  0E42               	movlw	66
  6741  005786  0100               	movlb	0	; () banked
  6742  005788  6F74               	movwf	_aluminio_hoy& (0+255),b
  6743  00578A  0E02               	movlw	2
  6744  00578C  6F75               	movwf	(_aluminio_hoy+1)& (0+255),b
  6745  00578E  0E00               	movlw	0
  6746  005790  6F76               	movwf	(_aluminio_hoy+2)& (0+255),b
  6747  005792  0E00               	movlw	0
  6748  005794  6F77               	movwf	(_aluminio_hoy+3)& (0+255),b
  6749                           
  6750                           ; BSR set to: 0
  6751                           ;main.c: 350: return aluminio_hoy;
  6752  005796  0E42               	movlw	66
  6753  005798  6E01               	movwf	?_aluminioPrecio,c
  6754  00579A  0E02               	movlw	2
  6755  00579C  6E02               	movwf	?_aluminioPrecio+1,c
  6756  00579E  0E00               	movlw	0
  6757  0057A0  6E03               	movwf	?_aluminioPrecio+2,c
  6758  0057A2  0E00               	movlw	0
  6759  0057A4  6E04               	movwf	?_aluminioPrecio+3,c
  6760                           
  6761                           ; BSR set to: 0
  6762  0057A6  0012               	return		;funcret
  6763  0057A8                     __end_of_aluminioPrecio:
  6764                           	opt callstack 0
  6765                           
  6766 ;; *************** function _TIMER1_INI *****************
  6767 ;; Defined at:
  6768 ;;		line 26 in file "Tecnica1.c"
  6769 ;; Parameters:    Size  Location     Type
  6770 ;;		None
  6771 ;; Auto vars:     Size  Location     Type
  6772 ;;		None
  6773 ;; Return value:  Size  Location     Type
  6774 ;;                  1    wreg      void 
  6775 ;; Registers used:
  6776 ;;		wreg, status,2
  6777 ;; Tracked objects:
  6778 ;;		On entry : 0/0
  6779 ;;		On exit  : 0/0
  6780 ;;		Unchanged: 0/0
  6781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6782 ;;      Params:         0       0       0       0       0       0       0       0       0
  6783 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6784 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6785 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6786 ;;Total ram usage:        0 bytes
  6787 ;; Hardware stack levels used:    1
  6788 ;; Hardware stack levels required when called:    2
  6789 ;; This function calls:
  6790 ;;		Nothing
  6791 ;; This function is called by:
  6792 ;;		_main
  6793 ;;		_demo_shield2_1_INI
  6794 ;; This function uses a non-reentrant model
  6795 ;;
  6796                           
  6797                           	psect	text24
  6798  005764                     __ptext24:
  6799                           	opt callstack 0
  6800  005764                     _TIMER1_INI:
  6801                           	opt callstack 28
  6802                           
  6803                           ;Tecnica1.c: 27: T1CONbits.TMR1ON = 0;
  6804                           
  6805                           ; BSR set to: 0
  6806                           ;incstack = 0
  6807  005764  90CD               	bcf	4045,0,c	;volatile
  6808                           
  6809                           ;Tecnica1.c: 28: T1CONbits.TMR1CS = 0;
  6810  005766  92CD               	bcf	4045,1,c	;volatile
  6811                           
  6812                           ;Tecnica1.c: 29: T1CONbits.nT1SYNC = 1;
  6813  005768  84CD               	bsf	4045,2,c	;volatile
  6814                           
  6815                           ;Tecnica1.c: 30: T1CONbits.T1OSCEN = 0;
  6816  00576A  96CD               	bcf	4045,3,c	;volatile
  6817                           
  6818                           ;Tecnica1.c: 31: T1CONbits.T1CKPS = 0;
  6819  00576C  0ECF               	movlw	-49
  6820  00576E  16CD               	andwf	4045,f,c	;volatile
  6821                           
  6822                           ;Tecnica1.c: 32: T1CONbits.RD16 = 0;
  6823  005770  9ECD               	bcf	4045,7,c	;volatile
  6824                           
  6825                           ;Tecnica1.c: 33: T1CONbits.T1RUN = 0;
  6826  005772  9CCD               	bcf	4045,6,c	;volatile
  6827                           
  6828                           ;Tecnica1.c: 34: TMR1L = 0x1B;
  6829  005774  0E1B               	movlw	27
  6830  005776  6ECE               	movwf	4046,c	;volatile
  6831                           
  6832                           ;Tecnica1.c: 35: TMR1H = 0xD1;
  6833  005778  0ED1               	movlw	209
  6834  00577A  6ECF               	movwf	4047,c	;volatile
  6835                           
  6836                           ;Tecnica1.c: 36: PIR1bits.TMR1IF = 0;
  6837  00577C  909E               	bcf	3998,0,c	;volatile
  6838                           
  6839                           ;Tecnica1.c: 37: PIE1bits.TMR1IE = 1;
  6840  00577E  809D               	bsf	3997,0,c	;volatile
  6841                           
  6842                           ;Tecnica1.c: 38: INTCONbits.PEIE = 1;
  6843  005780  8CF2               	bsf	4082,6,c	;volatile
  6844  005782  0012               	return		;funcret
  6845  005784                     __end_of_TIMER1_INI:
  6846                           	opt callstack 0
  6847                           
  6848 ;; *************** function _TIMER0_INI *****************
  6849 ;; Defined at:
  6850 ;;		line 13 in file "Tecnica1.c"
  6851 ;; Parameters:    Size  Location     Type
  6852 ;;		None
  6853 ;; Auto vars:     Size  Location     Type
  6854 ;;		None
  6855 ;; Return value:  Size  Location     Type
  6856 ;;                  1    wreg      void 
  6857 ;; Registers used:
  6858 ;;		wreg, status,2
  6859 ;; Tracked objects:
  6860 ;;		On entry : 0/0
  6861 ;;		On exit  : 0/0
  6862 ;;		Unchanged: 0/0
  6863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6864 ;;      Params:         0       0       0       0       0       0       0       0       0
  6865 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6866 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6867 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6868 ;;Total ram usage:        0 bytes
  6869 ;; Hardware stack levels used:    1
  6870 ;; Hardware stack levels required when called:    2
  6871 ;; This function calls:
  6872 ;;		Nothing
  6873 ;; This function is called by:
  6874 ;;		_main
  6875 ;;		_demo_shield2_1_INI
  6876 ;; This function uses a non-reentrant model
  6877 ;;
  6878                           
  6879                           	psect	text25
  6880  00572A                     __ptext25:
  6881                           	opt callstack 0
  6882  00572A                     _TIMER0_INI:
  6883                           	opt callstack 28
  6884                           
  6885                           ;Tecnica1.c: 14: T0CONbits.TMR0ON = 0;
  6886                           
  6887                           ;incstack = 0
  6888  00572A  9ED5               	bcf	4053,7,c	;volatile
  6889                           
  6890                           ;Tecnica1.c: 15: T0CONbits.T08BIT = 0;
  6891  00572C  9CD5               	bcf	4053,6,c	;volatile
  6892                           
  6893                           ;Tecnica1.c: 16: T0CONbits.T0CS = 0;
  6894  00572E  9AD5               	bcf	4053,5,c	;volatile
  6895                           
  6896                           ;Tecnica1.c: 17: T0CONbits.PSA = 0;
  6897  005730  96D5               	bcf	4053,3,c	;volatile
  6898                           
  6899                           ;Tecnica1.c: 18: T0CONbits.T0PS0 = 1;
  6900  005732  80D5               	bsf	4053,0,c	;volatile
  6901                           
  6902                           ;Tecnica1.c: 19: T0CONbits.T0PS1 = 1;
  6903  005734  82D5               	bsf	4053,1,c	;volatile
  6904                           
  6905                           ;Tecnica1.c: 20: T0CONbits.T0PS2 = 1;
  6906  005736  84D5               	bsf	4053,2,c	;volatile
  6907                           
  6908                           ;Tecnica1.c: 21: TMR0L = 0xD2;
  6909  005738  0ED2               	movlw	210
  6910  00573A  6ED6               	movwf	4054,c	;volatile
  6911                           
  6912                           ;Tecnica1.c: 22: TMR0H = 0x48;
  6913  00573C  0E48               	movlw	72
  6914  00573E  6ED7               	movwf	4055,c	;volatile
  6915                           
  6916                           ;Tecnica1.c: 23: INTCONbits.TMR0IE = 1;
  6917  005740  8AF2               	bsf	4082,5,c	;volatile
  6918  005742  0012               	return		;funcret
  6919  005744                     __end_of_TIMER0_INI:
  6920                           	opt callstack 0
  6921                           
  6922 ;; *************** function _PicIni21 *****************
  6923 ;; Defined at:
  6924 ;;		line 3 in file "ConfShield2_1.c"
  6925 ;; Parameters:    Size  Location     Type
  6926 ;;		None
  6927 ;; Auto vars:     Size  Location     Type
  6928 ;;		None
  6929 ;; Return value:  Size  Location     Type
  6930 ;;                  1    wreg      void 
  6931 ;; Registers used:
  6932 ;;		wreg, status,2
  6933 ;; Tracked objects:
  6934 ;;		On entry : 0/0
  6935 ;;		On exit  : 0/0
  6936 ;;		Unchanged: 0/0
  6937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6938 ;;      Params:         0       0       0       0       0       0       0       0       0
  6939 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6940 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6941 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6942 ;;Total ram usage:        0 bytes
  6943 ;; Hardware stack levels used:    1
  6944 ;; Hardware stack levels required when called:    2
  6945 ;; This function calls:
  6946 ;;		Nothing
  6947 ;; This function is called by:
  6948 ;;		_main
  6949 ;;		_demo_shield2_1_INI
  6950 ;; This function uses a non-reentrant model
  6951 ;;
  6952                           
  6953                           	psect	text26
  6954  005838                     __ptext26:
  6955                           	opt callstack 0
  6956  005838                     _PicIni21:
  6957                           	opt callstack 28
  6958                           
  6959                           ;ConfShield2_1.c: 7: LATA = 0x00;
  6960                           
  6961                           ;incstack = 0
  6962  005838  0E00               	movlw	0
  6963  00583A  6E89               	movwf	3977,c	;volatile
  6964                           
  6965                           ;ConfShield2_1.c: 8: LATB = 0x00;
  6966  00583C  0E00               	movlw	0
  6967  00583E  6E8A               	movwf	3978,c	;volatile
  6968                           
  6969                           ;ConfShield2_1.c: 9: LATC = 0x00;
  6970  005840  0E00               	movlw	0
  6971  005842  6E8B               	movwf	3979,c	;volatile
  6972                           
  6973                           ;ConfShield2_1.c: 10: LATD = 0x00;
  6974  005844  0E00               	movlw	0
  6975  005846  6E8C               	movwf	3980,c	;volatile
  6976                           
  6977                           ;ConfShield2_1.c: 11: LATE = 0x00;
  6978  005848  0E00               	movlw	0
  6979  00584A  6E8D               	movwf	3981,c	;volatile
  6980                           
  6981                           ;ConfShield2_1.c: 15: TRISA = 0xFF;
  6982  00584C  6892               	setf	3986,c	;volatile
  6983                           
  6984                           ;ConfShield2_1.c: 17: TRISB = 0xFF;
  6985  00584E  6893               	setf	3987,c	;volatile
  6986                           
  6987                           ;ConfShield2_1.c: 18: TRISC = 0xFF;
  6988  005850  6894               	setf	3988,c	;volatile
  6989                           
  6990                           ;ConfShield2_1.c: 22: TRISD = 0x0C;
  6991  005852  0E0C               	movlw	12
  6992  005854  6E95               	movwf	3989,c	;volatile
  6993                           
  6994                           ;ConfShield2_1.c: 24: TRISE = 0x00;
  6995  005856  0E00               	movlw	0
  6996  005858  6E96               	movwf	3990,c	;volatile
  6997                           
  6998                           ;ConfShield2_1.c: 27: CMCON = 0x07;
  6999  00585A  0E07               	movlw	7
  7000  00585C  6EB4               	movwf	4020,c	;volatile
  7001                           
  7002                           ;ConfShield2_1.c: 28: ADCON1 = 0x0F;
  7003  00585E  0E0F               	movlw	15
  7004  005860  6EC1               	movwf	4033,c	;volatile
  7005  005862  0012               	return		;funcret
  7006  005864                     __end_of_PicIni21:
  7007                           	opt callstack 0
  7008                           
  7009 ;; *************** function _LCD_init *****************
  7010 ;; Defined at:
  7011 ;;		line 79 in file "lcd.c"
  7012 ;; Parameters:    Size  Location     Type
  7013 ;;		None
  7014 ;; Auto vars:     Size  Location     Type
  7015 ;;  i               4   22[COMRAM] unsigned long 
  7016 ;;  i               4   18[COMRAM] unsigned long 
  7017 ;;  i               4   14[COMRAM] unsigned long 
  7018 ;;  i               4   10[COMRAM] unsigned long 
  7019 ;;  i               4    6[COMRAM] unsigned long 
  7020 ;;  i               4    2[COMRAM] unsigned long 
  7021 ;; Return value:  Size  Location     Type
  7022 ;;                  1    wreg      void 
  7023 ;; Registers used:
  7024 ;;		wreg, status,2, status,0, cstack
  7025 ;; Tracked objects:
  7026 ;;		On entry : 0/0
  7027 ;;		On exit  : 0/0
  7028 ;;		Unchanged: 0/0
  7029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7030 ;;      Params:         0       0       0       0       0       0       0       0       0
  7031 ;;      Locals:        24       0       0       0       0       0       0       0       0
  7032 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7033 ;;      Totals:        24       0       0       0       0       0       0       0       0
  7034 ;;Total ram usage:       24 bytes
  7035 ;; Hardware stack levels used:    1
  7036 ;; Hardware stack levels required when called:    4
  7037 ;; This function calls:
  7038 ;;		_write_CMD
  7039 ;; This function is called by:
  7040 ;;		_main
  7041 ;;		_demo_shield2_1_INI
  7042 ;; This function uses a non-reentrant model
  7043 ;;
  7044                           
  7045                           	psect	text27
  7046  006022                     __ptext27:
  7047                           	opt callstack 0
  7048  006022                     _LCD_init:
  7049                           	opt callstack 26
  7050                           
  7051                           ;lcd.c: 80: TRISD &= 0x0F;
  7052                           
  7053                           ;incstack = 0
  7054  006022  0E0F               	movlw	15
  7055  006024  1695               	andwf	3989,f,c	;volatile
  7056                           
  7057                           ;lcd.c: 81: TRISEbits.RE1 = 0;
  7058  006026  9296               	bcf	3990,1,c	;volatile
  7059                           
  7060                           ;lcd.c: 82: TRISEbits.RE0 = 0;
  7061  006028  9096               	bcf	3990,0,c	;volatile
  7062                           
  7063                           ;lcd.c: 83: TRISEbits.RE2 = 0;
  7064  00602A  9496               	bcf	3990,2,c	;volatile
  7065                           
  7066                           ;lcd.c: 86: LCD_tout = 30;
  7067  00602C  0E00               	movlw	0
  7068  00602E  0101               	movlb	1	; () banked
  7069  006030  6F39               	movwf	(_LCD_tout+1)& (0+255),b
  7070  006032  0E1E               	movlw	30
  7071  006034  6F38               	movwf	_LCD_tout& (0+255),b
  7072                           
  7073                           ; BSR set to: 1
  7074                           ;lcd.c: 88: for (unsigned long i = 0; i < 100000; i++);
  7075  006036  0E00               	movlw	0
  7076  006038  6E03               	movwf	LCD_init@i,c
  7077  00603A  0E00               	movlw	0
  7078  00603C  6E04               	movwf	LCD_init@i+1,c
  7079  00603E  0E00               	movlw	0
  7080  006040  6E05               	movwf	LCD_init@i+2,c
  7081  006042  0E00               	movlw	0
  7082  006044  6E06               	movwf	LCD_init@i+3,c
  7083  006046                     l4685:
  7084  006046  0E01               	movlw	1
  7085  006048  2603               	addwf	LCD_init@i,f,c
  7086  00604A  0E00               	movlw	0
  7087  00604C  2204               	addwfc	LCD_init@i+1,f,c
  7088  00604E  2205               	addwfc	LCD_init@i+2,f,c
  7089  006050  2206               	addwfc	LCD_init@i+3,f,c
  7090  006052  5006               	movf	LCD_init@i+3,w,c
  7091  006054  E108               	bnz	u4250
  7092  006056  0EA0               	movlw	160
  7093  006058  5C03               	subwf	LCD_init@i,w,c
  7094  00605A  0E86               	movlw	134
  7095  00605C  5804               	subwfb	LCD_init@i+1,w,c
  7096  00605E  0E01               	movlw	1
  7097  006060  5805               	subwfb	LCD_init@i+2,w,c
  7098  006062  A0D8               	btfss	status,0,c
  7099  006064  D7F0               	goto	l4685
  7100  006066                     u4250:
  7101                           
  7102                           ;lcd.c: 90: write_CMD(0x02);
  7103  006066  0E02               	movlw	2
  7104  006068  EC65  F02B         	call	_write_CMD
  7105                           
  7106                           ;lcd.c: 91: LCD_tout = 1;
  7107  00606C  0E00               	movlw	0
  7108  00606E  0101               	movlb	1	; () banked
  7109  006070  6F39               	movwf	(_LCD_tout+1)& (0+255),b
  7110  006072  0E01               	movlw	1
  7111  006074  6F38               	movwf	_LCD_tout& (0+255),b
  7112                           
  7113                           ; BSR set to: 1
  7114                           ;lcd.c: 93: for (unsigned long i = 0; i < 100000; i++);
  7115  006076  0E00               	movlw	0
  7116  006078  6E07               	movwf	LCD_init@i_522,c
  7117  00607A  0E00               	movlw	0
  7118  00607C  6E08               	movwf	LCD_init@i_522+1,c
  7119  00607E  0E00               	movlw	0
  7120  006080  6E09               	movwf	LCD_init@i_522+2,c
  7121  006082  0E00               	movlw	0
  7122  006084  6E0A               	movwf	LCD_init@i_522+3,c
  7123  006086                     l4697:
  7124  006086  0E01               	movlw	1
  7125  006088  2607               	addwf	LCD_init@i_522,f,c
  7126  00608A  0E00               	movlw	0
  7127  00608C  2208               	addwfc	LCD_init@i_522+1,f,c
  7128  00608E  2209               	addwfc	LCD_init@i_522+2,f,c
  7129  006090  220A               	addwfc	LCD_init@i_522+3,f,c
  7130  006092  500A               	movf	LCD_init@i_522+3,w,c
  7131  006094  E108               	bnz	u4260
  7132  006096  0EA0               	movlw	160
  7133  006098  5C07               	subwf	LCD_init@i_522,w,c
  7134  00609A  0E86               	movlw	134
  7135  00609C  5808               	subwfb	LCD_init@i_522+1,w,c
  7136  00609E  0E01               	movlw	1
  7137  0060A0  5809               	subwfb	LCD_init@i_522+2,w,c
  7138  0060A2  A0D8               	btfss	status,0,c
  7139  0060A4  D7F0               	goto	l4697
  7140  0060A6                     u4260:
  7141                           
  7142                           ;lcd.c: 95: write_CMD(0x28);
  7143  0060A6  0E28               	movlw	40
  7144  0060A8  EC65  F02B         	call	_write_CMD
  7145                           
  7146                           ;lcd.c: 96: LCD_tout = 1;
  7147  0060AC  0E00               	movlw	0
  7148  0060AE  0101               	movlb	1	; () banked
  7149  0060B0  6F39               	movwf	(_LCD_tout+1)& (0+255),b
  7150  0060B2  0E01               	movlw	1
  7151  0060B4  6F38               	movwf	_LCD_tout& (0+255),b
  7152                           
  7153                           ; BSR set to: 1
  7154                           ;lcd.c: 98: for (unsigned long i = 0; i < 100000; i++);
  7155  0060B6  0E00               	movlw	0
  7156  0060B8  6E0B               	movwf	LCD_init@i_523,c
  7157  0060BA  0E00               	movlw	0
  7158  0060BC  6E0C               	movwf	LCD_init@i_523+1,c
  7159  0060BE  0E00               	movlw	0
  7160  0060C0  6E0D               	movwf	LCD_init@i_523+2,c
  7161  0060C2  0E00               	movlw	0
  7162  0060C4  6E0E               	movwf	LCD_init@i_523+3,c
  7163  0060C6                     l4709:
  7164  0060C6  0E01               	movlw	1
  7165  0060C8  260B               	addwf	LCD_init@i_523,f,c
  7166  0060CA  0E00               	movlw	0
  7167  0060CC  220C               	addwfc	LCD_init@i_523+1,f,c
  7168  0060CE  220D               	addwfc	LCD_init@i_523+2,f,c
  7169  0060D0  220E               	addwfc	LCD_init@i_523+3,f,c
  7170  0060D2  500E               	movf	LCD_init@i_523+3,w,c
  7171  0060D4  E108               	bnz	u4270
  7172  0060D6  0EA0               	movlw	160
  7173  0060D8  5C0B               	subwf	LCD_init@i_523,w,c
  7174  0060DA  0E86               	movlw	134
  7175  0060DC  580C               	subwfb	LCD_init@i_523+1,w,c
  7176  0060DE  0E01               	movlw	1
  7177  0060E0  580D               	subwfb	LCD_init@i_523+2,w,c
  7178  0060E2  A0D8               	btfss	status,0,c
  7179  0060E4  D7F0               	goto	l4709
  7180  0060E6                     u4270:
  7181                           
  7182                           ;lcd.c: 100: write_CMD(0x0C);
  7183  0060E6  0E0C               	movlw	12
  7184  0060E8  EC65  F02B         	call	_write_CMD
  7185                           
  7186                           ;lcd.c: 101: LCD_tout = 1;
  7187  0060EC  0E00               	movlw	0
  7188  0060EE  0101               	movlb	1	; () banked
  7189  0060F0  6F39               	movwf	(_LCD_tout+1)& (0+255),b
  7190  0060F2  0E01               	movlw	1
  7191  0060F4  6F38               	movwf	_LCD_tout& (0+255),b
  7192                           
  7193                           ; BSR set to: 1
  7194                           ;lcd.c: 103: for (unsigned long i = 0; i < 100000; i++);
  7195  0060F6  0E00               	movlw	0
  7196  0060F8  6E0F               	movwf	LCD_init@i_524,c
  7197  0060FA  0E00               	movlw	0
  7198  0060FC  6E10               	movwf	LCD_init@i_524+1,c
  7199  0060FE  0E00               	movlw	0
  7200  006100  6E11               	movwf	LCD_init@i_524+2,c
  7201  006102  0E00               	movlw	0
  7202  006104  6E12               	movwf	LCD_init@i_524+3,c
  7203  006106                     l4721:
  7204  006106  0E01               	movlw	1
  7205  006108  260F               	addwf	LCD_init@i_524,f,c
  7206  00610A  0E00               	movlw	0
  7207  00610C  2210               	addwfc	LCD_init@i_524+1,f,c
  7208  00610E  2211               	addwfc	LCD_init@i_524+2,f,c
  7209  006110  2212               	addwfc	LCD_init@i_524+3,f,c
  7210  006112  5012               	movf	LCD_init@i_524+3,w,c
  7211  006114  E108               	bnz	u4280
  7212  006116  0EA0               	movlw	160
  7213  006118  5C0F               	subwf	LCD_init@i_524,w,c
  7214  00611A  0E86               	movlw	134
  7215  00611C  5810               	subwfb	LCD_init@i_524+1,w,c
  7216  00611E  0E01               	movlw	1
  7217  006120  5811               	subwfb	LCD_init@i_524+2,w,c
  7218  006122  A0D8               	btfss	status,0,c
  7219  006124  D7F0               	goto	l4721
  7220  006126                     u4280:
  7221                           
  7222                           ;lcd.c: 105: write_CMD(0x01);
  7223  006126  0E01               	movlw	1
  7224  006128  EC65  F02B         	call	_write_CMD
  7225                           
  7226                           ;lcd.c: 106: LCD_tout = 1;
  7227  00612C  0E00               	movlw	0
  7228  00612E  0101               	movlb	1	; () banked
  7229  006130  6F39               	movwf	(_LCD_tout+1)& (0+255),b
  7230  006132  0E01               	movlw	1
  7231  006134  6F38               	movwf	_LCD_tout& (0+255),b
  7232                           
  7233                           ; BSR set to: 1
  7234                           ;lcd.c: 108: for (unsigned long i = 0; i < 100000; i++);
  7235  006136  0E00               	movlw	0
  7236  006138  6E13               	movwf	LCD_init@i_525,c
  7237  00613A  0E00               	movlw	0
  7238  00613C  6E14               	movwf	LCD_init@i_525+1,c
  7239  00613E  0E00               	movlw	0
  7240  006140  6E15               	movwf	LCD_init@i_525+2,c
  7241  006142  0E00               	movlw	0
  7242  006144  6E16               	movwf	LCD_init@i_525+3,c
  7243  006146                     l4733:
  7244  006146  0E01               	movlw	1
  7245  006148  2613               	addwf	LCD_init@i_525,f,c
  7246  00614A  0E00               	movlw	0
  7247  00614C  2214               	addwfc	LCD_init@i_525+1,f,c
  7248  00614E  2215               	addwfc	LCD_init@i_525+2,f,c
  7249  006150  2216               	addwfc	LCD_init@i_525+3,f,c
  7250  006152  5016               	movf	LCD_init@i_525+3,w,c
  7251  006154  E108               	bnz	u4290
  7252  006156  0EA0               	movlw	160
  7253  006158  5C13               	subwf	LCD_init@i_525,w,c
  7254  00615A  0E86               	movlw	134
  7255  00615C  5814               	subwfb	LCD_init@i_525+1,w,c
  7256  00615E  0E01               	movlw	1
  7257  006160  5815               	subwfb	LCD_init@i_525+2,w,c
  7258  006162  A0D8               	btfss	status,0,c
  7259  006164  D7F0               	goto	l4733
  7260  006166                     u4290:
  7261                           
  7262                           ;lcd.c: 110: write_CMD(0x06);
  7263  006166  0E06               	movlw	6
  7264  006168  EC65  F02B         	call	_write_CMD
  7265                           
  7266                           ;lcd.c: 111: LCD_tout = 1;
  7267  00616C  0E00               	movlw	0
  7268  00616E  0101               	movlb	1	; () banked
  7269  006170  6F39               	movwf	(_LCD_tout+1)& (0+255),b
  7270  006172  0E01               	movlw	1
  7271  006174  6F38               	movwf	_LCD_tout& (0+255),b
  7272                           
  7273                           ; BSR set to: 1
  7274                           ;lcd.c: 113: for (unsigned long i = 0; i < 100000; i++);
  7275  006176  0E00               	movlw	0
  7276  006178  6E17               	movwf	LCD_init@i_526,c
  7277  00617A  0E00               	movlw	0
  7278  00617C  6E18               	movwf	LCD_init@i_526+1,c
  7279  00617E  0E00               	movlw	0
  7280  006180  6E19               	movwf	LCD_init@i_526+2,c
  7281  006182  0E00               	movlw	0
  7282  006184  6E1A               	movwf	LCD_init@i_526+3,c
  7283  006186                     l4745:
  7284  006186  0E01               	movlw	1
  7285  006188  2617               	addwf	LCD_init@i_526,f,c
  7286  00618A  0E00               	movlw	0
  7287  00618C  2218               	addwfc	LCD_init@i_526+1,f,c
  7288  00618E  2219               	addwfc	LCD_init@i_526+2,f,c
  7289  006190  221A               	addwfc	LCD_init@i_526+3,f,c
  7290  006192  501A               	movf	LCD_init@i_526+3,w,c
  7291  006194  E109               	bnz	u4300
  7292  006196  0EA0               	movlw	160
  7293  006198  5C17               	subwf	LCD_init@i_526,w,c
  7294  00619A  0E86               	movlw	134
  7295  00619C  5818               	subwfb	LCD_init@i_526+1,w,c
  7296  00619E  0E01               	movlw	1
  7297  0061A0  5819               	subwfb	LCD_init@i_526+2,w,c
  7298  0061A2  B0D8               	btfsc	status,0,c
  7299  0061A4  0012               	return	
  7300  0061A6  D7EF               	goto	l4745
  7301  0061A8                     u4300:
  7302  0061A8  0012               	return		;funcret
  7303  0061AA                     __end_of_LCD_init:
  7304                           	opt callstack 0
  7305                           
  7306 ;; *************** function _write_CMD *****************
  7307 ;; Defined at:
  7308 ;;		line 130 in file "lcd.c"
  7309 ;; Parameters:    Size  Location     Type
  7310 ;;  dato            1    wreg     unsigned char 
  7311 ;; Auto vars:     Size  Location     Type
  7312 ;;  dato            1    1[COMRAM] unsigned char 
  7313 ;; Return value:  Size  Location     Type
  7314 ;;                  1    wreg      void 
  7315 ;; Registers used:
  7316 ;;		wreg, status,2, status,0, cstack
  7317 ;; Tracked objects:
  7318 ;;		On entry : 0/0
  7319 ;;		On exit  : 0/0
  7320 ;;		Unchanged: 0/0
  7321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7322 ;;      Params:         0       0       0       0       0       0       0       0       0
  7323 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7324 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7325 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7326 ;;Total ram usage:        1 bytes
  7327 ;; Hardware stack levels used:    1
  7328 ;; Hardware stack levels required when called:    3
  7329 ;; This function calls:
  7330 ;;		_write_LCD
  7331 ;; This function is called by:
  7332 ;;		_clear_LCD
  7333 ;;		_set_CURSOR
  7334 ;;		_LCD_init
  7335 ;;		_ret_HOME
  7336 ;;		_DesplazarIzquierda
  7337 ;; This function uses a non-reentrant model
  7338 ;;
  7339                           
  7340                           	psect	text28
  7341  0056CA                     __ptext28:
  7342                           	opt callstack 0
  7343  0056CA                     _write_CMD:
  7344                           	opt callstack 25
  7345                           
  7346                           ;incstack = 0
  7347                           ;write_CMD@dato stored from wreg
  7348  0056CA  6E02               	movwf	write_CMD@dato,c
  7349                           
  7350                           ;lcd.c: 132: PORTEbits.RE1 = 0x0;
  7351  0056CC  9284               	bcf	3972,1,c	;volatile
  7352                           
  7353                           ;lcd.c: 133: PORTEbits.RE0 = 0x0;
  7354  0056CE  9084               	bcf	3972,0,c	;volatile
  7355                           
  7356                           ;lcd.c: 134: write_LCD(dato);
  7357  0056D0  5002               	movf	write_CMD@dato,w,c
  7358  0056D2  ECA2  F02B         	call	_write_LCD
  7359  0056D6  0012               	return		;funcret
  7360  0056D8                     __end_of_write_CMD:
  7361                           	opt callstack 0
  7362                           
  7363 ;; *************** function _write_LCD *****************
  7364 ;; Defined at:
  7365 ;;		line 140 in file "lcd.c"
  7366 ;; Parameters:    Size  Location     Type
  7367 ;;  dato            1    wreg     unsigned char 
  7368 ;; Auto vars:     Size  Location     Type
  7369 ;;  dato            1    0[COMRAM] unsigned char 
  7370 ;; Return value:  Size  Location     Type
  7371 ;;                  1    wreg      void 
  7372 ;; Registers used:
  7373 ;;		wreg, status,2, status,0
  7374 ;; Tracked objects:
  7375 ;;		On entry : 0/0
  7376 ;;		On exit  : 0/0
  7377 ;;		Unchanged: 0/0
  7378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7379 ;;      Params:         0       0       0       0       0       0       0       0       0
  7380 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7381 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7382 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7383 ;;Total ram usage:        1 bytes
  7384 ;; Hardware stack levels used:    1
  7385 ;; Hardware stack levels required when called:    2
  7386 ;; This function calls:
  7387 ;;		Nothing
  7388 ;; This function is called by:
  7389 ;;		_write_DATA
  7390 ;;		_write_CMD
  7391 ;; This function uses a non-reentrant model
  7392 ;;
  7393                           
  7394                           	psect	text29
  7395  005744                     __ptext29:
  7396                           	opt callstack 0
  7397  005744                     _write_LCD:
  7398                           	opt callstack 25
  7399                           
  7400                           ;incstack = 0
  7401                           ;write_LCD@dato stored from wreg
  7402  005744  6E01               	movwf	write_LCD@dato,c
  7403                           
  7404                           ;lcd.c: 142: LATD &= 0x0F;
  7405  005746  0E0F               	movlw	15
  7406  005748  168C               	andwf	3980,f,c	;volatile
  7407                           
  7408                           ;lcd.c: 143: PORTEbits.RE2 = 0x1;
  7409  00574A  8484               	bsf	3972,2,c	;volatile
  7410                           
  7411                           ;lcd.c: 146: LATD |= (dato & 0xF0);
  7412  00574C  5001               	movf	write_LCD@dato,w,c
  7413  00574E  0BF0               	andlw	240
  7414  005750  128C               	iorwf	3980,f,c	;volatile
  7415                           
  7416                           ;lcd.c: 148: PORTEbits.RE2 = 0x0;
  7417  005752  9484               	bcf	3972,2,c	;volatile
  7418                           
  7419                           ;lcd.c: 150: LATD &= 0x0F;
  7420  005754  0E0F               	movlw	15
  7421  005756  168C               	andwf	3980,f,c	;volatile
  7422                           
  7423                           ;lcd.c: 151: PORTEbits.RE2 = 0x1;
  7424  005758  8484               	bsf	3972,2,c	;volatile
  7425                           
  7426                           ;lcd.c: 154: LATD |= (dato << 4);
  7427  00575A  3801               	swapf	write_LCD@dato,w,c
  7428  00575C  0BF0               	andlw	240
  7429  00575E  128C               	iorwf	3980,f,c	;volatile
  7430                           
  7431                           ;lcd.c: 156: PORTEbits.RE2 = 0x0;
  7432  005760  9484               	bcf	3972,2,c	;volatile
  7433  005762  0012               	return		;funcret
  7434  005764                     __end_of_write_LCD:
  7435                           	opt callstack 0
  7436                           
  7437 ;; *************** function _myISR *****************
  7438 ;; Defined at:
  7439 ;;		line 80 in file "main.c"
  7440 ;; Parameters:    Size  Location     Type
  7441 ;;		None
  7442 ;; Auto vars:     Size  Location     Type
  7443 ;;		None
  7444 ;; Return value:  Size  Location     Type
  7445 ;;                  1    wreg      void 
  7446 ;; Registers used:
  7447 ;;		wreg, status,2, status,0, cstack
  7448 ;; Tracked objects:
  7449 ;;		On entry : 0/0
  7450 ;;		On exit  : 0/0
  7451 ;;		Unchanged: 0/0
  7452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7453 ;;      Params:         0       0       0       0       0       0       0       0       0
  7454 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7455 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7456 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7457 ;;Total ram usage:        0 bytes
  7458 ;; Hardware stack levels used:    1
  7459 ;; Hardware stack levels required when called:    1
  7460 ;; This function calls:
  7461 ;;		_marca_tecla
  7462 ;;		_tic_LCD
  7463 ;;		_tic_teclado
  7464 ;; This function is called by:
  7465 ;;		Interrupt level 2
  7466 ;; This function uses a non-reentrant model
  7467 ;;
  7468                           
  7469                           	psect	intcode
  7470  000008                     __pintcode:
  7471                           	opt callstack 0
  7472  000008                     _myISR:
  7473                           	opt callstack 23
  7474                           
  7475                           ;incstack = 0
  7476  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7477  00000A  EDB3  F02D         	call	int_func,f	;refresh shadow registers
  7478                           
  7479                           	psect	intcode_body
  7480  005B66                     __pintcode_body:
  7481                           	opt callstack 23
  7482  005B66                     int_func:
  7483                           	opt callstack 23
  7484  005B66  0006               	pop		; remove dummy address from shadow register refresh
  7485                           
  7486                           ;main.c: 83: if (TMR0IF == 1) {
  7487  005B68  A4F2               	btfss	4082,2,c	;volatile
  7488  005B6A  D044               	goto	i2l5103
  7489                           
  7490                           ;main.c: 84: TMR0IF = 0;
  7491  005B6C  94F2               	bcf	4082,2,c	;volatile
  7492                           
  7493                           ;main.c: 85: TMR0L = 0xD2;
  7494  005B6E  0ED2               	movlw	210
  7495  005B70  6ED6               	movwf	4054,c	;volatile
  7496                           
  7497                           ;main.c: 86: TMR0H = 0x48;
  7498  005B72  0E48               	movlw	72
  7499  005B74  6ED7               	movwf	4055,c	;volatile
  7500                           
  7501                           ;main.c: 90: if(activador_tiempo_ventana_peso==1){
  7502  005B76  0100               	movlb	0	; () banked
  7503  005B78  0564               	decf	_activador_tiempo_ventana_peso& (0+255),w,b
  7504  005B7A  1165               	iorwf	(_activador_tiempo_ventana_peso+1)& (0+255),w,b
  7505  005B7C  1166               	iorwf	(_activador_tiempo_ventana_peso+2)& (0+255),w,b
  7506  005B7E  1167               	iorwf	(_activador_tiempo_ventana_peso+3)& (0+255),w,b
  7507  005B80  A4D8               	btfss	status,2,c
  7508  005B82  D00E               	goto	i2l168
  7509                           
  7510                           ; BSR set to: 0
  7511                           ;main.c: 91: if(tiempo_ventana_peso!=0){
  7512  005B84  51E6               	movf	_tiempo_ventana_peso& (0+255),w,b
  7513  005B86  11E7               	iorwf	(_tiempo_ventana_peso+1)& (0+255),w,b
  7514  005B88  11E8               	iorwf	(_tiempo_ventana_peso+2)& (0+255),w,b
  7515  005B8A  11E9               	iorwf	(_tiempo_ventana_peso+3)& (0+255),w,b
  7516  005B8C  B4D8               	btfsc	status,2,c
  7517  005B8E  D008               	goto	i2l168
  7518                           
  7519                           ; BSR set to: 0
  7520                           ;main.c: 92: tiempo_ventana_peso--;
  7521  005B90  0EFF               	movlw	255
  7522  005B92  27E6               	addwf	_tiempo_ventana_peso& (0+255),f,b
  7523  005B94  0EFF               	movlw	255
  7524  005B96  23E7               	addwfc	(_tiempo_ventana_peso+1)& (0+255),f,b
  7525  005B98  0EFF               	movlw	255
  7526  005B9A  23E8               	addwfc	(_tiempo_ventana_peso+2)& (0+255),f,b
  7527  005B9C  0EFF               	movlw	255
  7528  005B9E  23E9               	addwfc	(_tiempo_ventana_peso+3)& (0+255),f,b
  7529  005BA0                     i2l168:
  7530                           
  7531                           ; BSR set to: 0
  7532                           ;main.c: 93: };main.c: 94: };main.c: 96: if(activador_on == 1){
  7533  005BA0  0560               	decf	_activador_on& (0+255),w,b
  7534  005BA2  1161               	iorwf	(_activador_on+1)& (0+255),w,b
  7535  005BA4  1162               	iorwf	(_activador_on+2)& (0+255),w,b
  7536  005BA6  1163               	iorwf	(_activador_on+3)& (0+255),w,b
  7537  005BA8  A4D8               	btfss	status,2,c
  7538  005BAA  D00E               	goto	i2l170
  7539                           
  7540                           ; BSR set to: 0
  7541                           ;main.c: 97: if(tiempo_parpadeo_on != 0){
  7542  005BAC  51E2               	movf	_tiempo_parpadeo_on& (0+255),w,b
  7543  005BAE  11E3               	iorwf	(_tiempo_parpadeo_on+1)& (0+255),w,b
  7544  005BB0  11E4               	iorwf	(_tiempo_parpadeo_on+2)& (0+255),w,b
  7545  005BB2  11E5               	iorwf	(_tiempo_parpadeo_on+3)& (0+255),w,b
  7546  005BB4  B4D8               	btfsc	status,2,c
  7547  005BB6  D008               	goto	i2l170
  7548                           
  7549                           ; BSR set to: 0
  7550                           ;main.c: 98: tiempo_parpadeo_on--;
  7551  005BB8  0EFF               	movlw	255
  7552  005BBA  27E2               	addwf	_tiempo_parpadeo_on& (0+255),f,b
  7553  005BBC  0EFF               	movlw	255
  7554  005BBE  23E3               	addwfc	(_tiempo_parpadeo_on+1)& (0+255),f,b
  7555  005BC0  0EFF               	movlw	255
  7556  005BC2  23E4               	addwfc	(_tiempo_parpadeo_on+2)& (0+255),f,b
  7557  005BC4  0EFF               	movlw	255
  7558  005BC6  23E5               	addwfc	(_tiempo_parpadeo_on+3)& (0+255),f,b
  7559  005BC8                     i2l170:
  7560                           
  7561                           ; BSR set to: 0
  7562                           ;main.c: 99: };main.c: 100: };main.c: 102: if(activador_off==1){
  7563  005BC8  0101               	movlb	1	; () banked
  7564  005BCA  0520               	decf	_activador_off& (0+255),w,b
  7565  005BCC  1121               	iorwf	(_activador_off+1)& (0+255),w,b
  7566  005BCE  1122               	iorwf	(_activador_off+2)& (0+255),w,b
  7567  005BD0  1123               	iorwf	(_activador_off+3)& (0+255),w,b
  7568  005BD2  A4D8               	btfss	status,2,c
  7569  005BD4  D00F               	goto	i2l5103
  7570                           
  7571                           ; BSR set to: 1
  7572                           ;main.c: 103: if(tiempo_parpadeo_off !=0){
  7573  005BD6  0100               	movlb	0	; () banked
  7574  005BD8  51DE               	movf	_tiempo_parpadeo_off& (0+255),w,b
  7575  005BDA  11DF               	iorwf	(_tiempo_parpadeo_off+1)& (0+255),w,b
  7576  005BDC  11E0               	iorwf	(_tiempo_parpadeo_off+2)& (0+255),w,b
  7577  005BDE  11E1               	iorwf	(_tiempo_parpadeo_off+3)& (0+255),w,b
  7578  005BE0  B4D8               	btfsc	status,2,c
  7579  005BE2  D008               	goto	i2l5103
  7580                           
  7581                           ; BSR set to: 0
  7582                           ;main.c: 104: tiempo_parpadeo_off--;
  7583  005BE4  0EFF               	movlw	255
  7584  005BE6  27DE               	addwf	_tiempo_parpadeo_off& (0+255),f,b
  7585  005BE8  0EFF               	movlw	255
  7586  005BEA  23DF               	addwfc	(_tiempo_parpadeo_off+1)& (0+255),f,b
  7587  005BEC  0EFF               	movlw	255
  7588  005BEE  23E0               	addwfc	(_tiempo_parpadeo_off+2)& (0+255),f,b
  7589  005BF0  0EFF               	movlw	255
  7590  005BF2  23E1               	addwfc	(_tiempo_parpadeo_off+3)& (0+255),f,b
  7591  005BF4                     i2l5103:
  7592                           
  7593                           ;main.c: 105: };main.c: 106: };main.c: 107: };main.c: 109: if (TMR1IF == 1) {
  7594  005BF4  A09E               	btfss	3998,0,c	;volatile
  7595  005BF6  D00D               	goto	i2l176
  7596                           
  7597                           ;main.c: 110: TMR1IF = 0;
  7598  005BF8  909E               	bcf	3998,0,c	;volatile
  7599                           
  7600                           ;main.c: 111: TMR1L = 0x1B;
  7601  005BFA  0E1B               	movlw	27
  7602  005BFC  6ECE               	movwf	4046,c	;volatile
  7603                           
  7604                           ;main.c: 112: TMR1H = 0xD1;
  7605  005BFE  0ED1               	movlw	209
  7606  005C00  6ECF               	movwf	4047,c	;volatile
  7607                           
  7608                           ;main.c: 113: tic_teclado();
  7609  005C02  EC58  F02B         	call	_tic_teclado	;wreg free
  7610                           
  7611                           ;main.c: 114: tic_LCD();
  7612  005C06  EC6C  F02B         	call	_tic_LCD	;wreg free
  7613                           
  7614                           ;main.c: 115: if (RBIF == 1) {
  7615  005C0A  B0F2               	btfsc	4082,0,c	;volatile
  7616                           
  7617                           ;main.c: 116: marca_tecla();
  7618  005C0C  EC5E  F02B         	call	_marca_tecla	;wreg free
  7619                           
  7620                           ;main.c: 117: };main.c: 118: RBIF = 0;
  7621  005C10  90F2               	bcf	4082,0,c	;volatile
  7622  005C12                     i2l176:
  7623  005C12  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7624  005C14  0011               	retfie		f
  7625  005C16                     __end_of_myISR:
  7626                           	opt callstack 0
  7627                           
  7628 ;; *************** function _tic_teclado *****************
  7629 ;; Defined at:
  7630 ;;		line 214 in file "teclado.c"
  7631 ;; Parameters:    Size  Location     Type
  7632 ;;		None
  7633 ;; Auto vars:     Size  Location     Type
  7634 ;;		None
  7635 ;; Return value:  Size  Location     Type
  7636 ;;                  1    wreg      void 
  7637 ;; Registers used:
  7638 ;;		wreg, status,2, status,0
  7639 ;; Tracked objects:
  7640 ;;		On entry : 0/0
  7641 ;;		On exit  : 0/0
  7642 ;;		Unchanged: 0/0
  7643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7644 ;;      Params:         0       0       0       0       0       0       0       0       0
  7645 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7646 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7647 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7648 ;;Total ram usage:        0 bytes
  7649 ;; Hardware stack levels used:    1
  7650 ;; This function calls:
  7651 ;;		Nothing
  7652 ;; This function is called by:
  7653 ;;		_myISR
  7654 ;; This function uses a non-reentrant model
  7655 ;;
  7656                           
  7657                           	psect	text31
  7658  0056B0                     __ptext31:
  7659                           	opt callstack 0
  7660  0056B0                     _tic_teclado:
  7661                           	opt callstack 23
  7662                           
  7663                           ;teclado.c: 216: if (delay_kb) delay_kb--;
  7664                           
  7665                           ;incstack = 0
  7666  0056B0  0100               	movlb	0	; () banked
  7667  0056B2  51C3               	movf	_delay_kb& (0+255),w,b	;volatile
  7668  0056B4  B4D8               	btfsc	status,2,c
  7669  0056B6  0012               	return	
  7670                           
  7671                           ; BSR set to: 0
  7672  0056B8  07C3               	decf	_delay_kb& (0+255),f,b	;volatile
  7673                           
  7674                           ; BSR set to: 0
  7675  0056BA  0012               	return		;funcret
  7676  0056BC                     __end_of_tic_teclado:
  7677                           	opt callstack 0
  7678                           
  7679 ;; *************** function _tic_LCD *****************
  7680 ;; Defined at:
  7681 ;;		line 182 in file "lcd.c"
  7682 ;; Parameters:    Size  Location     Type
  7683 ;;		None
  7684 ;; Auto vars:     Size  Location     Type
  7685 ;;		None
  7686 ;; Return value:  Size  Location     Type
  7687 ;;                  1    wreg      void 
  7688 ;; Registers used:
  7689 ;;		wreg, status,2, status,0
  7690 ;; Tracked objects:
  7691 ;;		On entry : 0/0
  7692 ;;		On exit  : 0/0
  7693 ;;		Unchanged: 0/0
  7694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7695 ;;      Params:         0       0       0       0       0       0       0       0       0
  7696 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7697 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7698 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7699 ;;Total ram usage:        0 bytes
  7700 ;; Hardware stack levels used:    1
  7701 ;; This function calls:
  7702 ;;		Nothing
  7703 ;; This function is called by:
  7704 ;;		_myISR
  7705 ;;		_tic_demo_shield2_1
  7706 ;; This function uses a non-reentrant model
  7707 ;;
  7708                           
  7709                           	psect	text32
  7710  0056D8                     __ptext32:
  7711                           	opt callstack 0
  7712  0056D8                     _tic_LCD:
  7713                           	opt callstack 23
  7714                           
  7715                           ;lcd.c: 183: if (LCD_tout) LCD_tout--;
  7716                           
  7717                           ; BSR set to: 0
  7718                           ;incstack = 0
  7719  0056D8  0101               	movlb	1	; () banked
  7720  0056DA  5138               	movf	_LCD_tout& (0+255),w,b
  7721  0056DC  1139               	iorwf	(_LCD_tout+1)& (0+255),w,b
  7722  0056DE  B4D8               	btfsc	status,2,c
  7723  0056E0  0012               	return	
  7724                           
  7725                           ; BSR set to: 1
  7726  0056E2  0738               	decf	_LCD_tout& (0+255),f,b
  7727  0056E4  A0D8               	btfss	status,0,c
  7728  0056E6  0739               	decf	(_LCD_tout+1)& (0+255),f,b
  7729                           
  7730                           ; BSR set to: 1
  7731  0056E8  0012               	return		;funcret
  7732  0056EA                     __end_of_tic_LCD:
  7733                           	opt callstack 0
  7734                           
  7735 ;; *************** function _marca_tecla *****************
  7736 ;; Defined at:
  7737 ;;		line 207 in file "teclado.c"
  7738 ;; Parameters:    Size  Location     Type
  7739 ;;		None
  7740 ;; Auto vars:     Size  Location     Type
  7741 ;;		None
  7742 ;; Return value:  Size  Location     Type
  7743 ;;                  1    wreg      void 
  7744 ;; Registers used:
  7745 ;;		wreg, status,2
  7746 ;; Tracked objects:
  7747 ;;		On entry : 0/0
  7748 ;;		On exit  : 0/0
  7749 ;;		Unchanged: 0/0
  7750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7751 ;;      Params:         0       0       0       0       0       0       0       0       0
  7752 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7753 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7754 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7755 ;;Total ram usage:        0 bytes
  7756 ;; Hardware stack levels used:    1
  7757 ;; This function calls:
  7758 ;;		Nothing
  7759 ;; This function is called by:
  7760 ;;		_myISR
  7761 ;; This function uses a non-reentrant model
  7762 ;;
  7763                           
  7764                           	psect	text33
  7765  0056BC                     __ptext33:
  7766                           	opt callstack 0
  7767  0056BC                     _marca_tecla:
  7768                           	opt callstack 23
  7769                           
  7770                           ;teclado.c: 208: (void) PORTB;
  7771                           
  7772                           ; BSR set to: 1
  7773                           ;incstack = 0
  7774  0056BC  5081               	movf	3969,w,c	;volatile
  7775  0056BE  F000               	nop		;# 
  7776                           
  7777                           ;teclado.c: 210: flag_kb = 1;
  7778  0056C0  0E01               	movlw	1
  7779  0056C2  0100               	movlb	0	; () banked
  7780  0056C4  6FC4               	movwf	_flag_kb& (0+255),b	;volatile
  7781  0056C6  F000               	nop		;# 
  7782  0056C8  0012               	return		;funcret
  7783  0056CA                     __end_of_marca_tecla:
  7784                           	opt callstack 0
  7785                           
  7786                           	psect	rparam
  7787  0000                     
  7788                           	psect	temp
  7789  00005F                     btemp:
  7790                           	opt callstack 0
  7791  00005F                     	ds	1
  7792  0000                     int$flags	set	btemp
  7793  0000                     wtemp8	set	btemp+1
  7794  0000                     ttemp5	set	btemp+1
  7795  0000                     ttemp6	set	btemp+4
  7796  0000                     ttemp7	set	btemp+8
  7797                           tosu	equ	0xFFF
  7798                           tosh	equ	0xFFE
  7799                           tosl	equ	0xFFD
  7800                           stkptr	equ	0xFFC
  7801                           pclatu	equ	0xFFB
  7802                           pclath	equ	0xFFA
  7803                           pcl	equ	0xFF9
  7804                           tblptru	equ	0xFF8
  7805                           tblptrh	equ	0xFF7
  7806                           tblptrl	equ	0xFF6
  7807                           tablat	equ	0xFF5
  7808                           prodh	equ	0xFF4
  7809                           prodl	equ	0xFF3
  7810                           indf0	equ	0xFEF
  7811                           postinc0	equ	0xFEE
  7812                           postdec0	equ	0xFED
  7813                           preinc0	equ	0xFEC
  7814                           plusw0	equ	0xFEB
  7815                           fsr0h	equ	0xFEA
  7816                           fsr0l	equ	0xFE9
  7817                           wreg	equ	0xFE8
  7818                           indf1	equ	0xFE7
  7819                           postinc1	equ	0xFE6
  7820                           postdec1	equ	0xFE5
  7821                           preinc1	equ	0xFE4
  7822                           plusw1	equ	0xFE3
  7823                           fsr1h	equ	0xFE2
  7824                           fsr1l	equ	0xFE1
  7825                           bsr	equ	0xFE0
  7826                           indf2	equ	0xFDF
  7827                           postinc2	equ	0xFDE
  7828                           postdec2	equ	0xFDD
  7829                           preinc2	equ	0xFDC
  7830                           plusw2	equ	0xFDB
  7831                           fsr2h	equ	0xFDA
  7832                           fsr2l	equ	0xFD9
  7833                           status	equ	0xFD8


Data Sizes:
    Strings     91
    Constant    12
    Data        42
    BSS         162
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     94      94
    BANK0           160     12     160
    BANK1           256      0      58
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    msg2LCD@datos	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_21(CODE[28]), STR_20(CODE[5]), STR_19(CODE[5]), STR_18(CODE[5]), 
		 -> STR_15(CODE[5]), STR_14(CODE[13]), STR_13(CODE[3]), STR_12(CODE[3]), 
		 -> STR_11(CODE[2]), STR_10(CODE[4]), STR_9(CODE[2]), STR_8(CODE[4]), 
		 -> STR_7(CODE[4]), STR_6(CODE[2]), STR_5(CODE[4]), STR_4(CODE[4]), 
		 -> STR_3(CODE[4]), STR_2(CODE[2]), STR_1(CODE[4]), 


Critical Paths under _main in COMRAM

    _mefMenu->_parpadeoLed
    _parpadeoLed->_descomposicion
    _descomposicion->___aldiv
    _set_CURSOR->_write_CMD
    _readADC->___fldiv
    ___xxtofl->_obtener_ADC10
    ___fltol->___fladd
    ___fldiv->___flmul
    _msg2LCD->_write_DATA
    _char2LCD->_write_DATA
    _write_DATA->_write_LCD
    ___almod->_readADC
    ___aldiv->___almod
    _clear_LCD->_write_CMD
    _LCD_init->_write_CMD
    _write_CMD->_write_LCD

Critical Paths under _myISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_mefMenu

Critical Paths under _myISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _myISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _myISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _myISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _myISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _myISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   67198
                           _LCD_init
                           _PicIni21
                         _TIMER0_INI
                         _TIMER1_INI
                            _mefMenu
                       _tecladoIni13
 ---------------------------------------------------------------------------------
 (1) _tecladoIni13                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mefMenu                                             12    12      0   66856
                                              0 BANK0     12    12      0
                            ___aldiv
                            ___almod
                     _aluminioPrecio
                       _broncePrecio
                           _char2LCD
                          _clear_LCD
                        _cobrePrecio
                     _descomposicion
                            _msg2LCD
                        _parpadeoLed
                        _plomoPrecio
                         _set_CURSOR
                              _tecla
 ---------------------------------------------------------------------------------
 (2) _tecla                                                3     3      0      26
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _plomoPrecio                                          4     0      4       0
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _parpadeoLed                                          4     4      0   25446
                                             90 COMRAM     4     4      0
                          _clear_LCD
                     _descomposicion
 ---------------------------------------------------------------------------------
 (3) _descomposicion                                      12    12      0   25334
                                             78 COMRAM    12    12      0
                            ___aldiv
                            ___almod
                            ___fladd
                            ___fltol
                           ___xxtofl
                           _char2LCD
                            _msg2LCD
                            _readADC
                         _set_CURSOR
 ---------------------------------------------------------------------------------
 (2) _set_CURSOR                                           5     5      0     135
                                              2 COMRAM     5     5      0
                          _write_CMD
 ---------------------------------------------------------------------------------
 (4) _readADC                                              4     0      4    5461
                                             50 COMRAM     4     0      4
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                      _obtener_ADC10
 ---------------------------------------------------------------------------------
 (5) _obtener_ADC10                                        6     4      2      71
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___xxtofl                                            14    10      4     898
                                              6 COMRAM    14    10      4
                      _obtener_ADC10 (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fltol                                             10     6      4     805
                                             16 COMRAM    10     6      4
                            ___fladd (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flmul                                             25    17      8    2288
                                              0 COMRAM    25    17      8
 ---------------------------------------------------------------------------------
 (5) ___fldiv                                             25    17      8    1399
                                             25 COMRAM    25    17      8
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _msg2LCD                                              6     4      2    1601
                                              2 COMRAM     6     4      2
                         _write_DATA
 ---------------------------------------------------------------------------------
 (4) _char2LCD                                             5     5      0     134
                                              2 COMRAM     5     5      0
                         _write_DATA
 ---------------------------------------------------------------------------------
 (5) _write_DATA                                           1     1      0      66
                                              1 COMRAM     1     1      0
                          _write_LCD
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             16     8      8    2692
                                              0 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (4) ___almod                                             10     2      8    8504
                                             54 COMRAM    10     2      8
                           ___xxtofl (ARG)
                     _aluminioPrecio (ARG)
                       _broncePrecio (ARG)
                        _cobrePrecio (ARG)
                        _plomoPrecio (ARG)
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             14     6      8    5012
                                             64 COMRAM    14     6      8
                            ___almod (ARG)
                           ___xxtofl (ARG)
                     _aluminioPrecio (ARG)
                       _broncePrecio (ARG)
                        _cobrePrecio (ARG)
                        _plomoPrecio (ARG)
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (3) _clear_LCD                                            4     4      0     112
                                              2 COMRAM     4     4      0
                          _write_CMD
 ---------------------------------------------------------------------------------
 (2) _cobrePrecio                                          4     0      4       0
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _broncePrecio                                         4     0      4       0
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _aluminioPrecio                                       4     0      4       0
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _TIMER1_INI                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TIMER0_INI                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PicIni21                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                            24    24      0     342
                                              2 COMRAM    24    24      0
                          _write_CMD
 ---------------------------------------------------------------------------------
 (3) _write_CMD                                            1     1      0      66
                                              1 COMRAM     1     1      0
                          _write_LCD
 ---------------------------------------------------------------------------------
 (4) _write_LCD                                            1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _myISR                                                0     0      0       0
                        _marca_tecla
                            _tic_LCD
                        _tic_teclado
 ---------------------------------------------------------------------------------
 (8) _tic_teclado                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _tic_LCD                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _marca_tecla                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_init
     _write_CMD
       _write_LCD
   _PicIni21
   _TIMER0_INI
   _TIMER1_INI
   _mefMenu
     ___aldiv
       ___almod (ARG)
         ___xxtofl (ARG)
           _obtener_ADC10 (ARG)
         _aluminioPrecio (ARG)
         _broncePrecio (ARG)
         _cobrePrecio (ARG)
         _plomoPrecio (ARG)
         _readADC (ARG)
           ___fldiv
             ___flmul (ARG)
           ___flmul
           ___fltol
             ___fladd (ARG)
           ___xxtofl
             _obtener_ADC10 (ARG)
           _obtener_ADC10
       ___xxtofl (ARG)
         _obtener_ADC10 (ARG)
       _aluminioPrecio (ARG)
       _broncePrecio (ARG)
       _cobrePrecio (ARG)
       _plomoPrecio (ARG)
       _readADC (ARG)
         ___fldiv
           ___flmul (ARG)
         ___flmul
         ___fltol
           ___fladd (ARG)
         ___xxtofl
           _obtener_ADC10 (ARG)
         _obtener_ADC10
     ___almod
       ___xxtofl (ARG)
         _obtener_ADC10 (ARG)
       _aluminioPrecio (ARG)
       _broncePrecio (ARG)
       _cobrePrecio (ARG)
       _plomoPrecio (ARG)
       _readADC (ARG)
         ___fldiv
           ___flmul (ARG)
         ___flmul
         ___fltol
           ___fladd (ARG)
         ___xxtofl
           _obtener_ADC10 (ARG)
         _obtener_ADC10
     _aluminioPrecio
     _broncePrecio
     _char2LCD
       _write_DATA
         _write_LCD
     _clear_LCD
       _write_CMD
         _write_LCD
     _cobrePrecio
     _descomposicion
       ___aldiv
         ___almod (ARG)
           ___xxtofl (ARG)
             _obtener_ADC10 (ARG)
           _aluminioPrecio (ARG)
           _broncePrecio (ARG)
           _cobrePrecio (ARG)
           _plomoPrecio (ARG)
           _readADC (ARG)
             ___fldiv
               ___flmul (ARG)
             ___flmul
             ___fltol
               ___fladd (ARG)
             ___xxtofl
               _obtener_ADC10 (ARG)
             _obtener_ADC10
         ___xxtofl (ARG)
           _obtener_ADC10 (ARG)
         _aluminioPrecio (ARG)
         _broncePrecio (ARG)
         _cobrePrecio (ARG)
         _plomoPrecio (ARG)
         _readADC (ARG)
           ___fldiv
             ___flmul (ARG)
           ___flmul
           ___fltol
             ___fladd (ARG)
           ___xxtofl
             _obtener_ADC10 (ARG)
           _obtener_ADC10
       ___almod
         ___xxtofl (ARG)
           _obtener_ADC10 (ARG)
         _aluminioPrecio (ARG)
         _broncePrecio (ARG)
         _cobrePrecio (ARG)
         _plomoPrecio (ARG)
         _readADC (ARG)
           ___fldiv
             ___flmul (ARG)
           ___flmul
           ___fltol
             ___fladd (ARG)
           ___xxtofl
             _obtener_ADC10 (ARG)
           _obtener_ADC10
       ___fladd
       ___fltol
         ___fladd (ARG)
       ___xxtofl
         _obtener_ADC10 (ARG)
       _char2LCD
         _write_DATA
           _write_LCD
       _msg2LCD
         _write_DATA
           _write_LCD
       _readADC
         ___fldiv
           ___flmul (ARG)
         ___flmul
         ___fltol
           ___fladd (ARG)
         ___xxtofl
           _obtener_ADC10 (ARG)
         _obtener_ADC10
       _set_CURSOR
         _write_CMD
           _write_LCD
     _msg2LCD
       _write_DATA
         _write_LCD
     _parpadeoLed
       _clear_LCD
         _write_CMD
           _write_LCD
       _descomposicion
         ___aldiv
           ___almod (ARG)
             ___xxtofl (ARG)
               _obtener_ADC10 (ARG)
             _aluminioPrecio (ARG)
             _broncePrecio (ARG)
             _cobrePrecio (ARG)
             _plomoPrecio (ARG)
             _readADC (ARG)
               ___fldiv
                 ___flmul (ARG)
               ___flmul
               ___fltol
                 ___fladd (ARG)
               ___xxtofl
                 _obtener_ADC10 (ARG)
               _obtener_ADC10
           ___xxtofl (ARG)
             _obtener_ADC10 (ARG)
           _aluminioPrecio (ARG)
           _broncePrecio (ARG)
           _cobrePrecio (ARG)
           _plomoPrecio (ARG)
           _readADC (ARG)
             ___fldiv
               ___flmul (ARG)
             ___flmul
             ___fltol
               ___fladd (ARG)
             ___xxtofl
               _obtener_ADC10 (ARG)
             _obtener_ADC10
         ___almod
           ___xxtofl (ARG)
             _obtener_ADC10 (ARG)
           _aluminioPrecio (ARG)
           _broncePrecio (ARG)
           _cobrePrecio (ARG)
           _plomoPrecio (ARG)
           _readADC (ARG)
             ___fldiv
               ___flmul (ARG)
             ___flmul
             ___fltol
               ___fladd (ARG)
             ___xxtofl
               _obtener_ADC10 (ARG)
             _obtener_ADC10
         ___fladd
         ___fltol
           ___fladd (ARG)
         ___xxtofl
           _obtener_ADC10 (ARG)
         _char2LCD
           _write_DATA
             _write_LCD
         _msg2LCD
           _write_DATA
             _write_LCD
         _readADC
           ___fldiv
             ___flmul (ARG)
           ___flmul
           ___fltol
             ___fladd (ARG)
           ___xxtofl
             _obtener_ADC10 (ARG)
           _obtener_ADC10
         _set_CURSOR
           _write_CMD
             _write_LCD
     _plomoPrecio
     _set_CURSOR
       _write_CMD
         _write_LCD
     _tecla
   _tecladoIni13

 _myISR (ROOT)
   _marca_tecla
   _tic_LCD
   _tic_teclado

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      3A       7       22.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      C      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5E      5E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     138      20        0.0%
DATA                 0      0     138       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Sep 16 12:51:43 2021

                 ___fldiv@aexp 0032                   ___fldiv@bexp 0031                   ___fldiv@sign 002A  
                  __CFG_BOR$ON 000000                    __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000  
                 __CFG_CP1$OFF 000000                            l616 5928                            l850 5F2E  
                          l842 5F02                            l843 5F0A                            l852 5F54  
                          l861 5FF8                            l845 5F12                            l854 5F7A  
                          l846 5F22                            l847 5F1A                            l859 5FE4  
                 __CFG_CPB$OFF 000000                            _PR2 000FCB                            _col 00EA  
             _MultiplicadorSet 00D7                            wreg 000FE8                  ?_broncePrecio 0001  
                 ___flmul@aexp 0012                   ___flmul@bexp 0013                   ___flmul@sign 000D  
                 ___flmul@temp 0018                   ___flmul@prod 0014                   __CFG_LVP$OFF 000000  
                 ___fltol@exp1 001A                   __CFG_WDT$OFF 000000                           l1405 6A8E  
                         l1414 6AF4                           l1415 6AF0                           l4001 5C8E  
                         l1522 5E58                           l1515 5DDA                           l1444 64B8  
                         l4101 58B4                           l1390 699A                           l1455 6526  
                         l4015 5CBE                           l4007 5C96                           l4031 5E08  
                         l1456 6522                           l4009 5CA2                           l4033 5E0E  
                         l4025 5DEA                           l1474 6C06                           l4131 5D26  
                         l4203 68A6                           l1491 6EA4                           l1483 6E1E  
                         l4043 5E7E                           l4035 5E1A                           l1484 6E1A  
                         l4133 5D32                           l4125 5D04                           l1389 69BC  
                         l4061 5ECA                           l4045 5E8A                           l4037 5E40  
                         l4151 5D8A                           l4143 5D66                           l4119 5CEC  
                         l4231 68F2                           l4207 68AA                           l4401 587A  
                         l4305 6A02                           l4147 5D74                           l4171 5AFC  
                         l4163 5AD6                           l4307 6A06                           l4315 6A18  
                         l4227 68EE                           l4091 599C                           l4075 58F0  
                         l4173 5B08                           l4333 6AB2                           l4325 6A7E  
                         l4183 5B3E                           l4167 5AEA                           l4343 6AC8  
                         l4239 6912                           l4087 597A                           l4079 595A  
                         l4281 69A8                           l3801 64EC                           l5081 5832  
                         l4187 5B54                           l4179 5B30                           l4283 69AC  
                         l3723 6376                           l4531 61EC                           l4507 6000  
                         l4381 6B68                           l4349 6AD2                           l4269 694E  
                         l3821 656A                           l4525 61CE                           l4509 601E  
                         l4429 5EE0                           l4383 6B6A                           l3751 63EA  
                         l3743 63B6                           l3719 6372                           l4439 5EF8  
                         l4721 6106                           l4377 6B60                           l4369 6B3A  
                         l4297 69E0                           l3825 658E                           l4561 628E  
                         l3835 65C4                           l3739 63B2                           l4555 6258  
                         l4539 6210                           l4571 62C6                           l4733 6146  
                         l4709 60C6                           l3837 65C6                           l3829 65B8  
                         l3765 6418                           l3757 6400                           l3933 6DE4  
                         l3861 6BC6                           l4549 6238                           l4573 630C  
                         l3783 6490                           l3775 6468                           l3927 6DC6  
                         l4479 5FA2                           l4745 6186                           l3953 6E62  
                         l3857 6BB2                           l4809 730C                           l3795 64CE  
                         l3875 6BF2                           l3859 6BB6                           l4685 6046  
                         l3789 64B6                           l3957 6E80                           l3885 6C24  
                         l3877 6BF6                           l3981 5C34                           l5741 7FF6  
                         l4749 6EDC                           l4847 773C                           l4951 7FAA  
                         l4697 6086                           l3969 6EC2                           l5745 62E0  
                         l5747 6304                           l5739 7FC6                           l4891 7B92  
                         l3997 5C7E                           l4885 7B6C                           l4889 7B7E  
                         STR_1 2070                           STR_2 207E                           STR_3 2068  
                         STR_4 2070                           STR_5 2068                           STR_6 207E  
                         STR_7 2068                           STR_8 206C                           STR_9 207E  
                         u3100 5C22                           _LATA 000F89                           u3030 6E14  
                         u3110 5C52                           _LATB 000F8A                           _LATC 000F8B  
                         _LATD 000F8C                           _LATE 000F8D                           u3115 5C48  
                         u3300 58D4                           u3070 6E70                           u3150 5CA8  
                         u3230 5E94                           u3400 5B0C                           u3080 6E8E  
                         u4300 61A8                           u3340 5D36                           u3270 5910  
                         u3520 6970                           u3280 5998                           u4250 6066  
                         u3530 6980                           u4260 60A6                           u3700 6AD6  
                         u3540 6982                           u4270 60E6                           u4280 6126  
                         u3720 6AEA                           u2840 651C                           u4290 6166  
                         u3570 69C4                           u3820 589A                           _RBIE 007F93  
                         u2880 6578                           _RBIF 007F90                           u2890 659C  
                         u3780 6B46                           u2980 6C12                           u2990 6D88  
                         u3890 5F28                           _RBIP 007F88                           u2995 6D7E  
                         _RBPU 007F8F                           _Adec 00A0                           _Acen 00A4  
                         _Bdec 0090                           _Bcen 0094                           _Cdec 00B0  
                         _Ccen 00B4                           _Amil 00A8                           _Bmil 0098  
                         _Cmil 00B8                           _Auni 009C                           _Buni 008C  
                         _Cuni 00AC                           _Pdec 0080                           _Pcen 0084  
                         _Pmil 0088                   ?_marca_tecla 0001                           _Puni 007C  
                         _fila 00EB                           _main 5814  _activador_tiempo_ventana_peso 0064  
                         fsr1l 000FE1                           btemp 005F                           prodh 000FF4  
                         prodl 000FF3                           start 000E                  __CFG_IESO$OFF 000000  
              ___fldiv@new_exp 002B                   msg2LCD@datos 0003                  __CFG_MCLRE$ON 000000  
                 ___param_bank 000000                    ?_TIMER0_INI 0001                    ?_TIMER1_INI 0001  
                __CFG_PLLDIV$5 000000               __end_of_LCD_init 61AA                  ___fltol@sign1 0019  
              __end_of___aldiv 5D9C                __end_of___almod 5B66                __end_of___fladd 6B86  
                        ?_main 0001                __end_of___fldiv 65CE                          _EEADR 000FA9  
                        STR_10 2074                          STR_11 206A                          STR_12 2078  
                        STR_20 2063                          STR_13 207B                          STR_21 2025  
                        STR_14 2041                          STR_15 2054                          STR_16 204E  
                        STR_18 2059                          STR_19 205E                __end_of___flmul 6ED8  
              __end_of___fltol 5CD0                          _CMCON 000FB4                          i2l170 5BC8  
                        i2l176 5C12                          i2l168 5BA0                          _RCREG 000FAE  
                        _TMR0H 000FD7                          _TMR1H 000FCF                          _TMR0L 000FD6  
                        _TMR1L 000FCE                          _SPBRG 000FAF                          _PORTA 000F80  
                        _PORTB 000F81                  __CFG_USBDIV$2 000000                          _TRISA 000F92  
                        _TRISB 000F93                          _TRISC 000F94                          _TRISD 000F95  
                        _TRISE 000F96                          _TXREG 000FAD                 ??_broncePrecio 0005  
                __CFG_PWRT$OFF 000000                  __CFG_WRT0$OFF 000000                  __CFG_WRT1$OFF 000000  
               __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000  
          _tiempo_parpadeo_off 00DE                __end_of_mefMenu 8000                __end_of_msg2LCD 59B0  
                __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000                __end_of_readADC 5ABA  
               __CFG_EBTRB$OFF 000000                          _cobre 0130                          _myISR 0008  
                        _kilos 0114                          _tecla 5EDC                __end_of_tic_LCD 56EA  
                        _plomo 0124                          tablat 000FF5                          ttemp5 0060  
                        ttemp6 0063                          ttemp7 0067                          status 000FD8  
                        wtemp8 0060                   ?_parpadeoLed 0001                __initialization 59B0  
                 __end_of_main 5838               __end_of_PicIni21 5864                         ??_main 005F  
             ??_aluminioPrecio 0005                  __activetblptr 000002           __size_of_cobrePrecio 0024  
                       _ADCON1 000FC1                         _ADCON2 000FC0                         ?_myISR 0001  
                       _ADRESH 000FC4                         _ADRESL 000FC3                         _EEDATA 000FA8  
                       _CCPR1L 000FBE                         ?_tecla 0001                         _EECON2 000FA7  
                       _INT0IE 007F94                         _INT0IF 007F91                         _INT1IE 007F83  
                       _INT1IF 007F80               __end_of_char2LCD 58D6                         i2l5103 5BF4  
          __size_of_TIMER0_INI 001A            __size_of_TIMER1_INI 0020                   ?_tic_teclado 0001  
                       _TMR0IF 007F92                         _TMR1IF 007CF0                         _TMR0ON 007EAF  
                       _SPBRGH 000FB0                         _TMR1ON 007E68               __end_of___xxtofl 5EDC  
               __CFG_VREGEN$ON 000000                 __CFG_XINST$OFF 000000                      ??___aldiv 0049  
                    ??___almod 003F                      ??___fladd 0009                         _dec_kg 0108  
                    ??___fldiv 0022                 __CFG_STVREN$ON 000000                         _cen_kg 010C  
                    ??___flmul 0009                      ??___fltol 0015                   ?_plomoPrecio 0001  
                       _bronce 0128                         _gramos 0100                         clear_0 59F6  
                       clear_1 5A02                         _teclas 2019                         _uni_kg 0104  
                    ??_mefMenu 00F4                      ??_msg2LCD 0005                      ??_readADC 0037  
                    ??_tic_LCD 0001                   __mediumconst 0000                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                  _OffsetPeriodo 00EE  
          demo_shield2_1@flag0 00D3            demo_shield2_1@flag1 00D2            demo_shield2_1@flag2 00D1  
          demo_shield2_1@flag3 00D0            demo_shield2_1@cont1 00CC            demo_shield2_1@cont2 00CB  
          demo_shield2_1@cont3 00CA                   ___xxtofl@arg 0011                   ___xxtofl@exp 0010  
                 ___xxtofl@val 0007                     __accesstop 0060        __end_of__initialization 5A08  
              __CFG_PBADEN$OFF 000000                      ?_LCD_init 0001                  ___rparam_used 000001  
                   ___fltol@f1 0011           __size_of_marca_tecla 000E           __end_of_broncePrecio 57CC  
               __pcstackCOMRAM 0001                   __pidataBANK0 5714                   __pidataBANK1 56EA  
                __end_of_myISR 5C16                  tecla@tecla_KB 0003                  __end_of_tecla 6022  
           __size_of_clear_LCD 0038                   _activador_on 0060                      LCD_init@i 0003  
       __size_of_obtener_ADC10 0046                    set_CURSOR@i 0004                        ??_myISR 0001  
                      ??_tecla 0001                 _casos_parpadeo 011C                  ?_tecladoIni13 0001  
                   __pbssBANK0 0060                     __pbssBANK1 0100                      ?_PicIni21 0001  
                   ??_LCD_init 0003                  _maximoEncoder 00C9           __size_of_parpadeoLed 019C  
                 ??_TIMER0_INI 0001                   ??_TIMER1_INI 0001                      ?_char2LCD 0001  
      __size_of_descomposicion 02AC                   char2LCD@dato 0003            _tiempo_ventana_peso 00E6  
                    ?___xxtofl 0007                        Leds13@i 00F1                 ??_tecladoIni13 0001  
                   _bronce_hoy 0070                     ??_PicIni21 0001              __end_of_clear_LCD 589C  
           __end_of_TIMER0_INI 5744             __end_of_TIMER1_INI 5784                     _frecuencia 00F2  
           __size_of_write_CMD 000E             __size_of_write_LCD 0020           __size_of_tic_teclado 000C  
                      __Hparam 0000                        __Lparam 0000                     _guarda_ADC 0118  
                _obtener_ADC10 5912                        ___aldiv 5CD0                        ___almod 5ABA  
                      ___fladd 687A                        ___fldiv 6346                        ___flmul 6B86  
                      ___fltol 5C16                   __psmallconst 2018       obtener_ADC10@GuardoPorta 0003  
                      __pcinit 59B0       obtener_ADC10@GuardoTrisa 0004                        __ramtop 0800  
                      _flag_kb 00C4           __size_of_plomoPrecio 0024                        __ptext0 5814  
                      __ptext1 56FE                        __ptext2 6ED8                        __ptext3 5EDC  
                      __ptext4 57F0                        __ptext5 61AA                        __ptext6 65CE  
                      __ptext7 58D6                        __ptext8 5A16                        __ptext9 5912  
                   ??_char2LCD 0003                        _mefMenu 6ED8                        _msg2LCD 5958  
                    _T0CONbits 000FD5                        _readADC 5A16                      _T1CONbits 000FCD  
                    _T2CONbits 000FCA                     ??___xxtofl 000B                        _tic_LCD 56D8  
             ___aldiv@dividend 0041                     clear_LCD@i 0003                  _minimoEncoder 00C8  
                   _set_CURSOR 58D6                   _mefMenu$2614 00FC                   _mefMenu$2615 00F8  
               __pintcode_body 5B66                  debounce@state 00D6           end_of_initialization 5A08  
               set_CURSOR@posi 0003                   _aluminio_hoy 0074          __size_of_broncePrecio 0024  
                __Lmediumconst 0000                        int_func 5B66                 ?_obtener_ADC10 0001  
                    _RCSTAbits 000FAB               ___aldiv@quotient 004B                        postdec1 000FE5  
                      postinc0 000FEE                      _PORTBbits 000F81                      _PORTDbits 000F83  
                    _PORTEbits 000F84              __end_of_write_CMD 56D8                  ??_cobrePrecio 0005  
           _EstadoDeLosBotones 00DD              __end_of_write_LCD 5764                    ___fladd@grs 0010  
                ___xxtofl@sign 000F                      _TRISAbits 000F92                      _TRISBbits 000F93  
                    _TRISCbits 000F94                      _TRISDbits 000F95                      _TRISEbits 000F96  
                 _broncePrecio 57A8              tic_encoder@estado 00EC                    ___fldiv@grs 002D  
                  ___fldiv@rem 0026                    ___flmul@grs 000E                  LCD_init@i_522 0007  
                LCD_init@i_523 000B                  LCD_init@i_524 000F                  LCD_init@i_525 0013  
                LCD_init@i_526 0017                    _CCP1CONbits 000FBD                      _TXSTAbits 000FAC  
            __size_of_LCD_init 0188                     _write_DATA 2008           __end_of_tecladoIni13 5714  
                  _BAUDCONbits 000FB8             _tiempo_parpadeo_on 00E2                 _descomposicion 65CE  
               __end_of_teclas 2025                  _activador_off 0120            start_initialization 59B0  
                  ?_set_CURSOR 0001            __end_of_cobrePrecio 57F0        __size_of_aluminioPrecio 0024  
                ??_marca_tecla 0001              __size_of_PicIni21 002C                ??_obtener_ADC10 0003  
               tecla@status_KB 00C2                      _LowerByte 00D9            _descomposicion$2616 004F  
          _descomposicion$2617 0057            _descomposicion$2618 0053         __end_of_descomposicion 687A  
                  __pdataBANK0 00DE                    __pdataBANK1 0124               __CFG_LPT1OSC$OFF 000000  
              _posicionEncoder 00C7       tic_debounce@debounce_tic 00ED             demo_shield2_1@cont 00CD  
                    ___fladd@a 0005                      ___fladd@b 0001                      ___fldiv@a 001E  
                    ___fldiv@b 001A                      _UpperByte 00EF                      ___flmul@a 0005  
                    ___flmul@b 0001              __size_of_char2LCD 003A                  __pcstackBANK0 00F4  
            __size_of___xxtofl 0140                      __pnvBANK1 0138                  ??_parpadeoLed 005B  
                    _clear_LCD 5864                      _casosMenu 0068                      _flagCanal 00C5  
          __end_of_marca_tecla 56CA                      char2LCD@i 0004                      __pintcode 0008  
                     ?___aldiv 0041            __size_of_set_CURSOR 003C                       ?___almod 0037  
                     ?___fladd 0001                    ?_write_DATA 0001                       ?___fldiv 001A  
                     ?___flmul 0001                       ?___fltol 0011                      _cobre_hoy 0078  
              ?_descomposicion 0001            obtener_ADC10@ad_res 0005               ___almod@dividend 0037  
                    _dolar_hoy 0134              Send4Disp@Nro_Disp 00F0                       ?_mefMenu 0001  
                     ?_msg2LCD 0003                       ?_readADC 0033                    __smallconst 2018  
                  _cobrePrecio 57CC                       ?_tic_LCD 0001                 _desplazar_tout 00BC  
               __size_of_myISR 5C0E                 __size_of_tecla 0146       demo_shield2_1@PrimeraVez 00CF  
                ??_tic_teclado 0001                ___aldiv@divisor 0045                   debounce@cnt0 00D5  
                 debounce@cnt1 00D4                ___aldiv@counter 0049                       _LATAbits 000F89  
                     _LATCbits 000F8B                       _LATDbits 000F8C                       _LATEbits 000F8D  
                     _LCD_init 6022                       _LCD_tout 0138                       _PIE1bits 000F9D  
                  _encoderTout 00C6                     ?_clear_LCD 0001          __size_of_tecladoIni13 0016  
                     _PIR1bits 000F9E               __CFG_WDTPS$32768 000000                      _plomo_hoy 006C  
                ??_plomoPrecio 0005            __end_of_parpadeoLed 6346                     _ADCON0bits 000FC2  
                _Multiplicador 00D8                _MedioPeriodoSet 00BE                      _write_CMD 56CA  
                    _write_LCD 5744                    _INTCON2bits 000FF1                    _INTCON3bits 000FF0  
                    copy_data0 59C4                      copy_data1 59E4            __size_of_write_DATA 000E  
               _aluminioPrecio 5784                   _tecladoIni13 56FE                       _PicIni21 5838  
                  _marca_tecla 56BC            Botones13@Estado_BOT 00DA        demo_shield2_1@Desplazar 00CE  
                   _EECON1bits 000FA6                       __Hrparam 0000                       __Lrparam 0000  
          __end_of_tic_teclado 56BC               __size_of___aldiv 00CC               __size_of___almod 00AC  
             __size_of___fladd 030C                 write_DATA@dato 0002               __size_of___fldiv 0288  
             __size_of___flmul 0352               __size_of___fltol 00BA                       _char2LCD 589C  
             __size_of_mefMenu 1128            __end_of_plomoPrecio 5814               __size_of_msg2LCD 0058  
             __size_of_readADC 00A4                       ___xxtofl 5D9C                       _delay_kb 00C3  
             __size_of_tic_LCD 0012                   ??_set_CURSOR 0003         __end_of_aluminioPrecio 57A8  
                   ?_write_CMD 0001                     ?_write_LCD 0001                       __ptext10 5D9C  
                     __ptext11 5C16                       __ptext20 5864                       __ptext12 6B86  
                     __ptext21 57CC                       __ptext13 6346                       __ptext22 57A8  
                     __ptext14 5958                       __ptext31 56B0                       __ptext23 5784  
                     __ptext15 589C                       __ptext32 56D8                       __ptext24 5764  
                     __ptext16 2008                       __ptext33 56BC                       __ptext25 572A  
                     __ptext17 687A                       __ptext26 5838                       __ptext18 5ABA  
                     __ptext27 6022                       __ptext19 5CD0                       __ptext28 56CA  
                     __ptext29 5744                    _kgrs_pesado 0110                       _aluminio 012C  
              ___almod@divisor 003B                       _bot_tout 00DB                       _led_tout 00C0  
              ___almod@counter 003F                  __size_of_main 0024                    _parpadeoLed 61AA  
                  ??_clear_LCD 0003                       int$flags 005F                       _mux_tout 00DC  
           __end_of_set_CURSOR 5912                       msg2LCD@i 0005          __CFG_CPUDIV$OSC1_PLL2 000000  
                   _INTCONbits 000FF2                ?_aluminioPrecio 0001                       intlevel2 0000  
                write_CMD@dato 0002                    _tic_teclado 56B0                  write_LCD@dato 0001  
             ??_descomposicion 004F          __end_of_obtener_ADC10 5958                   ??_write_DATA 0002  
                   _TIMER0_INI 572A                     _TIMER1_INI 5764                    _plomoPrecio 57F0  
                 ?_cobrePrecio 0001                   ___aldiv@sign 004A                    ??_write_CMD 0002  
                  ??_write_LCD 0001                  ___fladd@signs 000D             __CFG_FOSC$HSPLL_HS 000000  
           __end_of_write_DATA 2016                   ___almod@sign 0040                   ___fladd@aexp 000E  
                 ___fladd@bexp 000F  
